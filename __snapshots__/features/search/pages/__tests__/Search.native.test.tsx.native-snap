// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search component should render Search 1`] = `
<View
  style={
    Array [
      Object {
        "flexBasis": 0,
        "flexGrow": 1,
        "flexShrink": 1,
      },
    ]
  }
>
  <View
    height={16}
    position="absolute"
    style={
      Array [
        Object {
          "backgroundColor": "#eb0055",
          "height": 16,
          "left": 0,
          "overflow": "hidden",
          "position": "absolute",
          "right": 0,
          "top": 0,
          "zIndex": -1,
        },
      ]
    }
  >
    <View
      height={16}
      width={964}
    >
      <Text>
        undefined-SVG-Mock
      </Text>
    </View>
  </View>
  <View
    customHeight={16}
    enable={true}
    style={
      Array [
        Object {
          "height": 16,
        },
      ]
    }
  />
  <View
    style={
      Array [
        Object {
          "alignSelf": "center",
          "height": 32,
          "marginVertical": 24,
          "paddingHorizontal": 24,
          "position": "relative",
          "width": "100%",
          "zIndex": 1,
        },
      ]
    }
    testID="searchBoxWithoutLabel"
  >
    <View
      testID="searchBoxWithAutocomplete"
    >
      <Text
        style={
          Array [
            Object {
              "display": "none",
            },
          ]
        }
      >
        Recherche une offre, un titre, un lieu...
      </Text>
      <View
        marginHorizontal={24}
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "justifyContent": "center",
              "marginHorizontal": 24,
            },
          ]
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "marginRight": 16,
              "opacity": 1,
              "userSelect": "auto",
            }
          }
          testID="previousButton"
        >
          <View
            height={24}
            width={24}
          >
            <Text>
              undefined-SVG-Mock
            </Text>
          </View>
        </View>
        <View
          height="regular"
          isDisabled={false}
          isError={false}
          isFocus={false}
          style={
            Array [
              Object {
                "alignItems": "center",
                "backgroundColor": "#ffffff",
                "borderColor": "#90949D",
                "borderRadius": 22,
                "borderStyle": "solid",
                "borderWidth": 1,
                "flexDirection": "row",
                "height": 48,
                "paddingBottom": 0,
                "paddingLeft": 17,
                "paddingRight": 17,
                "paddingTop": 0,
                "width": "100%",
              },
              Object {
                "borderRadius": 24,
                "outlineOffset": 0,
              },
            ]
          }
          testID="styled-input-container"
        >
          <View
            numberOfSpaces={1}
            style={
              Array [
                Object {
                  "width": 4,
                },
              ]
            }
          />
          <View
            style={
              Array [
                Object {
                  "flexShrink": 0,
                },
              ]
            }
          >
            <View
              height={20}
              width={20}
            >
              <Text>
                undefined-SVG-Mock
              </Text>
            </View>
          </View>
          <View
            numberOfSpaces={1}
            style={
              Array [
                Object {
                  "width": 4,
                },
              ]
            }
          />
          <TextInput
            accessible={false}
            autoCorrect={false}
            editable={true}
            enablesReturnKeyAutomatically={true}
            nativeID="testUuidV4"
            onBlur={[Function]}
            onChangeText={[Function]}
            onFocus={[Function]}
            onSubmitEditing={[Function]}
            placeholder="Offre, artiste..."
            placeholderTextColor="#696A6F"
            returnKeyType="search"
            selectionColor="#696A6F"
            style={
              Array [
                Object {
                  "color": "#161617",
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                  "fontFamily": "Montserrat-Regular",
                  "fontSize": 15,
                  "height": "100%",
                  "paddingBottom": 0,
                  "paddingLeft": 0,
                  "paddingRight": 0,
                  "paddingTop": 0,
                },
                Object {},
              ]
            }
            testID="searchInput"
            value=""
          />
        </View>
      </View>
      <Text
        nativeID="testUuidV4"
        style={
          Array [
            Object {
              "display": "none",
            },
          ]
        }
      >
        Indique le nom d'une offre ou d'un lieu puis lance la recherche à l'aide de la touche
"Entrée"
      </Text>
    </View>
  </View>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "paddingHorizontal": 24,
        "paddingTop": 16,
      }
    }
    data={Array []}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    keyboardDismissMode="on-drag"
    keyboardShouldPersistTaps="handled"
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    testID="autocompleteList"
    viewabilityConfigCallbackPairs={Array []}
  >
    <View />
  </RCTScrollView>
</View>
`;
