// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchResults component should render correctly 1`] = `
Array [
  <View>
    <RCTScrollView
      horizontal={true}
      showsHorizontalScrollIndicator={false}
    >
      <View>
        <View
          numberOfSpaces={5}
          style={
            Array [
              Object {
                "width": 20,
              },
            ]
          }
        />
        <View
          accessibilityRole="list"
          style={
            Array [
              Object {
                "flexDirection": "row",
                "paddingLeft": 0,
              },
            ]
          }
        >
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginHorizontal": 4,
                },
              ]
            }
          >
            <View
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#eb0055",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="locationButton"
            >
              <Text
                isSelected={true}
                style={
                  Array [
                    Object {
                      "color": "#eb0055",
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                      "marginLeft": 4,
                      "textAlign": "left",
                    },
                  ]
                }
                testID="locationButtonLabel"
              >
                Partout
              </Text>
              <View
                accessibilityLabel="Filtre sélectionné"
                height={16}
                testID="locationButtonIcon"
                width={16}
              >
                <Text>
                  locationButtonIcon-SVG-Mock
                </Text>
              </View>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginHorizontal": 4,
                },
              ]
            }
          >
            <View
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="categoryButton"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                      "marginLeft": 4,
                      "textAlign": "left",
                    },
                  ]
                }
                testID="categoryButtonLabel"
              >
                Catégories
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginHorizontal": 4,
                },
              ]
            }
          >
            <View
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="priceButton"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                      "marginLeft": 4,
                      "textAlign": "left",
                    },
                  ]
                }
                testID="priceButtonLabel"
              >
                Prix
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginHorizontal": 4,
                },
              ]
            }
          >
            <View
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="typeButton"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                      "marginLeft": 4,
                      "textAlign": "left",
                    },
                  ]
                }
                testID="typeButtonLabel"
              >
                Type
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginHorizontal": 4,
                },
              ]
            }
          >
            <View
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="datesHoursButton"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                      "marginLeft": 4,
                      "textAlign": "left",
                    },
                  ]
                }
                testID="datesHoursButtonLabel"
              >
                Dates & heures
              </Text>
            </View>
          </View>
        </View>
        <View
          numberOfSpaces={5}
          style={
            Array [
              Object {
                "width": 20,
              },
            ]
          }
        />
      </View>
    </RCTScrollView>
    <View
      numberOfSpaces={4}
      style={
        Array [
          Object {
            "height": 16,
          },
        ]
      }
    />
  </View>,
  <View
    style={
      Array [
        Object {
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
        },
      ]
    }
    testID="searchResults"
  >
    <RCTScrollView
      ItemSeparatorComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "inlineStyle": InlineStyle {
            "rules": Array [
              [Function],
            ],
          },
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      ListEmptyComponent={<NoSearchResult />}
      ListFooterComponent={
        <React.Fragment>
          <Styled(View) />
        </React.Fragment>
      }
      ListHeaderComponent={
        <React.Fragment>
          <NumberOfResults
            nbHits={0}
          />
        </React.Fragment>
      }
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      itemAs="li"
      keyExtractor={[Function]}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      listAs="ul"
      onContentSizeChange={[Function]}
      onEndReached={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      refreshing={false}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEnabled={false}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="searchResultsFlatlist"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          onLayout={[Function]}
        />
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexBasis": 0,
                "flexGrow": 1,
                "flexShrink": 1,
                "height": "100%",
                "justifyContent": "center",
                "marginHorizontal": 24,
                "minHeight": 250,
              },
            ]
          }
        >
          <View
            style={
              Array [
                Object {
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                },
              ]
            }
          />
          <View
            style={
              Array [
                Object {
                  "flexShrink": 0,
                },
              ]
            }
          >
            <View
              height={156}
              width={200}
            >
              <Text>
                undefined-SVG-Mock
              </Text>
            </View>
          </View>
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                },
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "color": "#161617",
                    "fontFamily": "Montserrat-Medium",
                    "fontSize": 18,
                    "lineHeight": 22,
                    "marginTop": 16,
                  },
                ]
              }
            >
              Pas de résultat
            </Text>
            <Text
              style={
                Array [
                  Object {
                    "color": "#161617",
                    "fontFamily": "Montserrat-Regular",
                    "fontSize": 15,
                    "lineHeight": 20,
                    "marginTop": 24,
                    "textAlign": "center",
                  },
                ]
              }
            >
              <Text
                aria-live="assertive"
                style={
                  Array [
                    Object {
                      "color": "#696A6F",
                      "fontFamily": "Montserrat-Regular",
                      "fontSize": 15,
                      "lineHeight": 20,
                    },
                  ]
                }
              >
                Vérifie ta localisation ou modifie tes filtres pour trouver plus de résultats.
              </Text>
            </Text>
          </View>
          <View
            numberOfSpaces={6}
            style={
              Array [
                Object {
                  "height": 24,
                },
              ]
            }
          />
          <View>
            <View
              accessibilityLabel="Modifier mes filtres"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#eb0055",
                  "borderRadius": 24,
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "maxWidth": 500,
                  "minHeight": 40,
                  "opacity": 1,
                  "paddingBottom": 2,
                  "paddingLeft": 20,
                  "paddingRight": 20,
                  "paddingTop": 2,
                  "userSelect": "auto",
                  "width": "100%",
                }
              }
              testID="Modifier mes filtres"
            >
              <Text
                adjustsFontSizeToFit={false}
                numberOfLines={1}
                style={
                  Array [
                    Object {
                      "color": "#ffffff",
                      "fontFamily": "Montserrat-Bold",
                      "fontSize": 15,
                      "lineHeight": 20,
                      "marginLeft": 0,
                      "maxWidth": "100%",
                    },
                  ]
                }
              >
                Modifier mes filtres
              </Text>
            </View>
          </View>
          <View
            style={
              Array [
                Object {
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                },
              ]
            }
          />
        </View>
        <View
          onLayout={[Function]}
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "height": 132,
                },
              ]
            }
          />
        </View>
      </View>
    </RCTScrollView>
  </View>,
  <Modal
    accessibilityRole="none"
    animationType="none"
    aria-labelledby="testUuidV4"
    aria-modal={true}
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityRole="none"
    animationType="none"
    aria-labelledby="testUuidV4"
    aria-modal={true}
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityRole="none"
    animationType="none"
    aria-labelledby="testUuidV4"
    aria-modal={true}
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityRole="none"
    animationType="none"
    aria-labelledby="testUuidV4"
    aria-modal={true}
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityRole="none"
    animationType="none"
    aria-labelledby="testUuidV4"
    aria-modal={true}
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
]
`;
