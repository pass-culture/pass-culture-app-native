// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchResults component should render correctly 1`] = `
Array [
  <View>
    <RCTScrollView
      horizontal={true}
      showsHorizontalScrollIndicator={false}
    >
      <View>
        <View
          numberOfSpaces={5}
          style={
            Array [
              Object {
                "width": 20,
              },
            ]
          }
        />
        <View
          accessibilityRole="list"
          style={
            Array [
              Object {
                "flexDirection": "row",
                "paddingLeft": 0,
              },
            ]
          }
        >
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginBottom": 4,
                  "marginLeft": 4,
                  "marginRight": 4,
                  "marginTop": 4,
                },
              ]
            }
          >
            <View
              accessibilityLabel="Partout : Filtre sélectionné"
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#eb0055",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="Partout : Filtre sélectionné"
            >
              <Text
                isSelected={true}
                style={
                  Array [
                    Object {
                      "color": "#eb0055",
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                    },
                  ]
                }
                testID="locationButtonLabel"
              >
                Partout
              </Text>
              <View
                numberOfSpaces={1}
                style={
                  Array [
                    Object {
                      "width": 4,
                    },
                  ]
                }
              />
              <View
                accessibilityLabel="Filtre sélectionné"
                height={16}
                testID="locationButtonIcon"
                width={16}
              >
                <Text>
                  locationButtonIcon-SVG-Mock
                </Text>
              </View>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginBottom": 4,
                  "marginLeft": 4,
                  "marginRight": 4,
                  "marginTop": 4,
                },
              ]
            }
          >
            <View
              accessibilityLabel="Catégories"
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="Catégories"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                    },
                  ]
                }
                testID="categoryButtonLabel"
              >
                Catégories
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginBottom": 4,
                  "marginLeft": 4,
                  "marginRight": 4,
                  "marginTop": 4,
                },
              ]
            }
          >
            <View
              accessibilityLabel="Prix"
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="Prix"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                    },
                  ]
                }
                testID="priceButtonLabel"
              >
                Prix
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginBottom": 4,
                  "marginLeft": 4,
                  "marginRight": 4,
                  "marginTop": 4,
                },
              ]
            }
          >
            <View
              accessibilityLabel="Duo"
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="Duo"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                    },
                  ]
                }
                testID="DuoButtonLabel"
              >
                Duo
              </Text>
            </View>
          </View>
          <View
            accessibilityRole="none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "marginBottom": 4,
                  "marginLeft": 4,
                  "marginRight": 4,
                  "marginTop": 4,
                },
              ]
            }
          >
            <View
              accessibilityLabel="Dates & heures"
              accessibilityRole="button"
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "borderColor": "#161617",
                  "borderRadius": 24,
                  "borderWidth": 1,
                  "boxSizing": "border-box",
                  "flexDirection": "row-reverse",
                  "height": 32,
                  "justifyContent": "center",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingLeft": 16,
                  "paddingRight": 16,
                  "paddingTop": 6,
                  "userSelect": "auto",
                }
              }
              testID="Dates & heures"
            >
              <Text
                isSelected={false}
                style={
                  Array [
                    Object {
                      "color": "#161617",
                      "fontFamily": "Montserrat-SemiBold",
                      "fontSize": 12,
                      "lineHeight": 16,
                    },
                  ]
                }
                testID="datesHoursButtonLabel"
              >
                Dates & heures
              </Text>
            </View>
          </View>
        </View>
        <View
          numberOfSpaces={5}
          style={
            Array [
              Object {
                "width": 20,
              },
            ]
          }
        />
      </View>
    </RCTScrollView>
    <View
      numberOfSpaces={3}
      style={
        Array [
          Object {
            "height": 12,
          },
        ]
      }
    />
  </View>,
  <View
    style={
      Array [
        Object {
          "flexBasis": 0,
          "flexGrow": 1,
          "flexShrink": 1,
        },
      ]
    }
    testID="searchResults"
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RCTScrollView
        ItemSeparatorComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "inlineStyle": InlineStyle {
              "rules": Array [
                [Function],
              ],
            },
            "render": [Function],
            "shouldForwardProp": undefined,
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
          }
        }
        ListEmptyComponent={<NoSearchResult />}
        ListHeaderComponent={
          <ListHeaderComponent
            nbHits={0}
          />
        }
        applyWindowCorrection={[Function]}
        canChangeSize={true}
        contentContainerStyle={
          Object {
            "backgroundColor": undefined,
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        contentHeight={0}
        contentWidth={0}
        data={Array []}
        dataProvider={
          DataProvider {
            "_data": Array [],
            "_firstIndexToProcess": 0,
            "_hasStableIds": true,
            "_requiresDataChangeHandling": false,
            "_size": 0,
            "getStableId": [Function],
            "rowHasChanged": [Function],
          }
        }
        disableRecycling={false}
        estimatedItemSize={130}
        extendedState={Object {}}
        externalScrollView={[Function]}
        finalRenderAheadOffset={250}
        forceNonDeterministicRendering={true}
        horizontal={false}
        initialOffset={0}
        initialRenderIndex={0}
        isHorizontal={false}
        keyExtractor={[Function]}
        keyboardDismissMode="on-drag"
        keyboardShouldPersistTaps="handled"
        layoutProvider={
          GridLayoutProviderWithProps {
            "_acceptableRelayoutDelta": 1,
            "_getHeightOrWidth": [Function],
            "_getLayoutTypeForIndex": [Function],
            "_getSpan": [Function],
            "_isHorizontal": false,
            "_lastLayoutManager": GridLayoutManager {
              "_acceptableRelayoutDelta": 1,
              "_getSpan": [Function],
              "_isGridHorizontal": false,
              "_isHorizontal": false,
              "_layoutProvider": [Circular],
              "_layouts": Array [],
              "_maxSpan": 1,
              "_renderWindowSize": Object {
                "height": 250,
                "width": 800,
              },
              "_totalHeight": 0,
              "_totalWidth": 800,
              "_window": Object {
                "height": 250,
                "width": 800,
              },
            },
            "_maxSpan": 1,
            "_renderWindowSize": Object {
              "height": 250,
              "width": 800,
            },
            "_setLayoutForType": [Function],
            "_tempDim": Object {
              "height": 0,
              "width": 0,
            },
            "averageWindow": AverageWindow {
              "currentAverage": 130,
              "currentCount": 1,
              "inputValues": Array [
                130,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ],
              "nextIndex": 1,
            },
            "defaultEstimatedItemSize": 100,
            "layoutObject": Object {
              "size": undefined,
              "span": undefined,
            },
            "props": Object {
              "ItemSeparatorComponent": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "inlineStyle": InlineStyle {
                  "rules": Array [
                    [Function],
                  ],
                },
                "render": [Function],
                "shouldForwardProp": undefined,
                "styledComponentId": "StyledNativeComponent",
                "target": [Function],
                "withComponent": [Function],
              },
              "ListEmptyComponent": <NoSearchResult />,
              "ListHeaderComponent": <ListHeaderComponent
                nbHits={0}
              />,
              "data": Array [],
              "estimatedItemSize": 130,
              "keyExtractor": [Function],
              "keyboardDismissMode": "on-drag",
              "keyboardShouldPersistTaps": "handled",
              "numColumns": 1,
              "onEndReached": [Function],
              "onRefresh": undefined,
              "onScroll": [Function],
              "refreshing": false,
              "renderItem": [Function],
              "scrollEnabled": false,
              "testID": "searchResultsFlatlist",
            },
            "shouldRefreshWithAnchoring": true,
          }
        }
        maxRenderAhead={750}
        numColumns={1}
        onEndReached={[Function]}
        onEndReachedThreshold={0}
        onEndReachedThresholdRelative={0}
        onItemLayout={[Function]}
        onLayout={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onSizeChanged={[Function]}
        onVisibleIndicesChanged={[Function]}
        refreshing={false}
        removeClippedSubviews={false}
        renderAheadOffset={0}
        renderAheadStep={250}
        renderContentContainer={[Function]}
        renderItem={[Function]}
        renderItemContainer={[Function]}
        rowRenderer={[Function]}
        scrollEnabled={false}
        scrollEventThrottle={16}
        scrollThrottle={16}
        scrollViewProps={
          Object {
            "contentContainerStyle": Object {
              "backgroundColor": undefined,
              "minHeight": 1,
              "minWidth": 1,
            },
            "onLayout": [Function],
            "onScrollBeginDrag": [Function],
            "refreshControl": undefined,
            "style": Object {
              "minHeight": 1,
              "minWidth": 1,
            },
          }
        }
        style={
          Object {
            "minHeight": 1,
            "minWidth": 1,
          }
        }
        suppressBoundedSizeException={true}
        testID="searchResultsFlatlist"
        windowCorrectionConfig={
          Object {
            "applyToInitialOffset": true,
            "applyToItemScroll": true,
            "value": Object {
              "endCorrection": 0,
              "startCorrection": 0,
              "windowShift": -1,
            },
          }
        }
      >
        <View>
          <View
            style={
              Object {
                "flexDirection": "column",
              }
            }
          >
            <View
              style={
                Object {
                  "paddingLeft": undefined,
                  "paddingTop": 0,
                }
              }
            />
            <View
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            />
            <AutoLayoutView
              enableInstrumentation={false}
              horizontal={false}
              onBlankAreaEvent={[Function]}
              onLayout={[Function]}
              renderAheadOffset={0}
              scrollOffset={0}
              style={
                Object {
                  "height": 0,
                  "width": 0,
                }
              }
              windowSize={0}
            />
            <View
              accessibilityRole="none"
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "flexShrink": 1,
                    "height": "100%",
                    "justifyContent": "center",
                    "marginHorizontal": 24,
                    "marginTop": 24,
                    "minHeight": 250,
                  },
                ]
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                    },
                  ]
                }
              />
              <View
                style={
                  Array [
                    Object {
                      "flexShrink": 0,
                    },
                  ]
                }
              >
                <View
                  height={109.2}
                  width={140}
                >
                  <Text>
                    undefined-SVG-Mock
                  </Text>
                </View>
              </View>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                    },
                  ]
                }
              >
                <Text
                  style={
                    Array [
                      Object {
                        "color": "#161617",
                        "fontFamily": "Montserrat-Medium",
                        "fontSize": 18,
                        "lineHeight": 22,
                        "marginTop": 16,
                      },
                    ]
                  }
                >
                  Pas de résultat
                </Text>
                <Text
                  style={
                    Array [
                      Object {
                        "color": "#161617",
                        "fontFamily": "Montserrat-Regular",
                        "fontSize": 15,
                        "lineHeight": 20,
                        "marginTop": 24,
                        "textAlign": "center",
                      },
                    ]
                  }
                >
                  <Text
                    accessibilityLiveRegion="assertive"
                    style={
                      Array [
                        Object {
                          "color": "#696A6F",
                          "fontFamily": "Montserrat-Regular",
                          "fontSize": 15,
                          "lineHeight": 20,
                        },
                      ]
                    }
                  >
                    Vérifie ta localisation ou modifie tes filtres pour trouver plus de résultats.
                  </Text>
                </Text>
              </View>
              <View
                numberOfSpaces={6}
                style={
                  Array [
                    Object {
                      "height": 24,
                    },
                  ]
                }
              />
              <View>
                <View
                  accessibilityLabel="Modifier mes filtres"
                  accessible={true}
                  collapsable={false}
                  focusable={true}
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#eb0055",
                      "borderRadius": 24,
                      "flexDirection": "row",
                      "justifyContent": "center",
                      "maxWidth": 500,
                      "minHeight": 40,
                      "opacity": 1,
                      "paddingBottom": 2,
                      "paddingLeft": 20,
                      "paddingRight": 20,
                      "paddingTop": 2,
                      "userSelect": "auto",
                      "width": "100%",
                    }
                  }
                  testID="Modifier mes filtres"
                >
                  <Text
                    adjustsFontSizeToFit={false}
                    numberOfLines={1}
                    style={
                      Array [
                        Object {
                          "color": "#ffffff",
                          "fontFamily": "Montserrat-Bold",
                          "fontSize": 15,
                          "lineHeight": 20,
                          "marginLeft": 0,
                          "maxWidth": "100%",
                        },
                      ]
                    }
                  >
                    Modifier mes filtres
                  </Text>
                </View>
              </View>
              <View
                style={
                  Array [
                    Object {
                      "flexBasis": 0,
                      "flexGrow": 1,
                      "flexShrink": 1,
                    },
                  ]
                }
              />
            </View>
            <CellContainer
              index={-1}
              style={
                Array [
                  undefined,
                  undefined,
                ]
              }
            />
            <View
              style={
                Object {
                  "paddingBottom": 0,
                  "paddingRight": undefined,
                }
              }
            />
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>,
  <Modal
    accessibilityLabelledBy="testUuidV4"
    accessibilityModal={true}
    accessibilityRole="none"
    animationType="none"
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityLabelledBy="testUuidV4"
    accessibilityModal={true}
    accessibilityRole="none"
    animationType="none"
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityLabelledBy="testUuidV4"
    accessibilityModal={true}
    accessibilityRole="none"
    animationType="none"
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityLabelledBy="testUuidV4"
    accessibilityModal={true}
    accessibilityRole="none"
    animationType="none"
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
  <Modal
    accessibilityLabelledBy="testUuidV4"
    accessibilityModal={true}
    accessibilityRole="none"
    animationType="none"
    deviceHeight={1334}
    deviceWidth={750}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={true}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="modal"
    transparent={true}
    visible={false}
  />,
]
`;
