// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ReCaptcha /> should render correctly 1`] = `
<Modal
  hardwareAccelerated={false}
  onRequestClose={[Function]}
  testID="recaptcha-webview-modal"
  transparent={true}
  visible={true}
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      allowsBackForwardNavigationGestures={false}
      bounces={false}
      cacheEnabled={false}
      cacheMode="LOAD_NO_CACHE"
      incognito={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={true}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadStart={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onNavigationStateChange={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "baseUrl": "https://webapp.example.com",
          "html": "
    <!DOCTYPE html>
    <html lang=\\"fr\\">
        <head>
            <meta charset=\\"UTF-8\\">
            <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
            <title>ReCAPTCHA web view</title>
            <script>
                let numberOfRetryRender = 0;

                function sendMessagePayload(payload) { window.ReactNativeWebView.postMessage(JSON.stringify(payload)); }
                function onClose() { sendMessagePayload({ \\"message\\": \\"close\\" }); }
                function onDebug(log) { sendMessagePayload({ \\"message\\": \\"debug\\", \\"log\\": log }); }
                function onExpire() { sendMessagePayload({ \\"message\\": \\"expire\\" }); }
                function onError(error) { sendMessagePayload({ \\"message\\": \\"error\\", \\"error\\": error }); }
                function onLoad() { sendMessagePayload({ \\"message\\": \\"load\\" }); }
                function onSuccess(token) {
                    window.grecaptcha.reset()
                    sendMessagePayload({ \\"message\\": \\"success\\", \\"token\\": token });
                }

                function onRecaptchaErrorCallback() {
                    onError(\\"reCAPTCHA error : error-callback of widget called\\")
                }

                function isReadyToExecute() { 
                    return Boolean(window.grecaptcha && window.grecaptcha.execute);
                }

                function executeWhenReady() {
                    numberOfRetryRender = numberOfRetryRender + 1;
                    if (isReadyToExecute()) {
                        clearInterval(readyInterval);
                        window.grecaptcha.execute();
                        return;
                    } 
                    if (numberOfRetryRender > 15) {
                        clearInterval(readyInterval);
                        onError(\\"reCAPTCHA error : Number of retry render exceeded\\");
                    }
                }

                window.onload = function(event) {
                    try {
                        if (isReadyToExecute()) {
                            window.grecaptcha.execute();
                        } else {
                            readyInterval = setInterval(executeWhenReady, 1000);
                        }
                    } catch(error) {
                        onError(\\"reCAPTCHA error : \\" + error.message);
                    }
                };
            </script>
            <script src=\\"https://www.google.com/recaptcha/api.js?hl=fr\\" async defer></script>
            <style>
                html, body, .container {
                    height: 100%;
                    width: 100%;
                    margin: 0;
                    padding: 0;
                    background-color: transparent;
                }
                .container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
            </style>
        </head>
        
        <body>
            <div class=\\"container\\">
                <div class=\\"g-recaptcha\\"
                     data-sitekey=\\"SITE_KEY\\"
                     data-callback=\\"onSuccess\\"
                     data-expired-callback=\\"onExpire\\"
                     data-error-callback=\\"onRecaptchaErrorCallback\\"
                     data-size=\\"invisible\\"
                     data-theme=\\"light\\">
                </div>
            </div>
        </body>
    </html>",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0)",
              "flexBasis": 0,
              "flexGrow": 1,
              "flexShrink": 1,
            },
          ],
        ]
      }
      testID="recaptcha-webview"
      useSharedProcessPool={true}
    />
  </View>
</Modal>
`;
