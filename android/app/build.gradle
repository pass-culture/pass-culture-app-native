// Template last updated for 0.68.5

apply plugin: "com.android.application"
apply plugin: "com.google.firebase.firebase-perf"
apply plugin: "com.facebook.react"

// @react-native-config
project.ext.envConfigFiles = [
        apptestingdebug: ".env.testing",
        apptestingrelease: ".env.testing",
        developmentdebug: ".env.development",
        stagingdebug: ".env.staging",
        stagingrelease: ".env.staging",
        productiondebug: ".env.production",
        productionrelease: ".env.production",
        "": ".env.testing",                         // Default (must be the last in the list so as not to override others)
]
apply from: project(':bam.tech_react-native-config').projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile
import org.apache.tools.ant.taskdefs.condition.Os

// Allows to read json (ie: package.json)
import groovy.json.JsonSlurper
def packageSlurper = new JsonSlurper()

def packageJson = packageSlurper.parse file('../../package.json')

apply from: "../../node_modules/react-native-code-push/android/codepush.gradle" // @codepush

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
    // codegenDir = file("../node_modules/react-native-codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}


/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
// def jscFlavor = 'org.webkit:android-jsc:+'
// @see https://github.com/marnusw/date-fns-tz#usage-with-android
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

/**
 * Signing
 *
 * The app is signed with keystore located in the keystores/ folder.
 * Keystore passwords are encrypted with transcrypt and located in
 * keystores/*.keystore.properties files.
 */
def keystorePropertiesFile = rootProject.file("keystores/${project.env.get("ENV")}.keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.passculture"
    defaultConfig {
        applicationId project.env.get("ANDROID_APP_ID")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        resValue "string", "url_prefix", project.env.get("URL_PREFIX")
        resValue "string", "app_name", project.env.get("APP_DISPLAY_NAME")
        resValue "string", "build_config_package", "com.passculture" // @react-native-config
        resValue "string", "BATCH_API_KEY", project.env.get("BATCH_API_KEY_ANDROID")
        resValue "string", "WEBAPP_V2_DOMAIN", project.env.get("WEBAPP_V2_DOMAIN")
        resValue "string", "CODE_PUSH_APK_BUILD_TIME", String.format("\"%d\"", System.currentTimeMillis())
        versionCode (packageJson.build as Integer)
        versionName packageJson.version
        buildConfigField "String", "CODEPUSH_KEY", "\"${project.env.get("CODEPUSH_KEY_ANDROID")}\"" // @codepush
        multiDexEnabled true
        resConfigs "fr" // https://developer.android.com/studio/build/shrink-code#unused-alt-resources
    }

    // When building Android App Bundles, the splits block is ignored.
    // We keep it for Appcenter as we build apk for it.
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false // if we enable splits per abi, we need to set this to true for Appcenter
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    // Instead, use the bundle block to control which types of configuration APKs
    // you want your app bundle to support. If all configurations are splitted,
    // it's the same as if we don't include this piece of code, but we leave it for clarity.
    bundle {
        language {
            // This property is set to true by default.
            enableSplit = true
        }
        density {
            // This property is set to true by default.
            enableSplit = true
        }
        abi {
            // This property is set to true by default.
            enableSplit = true
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file("keystores/${keystoreProperties['storeFile']}")
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
        }
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled enableProguardInReleaseBuilds

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config

            // https://developer.android.com/studio/build/shrink-code#android_gradle_plugin_version_41_or_later
            ndk {
                debugSymbolLevel "FULL"
            }
        }
    }

    flavorDimensions "environment"
    productFlavors {
        // ProductFlavors names can not start with 'test' https://android.googlesource.com/platform/tools/build/+/21b5320e57ba21f829ecbb4862cf0b9876e11778/gradle/src/main/groovy/com/android/build/gradle/AndroidPlugin.groovy#93
        apptesting {
            dimension "environment"
        }
        development {
            dimension "environment"
        }
        staging {
            dimension "environment"
        }
        production {
            dimension "environment"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    // Flipper + plugins
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    implementation 'androidx.appcompat:appcompat:1.1.0-rc01' // @react-navigation
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-alpha02' // @react-navigation
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
      implementation jscFlavor
    }
    implementation platform('com.google.firebase:firebase-bom:25.12.0') // firebase
    implementation "com.google.firebase:firebase-messaging" // firebase - batch
    implementation 'com.batch.android:firebase-dispatcher:2.0.0'
}


apply plugin: 'com.google.gms.google-services' // firebase (batch)

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
