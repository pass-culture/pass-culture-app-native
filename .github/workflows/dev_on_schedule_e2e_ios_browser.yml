name: Tests e2e iOS Browser

on:
  workflow_call:
  # schedule:
  #   - cron: '0 4 * * 1-5' # “At 4AM everyday from Monday through Friday.

  workflow_dispatch:
    inputs:
      environment:
        type: string
        description: Select the environment
        required: true
        default: staging
      specs:
        type: string
        description: |
          Define specs for test execution. You can either specify a glob
          pattern to match multiple files at once or wrap a glob or set of
          paths into an array using "," delimiter to run them within a single worker process.
          [Default: run all tests]
        required: false
      pcapi-docker-tag:
        type: string
        description: pcapi docker tag
        required: false

env:
  PROJECT_ID: passculture-infra-prod
  REGION: europe-west1
  REPOSITORY: pass-culture-artifact-registry
  PCAPI_DOCKER_IMAGE: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-artifact-registry/pcapi
  PCAPI_BASE_URL: http://127.0.0.1:6001

jobs:
  e2e-ios-browser:
    strategy:
      fail-fast: false
      matrix:
        include:
          - osVersion: '15.2'
            os: 'iOS'
            model: 'iPhone 13'
    env:
      CI: true
      APPIUM_TEST_SERVER_PORT: 4723
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      APPIUM_STARTUP_TIMEOUT_SEC: 30
      DEV_TEST_SERVER_HOST: localhost
      DEV_TEST_SERVER_PORT: 3000
      DEV_TEST_SERVER_STARTUP_TIMEOUT_SEC: 60
      _FORCE_LOGS: 1
      # if inputs.* are not defined, it is because it is scheduled, and fallback here are for scheduled task
      ENVIRONMENT: ${{ inputs.environment || 'staging' }}
      SPECS: ${{ inputs.specs }}
      PC_API_DOCKER_TAG: ${{ inputs.pcapi-docker-tag }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      SLACK_WEB_HOOK_URL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL }}
      SLACK_WEB_HOOK_URL_MANUAL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL_MANUAL }}
      # useful for Slack reports
      GITHUB_SERVER_URL: ${{ github.server_url }}
      GITHUB_RUN_ID: ${{ github.run_id }}
    runs-on: macos-11
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set PCAPI_DOCKER_TAGS environments variables
        run: echo PCAPI_DOCKER_TAG=${PC_API_DOCKER_TAG:-$(curl -sS https://backend.${{ env.ENVIRONMENT }}.passculture.team/health/api)} >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Decode Gmail token
        env:
          END_TO_END_TESTS_EMAIL_ADDRESS_TOKEN: ${{ secrets.END_TO_END_TESTS_EMAIL_ADDRESS_TOKEN }}
        run: echo $END_TO_END_TESTS_EMAIL_ADDRESS_TOKEN | base64 -d > token.json

      - name: 'Install and start Docker engine'
        run: |
          brew install colima
          brew install docker docker-compose
          mkdir -p ~/.docker/cli-plugins
          ln -sfn $(brew --prefix)/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose
          colima start

      - id: openid-auth
        name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: false
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

      - id: docker-login
        uses: 'docker/login-action@v1'
        name: 'Docker login'
        with:
          registry: '${{ env.REGION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.openid-auth.outputs.access_token }}'

      - name: 'Start pcapi backend'
        env:
          SENDINBLUE_API_KEY: ${{ secrets.EHP_SENDINBLUE_API_KEY }}
          END_TO_END_TESTS_EMAIL_ADDRESS: ${{ secrets.END_TO_END_TESTS_EMAIL_ADDRESS }}
        run: |
          ./e2e/generate-env.sh
          docker-compose -f e2e/docker-compose-e2e.yml up -d

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - uses: futureware-tech/simulator-action@v2
        with:
          model: ${{ matrix.model }}
          os: ${{ matrix.os }}
          os_version: ${{ matrix.os_version }}

      - name: Install dependencies
        run: yarn install

      - name: Install extraneous dev dependencies
        run: |
          npm config set legacy-peer-deps true
          npm install -g appium@next
          appium driver install xcuitest
          appium driver install safari

      - name: Start Local dev server
        env:
          NODE_OPTIONS: '--openssl-legacy-provider --max-old-space-size=4096'
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          nohup yarn start:web:${{ env.ENVIRONMENT }} \
            2>&1 > "$cwd/webpack-dev-server.log" &
          popd

      - name: Wait for local dev server
        timeout-minutes: 15
        run: |
          until curl --output /dev/null --silent --head --fail http://${{ env.DEV_TEST_SERVER_HOST }}:${{ env.DEV_TEST_SERVER_PORT }}; do
            printf '.'
            sleep 5
          done

      - name: Start Appium server
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          nohup appium server \
            --port=$APPIUM_TEST_SERVER_PORT \
            --address=$APPIUM_TEST_SERVER_HOST \
            --relaxed-security \
            --allow-cors \
            2>&1 > "$cwd/appium.log" &
          popd

      - name: Wait for Appium server startup
        run: |
          seconds_started=$(date +%s)
          while ! nc -z $APPIUM_TEST_SERVER_HOST $APPIUM_TEST_SERVER_PORT; do
            sleep 0.1
            seconds_elapsed=$(( $(date +%s) - seconds_started ))
            if [[ $seconds_elapsed -gt $APPIUM_STARTUP_TIMEOUT_SEC ]]; then
              echo "Appium server was unable to start within $APPIUM_STARTUP_TIMEOUT_SEC seconds timeout"
              exit 1
            fi
          done

      - name: Run end-to-end tests osVersion-${{ matrix.osVersion }}
        env:
          WDIO_BASE_URL: 'http://${{ env.DEV_TEST_SERVER_HOST }}:${{ env.DEV_TEST_SERVER_PORT }}'
          END_TO_END_TESTS_EMAIL_ADDRESS: ${{ secrets.END_TO_END_TESTS_EMAIL_ADDRESS }}
          API_BASE_URL: ${{ env.PCAPI_BASE_URL }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          IOS_DEVICE_NAME: '${{ matrix.model }}'
          IOS_PLATFORM_VERSION: '${{ matrix.osVersion }}'
        run: yarn e2e:ios.browser

      - name: Show appium server output
        if: ${{ always() }}
        run: cat appium.log

      - name: Show pcapi server output
        if: ${{ always() }}
        run: docker logs pc-api-e2e

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: fail-screenshots-videos-${{ matrix.apiLevel }}
          path: e2e/output
          if-no-files-found: ignore

      - name: Post report to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ always() }}
        with:
          channel-id: ${{ fromJSON('["C04D6R9MQKS", "C04EU7U4JTE"]')[inputs.environment != ''] }}
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "${{ fromJSON('["#36a64f", "#A30002"]')[job.status != 'success'] }}",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "e2e ios.browser",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "Les tests `e2e:ios.browser` ${{ env.ENVIRONMENT }} ont ${{ fromJSON('["réussi", "échoué"]')[job.status != 'success'] }} sur la branche <https://github.com/${{github.repository}}/tree/${{github.ref_name}}|${{github.ref_name}}>"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
