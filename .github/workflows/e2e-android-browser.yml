name: Tests e2e Android Browser

on:
  schedule:
    - cron: '5 4 * * *'

  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
        required: true
        default: staging
      build-local:
        type: boolean
        description: if true it will run the webapp locally
        default: false
      specs:
        type: string
        description: |
          Define specs for test execution. You can either specify a glob
          pattern to match multiple files at once or wrap a glob or set of
          paths into an array using "," delimiter to run them within a single worker process.
          [Default: run all tests]
        required: false

jobs:
  e2e-android-browser:
    strategy:
      fail-fast: false
      matrix:
        include:
          - chromedriverVersion: "74.0.3729.6"
            platformVersion: 10 # must match the apiLevel
            apiLevel: 29
            emuTag: google_apis
            arch: x86
            profile: pixel_xl
    env:
      CI: true
      ANDROID_DEVICE_NAME: pixel_xl
      APPIUM_TEST_SERVER_PORT: 4723
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      DEV_TEST_SERVER_PORT: 3000
      DEV_TEST_SERVER_STARTUP_TIMEOUT_SEC: 60
      _FORCE_LOGS: 1
      # if inputs.* are not defined, it is because it is scheduled, and fallback here are for scheduled task
      BUILD_LOCAL: ${{ inputs.build-local || 'true' }}
      ENVIRONMENT: ${{ inputs.environment || 'staging' }}
      SPECS: ${{ inputs.specs }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      SLACK_WEB_HOOK_URL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL }}
      SLACK_WEB_HOOK_URL_MANUAL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL_MANUAL }}
      # useful for Slack reports
      GITHUB_SERVER_URL: ${{ github.server_url }}
      GITHUB_RUN_ID: ${{ github.run_id }}
    # No hardware acceleration is available for emulators on Ubuntu:
    # https://github.com/marketplace/actions/android-emulator-runner#can-i-use-this-action-on-linux-vms
    runs-on: macos-latest
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Set LOCAL_IP environment variable
        run: echo LOCAL_IP=$(ifconfig | grep 'inet' | grep 'broadcast' | awk -F ' ' '{print $2}') >> $GITHUB_ENV

      - name: Show LOCAL_IP
        run: |
          ifconfig
          echo ${{ env.LOCAL_IP }}

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install dependencies
        run: yarn install

      - name: Install extraneous dev dependencies
        run: |
          npm config set legacy-peer-deps true
          npm install -g appium@next
          npm install --chromedriver_version="${{ matrix.chromedriverVersion }}"
          npm install --no-save mjpeg-consumer
          appium driver install uiautomator2

      - name: Sets WDIO_BASE_URL for local or distributed Web app
        run: |
          if [[ "${{ env.BUILD_LOCAL }}" = "true" ]]; then
            echo "WDIO_BASE_URL=http://${{ env.LOCAL_IP }}:${{ env.DEV_TEST_SERVER_PORT }}" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" = "testing" ]]; then
            echo "WDIO_BASE_URL=https://app.testing.passculture.team" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" = "staging" ]]; then
            echo "WDIO_BASE_URL=https://app.staging.passculture.team" >> $GITHUB_ENV
          fi

      ## Local

      - name: Start Local dev server
        if: ${{ env.BUILD_LOCAL == 'true' }}
        env:
          NODE_OPTIONS: '--openssl-legacy-provider --max-old-space-size=4096'
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          nohup yarn start:web:${{ env.ENVIRONMENT }} \
            2>&1 > "$cwd/webpack-dev-server.log" &
          popd

      - name: Wait for local dev server
        if: ${{ env.BUILD_LOCAL == 'true' }}
        timeout-minutes: 15
        run: |
          until curl --output /dev/null --silent --head --fail http://${{ env.LOCAL_IP }}:3000; do
            printf '.'
            sleep 5
          done

      ## Common
      - name: Start Appium server
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          nohup appium server \
            --port=$APPIUM_TEST_SERVER_PORT \
            --address=$APPIUM_TEST_SERVER_HOST \
            --relaxed-security \
            2>&1 > "$cwd/appium.log" &
          popd

      - run: nohup adb logcat > logcat.log &
        name: Capture logcat

      - name: Slack failure notification
        if: ${{ failure() }}
        env:
          BRANCH_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/tree/${{ env.GITHUB_REF_NAME }}
          COMMIT_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/tree/${{ env.GITHUB_SHA_SHORT }}
          ACTION_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/actions/runs/${{ env.GITHUB_RUN_ID }}
          SLACK_WEBHOOK: ${{ env.GITHUB_EVENT_NAME == 'schedule' && env.SLACK_WEB_HOOK_URL || env.SLACK_WEB_HOOK_URL_MANUAL }}
          EVENT_NAME: ${{ env.GITHUB_EVENT_NAME == 'schedule' && 'Scheduled' || 'Manually' }}
        run: |
          slackMessageTitle="<${BRANCH_URL}|${{ env.GITHUB_REF_NAME }}>/<${COMMIT_URL}|${{ env.GITHUB_SHA_SHORT }}> ${{ env.ENVIRONMENT }} - wdio ${{ env.GITHUB_REPOSITORY_NAME_PART }} \`e2e:browser.chrome\` <${ACTION_URL}|action> (${EVENT_NAME})"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x: *CI NOK: ${slackMessageTitle}* :x:\"}"  "$SLACK_WEBHOOK"

      - uses: reactivecircus/android-emulator-runner@v2
        name: e2e_api${{ matrix.apiLevel }}
        with:
          script: ENVIRONMENT="${{ env.ENVIRONMENT }}" ANDROID_DEVICE_NAME="${{ env.ANDROID_DEVICE_NAME }}" ANDROID_PLATFORM_VERSION="${{ matrix.platformVersion }}" yarn e2e:android.browser
          avd-name: ${{ env.ANDROID_DEVICE_NAME }}
          sdcard-path-or-size: 1500M
          api-level: ${{ matrix.apiLevel }}
          disable-spellchecker: true
          target: ${{ matrix.emuTag }}
          arch: ${{ matrix.arch }}
          profile: ${{ matrix.profile }}

      - name: Save logcat output
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: logcat-api-${{ matrix.apiLevel }}
          path: logcat.log

      - name: Save server output
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: appium-api-${{ matrix.apiLevel }}
          path: appium.log

      - name: Show appium server output
        if: ${{ always() }}
        run: cat appium.log

      - name: Save dev server output
        if: ${{ (always()) && (env.BUILD_LOCAL == 'local') }}
        uses: actions/upload-artifact@master
        with:
          name: webpack-dev-server-${{ matrix.apiLevel }}
          path: webpack-dev-server.log

      - name: Show dev server output
        if: ${{ (always()) && (env.BUILD_LOCAL == 'local') }}
        run: cat webpack-dev-server.log

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: fail-screenshots-videos-${{ matrix.apiLevel }}
          path: e2e/output
          if-no-files-found: ignore
