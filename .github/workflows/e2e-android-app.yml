name: Tests e2e Android App

on:
  workflow_dispatch:
    inputs:
      wdio-demo:
        type: boolean
        description: WebdriverIO demo - All other params will be ignored
        required: true
        default: false
      environment:
        type: environment
        description: Select the environment
        required: true
        default: staging
      build-type:
        type: choice
        description: |
          Distribution use Appcenter packages (faster) -
          Local will build app from current ref
        required: true
        default: local
        options:
          - local
          - distribution
      dist-version:
        type: string
        description: |
          Appcenter version - native distribution build optional [default: latest]
        required: false
      specs:
        type: string
        description: |
          Define specs for test execution. You can either specify a glob
          pattern to match multiple files at once or wrap a glob or set of
          paths into an array using "," delimiter to run them within a single worker process.
          [Default: run all tests]
        required: false

jobs:
  e2e-android-app:
    strategy:
      fail-fast: false
      matrix:
        include:
          - chromedriverVersion: "74.0.3729.6"
            apiLevel: 29
            emuTag: google_apis
            arch: x86
            profile: pixel_xl

    env:
      CI: true
      ANDROID_DEVICE_NAME: pixel_xl
      APPIUM_TEST_SERVER_PORT: 4723
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      _FORCE_LOGS: 1
      WDIO_DEMO: ${{ inputs.wdio-demo }}
      BUILD_TYPE: ${{ inputs.build-type }}
      ENVIRONMENT: ${{ inputs.environment }}
      DIST_VERSION: ${{ inputs.dist-version }}
      APPCENTER_RO_API_TOKEN: ${{ secrets.APPCENTER_RO_API_TOKEN }}
      SPECS: ${{ inputs.specs }}
    # No hardware acceleration is available for emulators on Ubuntu:
    # https://github.com/marketplace/actions/android-emulator-runner#can-i-use-this-action-on-linux-vms
    runs-on: macos-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      # Common init
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: yarn install

      - name: Download WebdriverIO demo
        if: ${{ env.WDIO_DEMO == 'true' }}
        run: ./scripts/install-e2e-wdio-demo.sh e2e/tests/wdio-demo

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      ## Distribution build

      - name: Download distribution package from appcenter
        if: ${{ (env.WDIO_DEMO == 'false') && (env.BUILD_TYPE == 'distribution') }}
        run: |
          echo "It will download Appcenter $BUILD_TYPE build $DIST_VERSION"
          APPCENTER_USER_API_TOKEN=${{ env.APPCENTER_RO_API_TOKEN }} \
          REMOVE_APK_AFTER_INSTALL=false \
          LAUNCH=false \
          INSTALL=false \
          UNINSTALL=false \
          yarn appcenter:install ${{ env.ENVIRONMENT }} android ${{ env.DIST_VERSION }}


      ## Local build

      - name: Setup sentry credentials
        if: ${{ (env.WDIO_DEMO == 'false') && (env.BUILD_TYPE == 'local') }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          cat <<EOT >> ~/.sentryclirc
          [defaults]
          url=https://sentry.passculture.team/
          org=sentry
          project=application-native
          [auth]
          token=${SENTRY_AUTH_TOKEN}
          EOT

      - name: Setup android keystore for ${{ inputs.environment }} environment
        if: ${{ (env.WDIO_DEMO == 'false') && (env.BUILD_TYPE == 'local') }}
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
          ANDROID_KEYSTORE_STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_STORE_PASSWORD }}
          ANDROID_KEYSTORE_KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_KEY_PASSWORD }}
        run: |
          mkdir -p android/keystores
          echo "${ANDROID_KEYSTORE}" | sed 's/[^A-Za-z0-9+/=]//g' | base64 -d > android/keystores/${{ env.ENVIRONMENT }}.keystore
          cat <<EOT >> android/keystores/${{ env.ENVIRONMENT }}.keystore.properties
          keyAlias=passculture
          storeFile=${{ env.ENVIRONMENT }}.keystore
          storePassword=${ANDROID_KEYSTORE_STORE_PASSWORD}
          keyPassword=${ANDROID_KEYSTORE_KEY_PASSWORD}
          EOT

      - name: Setup android Google services config
        if: ${{ (env.WDIO_DEMO == 'false') && (env.BUILD_TYPE == 'local') }}
        env:
          ANDROID_GOOGLE_SERVICES_JSON: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
        run: echo ${ANDROID_GOOGLE_SERVICES_JSON} > android/app/google-services.json

      - name: Build Android app for ${{ inputs.ENVIRONMENT }} environment
        if: ${{ (env.WDIO_DEMO == 'false') && (env.BUILD_TYPE == 'local') }}
        run: |
          if [[ "${{ env.ENVIRONMENT }}" = "testing" ]]; then
            ANDROID_GRADLE_TASK=assembleApptestingRelease
          else
            ANDROID_GRADLE_TASK=assembleStagingRelease
          fi
          echo "It will run ${ANDROID_GRADLE_TASK} gradle task"
          ./android/gradlew ${ANDROID_GRADLE_TASK} -p android

      - name: Sets apk location for local or distributed build
        if: ${{ env.WDIO_DEMO == 'false' }}
        run: |
          if [[ "${{ env.BUILD_TYPE }}" = "distribution" ]]; then
            echo "ANDROID_APK_PATH=app-${{ env.ENVIRONMENT }}-android.apk" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" = "testing" ]]; then
            echo "ANDROID_APK_PATH=./android/app/build/outputs/apk/apptesting/release/app-apptesting-release.apk" >> $GITHUB_ENV
          elif [[ "${{ env.ENVIRONMENT }}" = "staging" ]]; then
            echo "ANDROID_APK_PATH=./android/app/build/outputs/apk/staging/release/app-staging-release.apk" >> $GITHUB_ENV
          fi

      ## Common

      - name: Install extraneous dev dependencies
        run: |
          npm config set legacy-peer-deps true
          npm install -g appium@next
          npm install --chromedriver_version="${{ matrix.chromedriverVersion }}"
          npm install --no-save mjpeg-consumer
          appium driver install uiautomator2

      - name: Start Appium server
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          nohup appium server \
            --port=$APPIUM_TEST_SERVER_PORT \
            --address=$APPIUM_TEST_SERVER_HOST \
            --relaxed-security \
            2>&1 > "$cwd/appium.log" &
          popd

      - run: nohup adb logcat > logcat.log &
        name: Capture logcat

      - uses: reactivecircus/android-emulator-runner@v2
        name: e2e_api${{ matrix.apiLevel }}
        with:
          script: ANDROID_DEVICE_NAME="${{ env.ANDROID_DEVICE_NAME }}" ANDROID_PLATFORM_VERSION="${{ matrix.apiLevel }}" APPIUM_APP=${{ env.ANDROID_APK_PATH }} yarn e2e:android.app
          avd-name: ${{ env.ANDROID_DEVICE_NAME }}
          sdcard-path-or-size: 1500M
          api-level: ${{ matrix.apiLevel }}
          disable-spellchecker: true
          target: ${{ matrix.emuTag }}
          arch: ${{ matrix.arch }}
          profile: ${{ matrix.profile }}

      - name: Save logcat output
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: logcat-api${{ matrix.apiLevel }}
          path: logcat.log

      - name: Save server output
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: appium-api${{ matrix.apiLevel }}
          path: appium.log

      - name: Show appium server output
        if: ${{ always() }}
        run: cat appium.log

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: fail-screenshots-videos-${{ matrix.apiLevel }}
          path: e2e/output
          if-no-files-found: ignore
