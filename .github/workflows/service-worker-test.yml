name: Service Worker Test

on:
  workflow_dispatch:
    inputs:
      versionFrom:
        description: "Nom de l'ancienne release (ex: 1.199.0)"
        required: true
        type: string
      versionTo:
        description: "Nom de la nouvelle release (ex: 1.200.0)"
        required: true
        type: string
  repository_dispatch:
    types: service-worker-test

jobs:
  testServiceWorker:
    name: Test service worker
    runs-on: ubuntu-latest
    env:
      PORT: 5000
    container:
      image: ghcr.io/pass-culture/puppeteer:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      options: --user root
    steps:
      # Docker entrypoint is otherwise ignored in GitHub Action
      - name: Docker entrypoint
        shell: bash
        run: /entrypoint.sh

      # Useful to get the latest service worker test script
      - name: Checkout registry
        uses: actions/checkout@v4

      # To initialize the latest node version
      - name: Setup Node.JS
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      # Necessary for the latest service worker test script
      - name: Install dependencies
        shell: bash
        run: |
          yarn install --immutable
          yarn add puppeteer

      # Clone the version from in its own directory
      - name: Checkout ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }}
          path: versionFrom

      # Build version from in versionFrom/build
      - name: Building Webapp ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }}
        shell: bash
        run: |
          yarn install --cwd versionFrom --immutable
          NODE_OPTIONS='--openssl-legacy-provider --max-old-space-size=4096' yarn --cwd versionFrom build:testing

      # Clone the version to in its own directory
      - name: Checkout ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }}
          path: versionTo

      # Build version to in versionTo/build
      ## Important: This build will be used during the last step by the JS script
      ##            There is an alternative way to improve this, described here: https://github.com/pass-culture/pass-culture-app-native/pull/3452
      - name: Building Webapp ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }}
        shell: bash
        run: |
          yarn install --cwd versionTo --immutable
          NODE_OPTIONS='--openssl-legacy-provider --max-old-space-size=4096' yarn --cwd versionTo build:testing

      # Create build directory for serve
      - name: Create a build directory to be served
        run: mkdir build

      # Run HTTP server
      - name: Serve Files
        uses: Eun/http-server-action@v1
        with:
          directory: build
          port: ${{ env.PORT }}
          no-cache: false
          content-types: |
            {
              "appcache": "text/cache-manifest",
              "css": "text/css",
              "gif": "image/gif",
              "html": "text/html",
              "ico": "image/x-icon",
              "jpeg": "image/jpeg",
              "jpg": "image/jpeg",
              "js": "text/javascript",
              "json": "application/json",
              "png": "image/png",
              "txt": "text/plain",
              "xml": "text/xml"
            }

      # Copy versionFrom to build directory
      - name: Copy versionFrom to server directory
        run: yes | cp -rf versionFrom/build/* build/

      # Run puppeteer
      - run: yarn test:sw ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }} ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }}

      # Send failure otherwise success message to slack
      - name: Send failure message to slack
        shell: bash
        if: failure()
        env:
          SLACK_WEBHOOK_SERVICE_WORKER_TEST: ${{ secrets.SLACK_WEBHOOK_SERVICE_WORKER_TEST }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"[App Web] Test service-worker failed to upgrade from ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }} to ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }} :collision:"}'  "$SLACK_WEBHOOK_SERVICE_WORKER_TEST"
      - name: Send success message to slack
        shell: bash
        if: success()
        env:
          SLACK_WEBHOOK_SERVICE_WORKER_TEST: ${{ secrets.SLACK_WEBHOOK_SERVICE_WORKER_TEST }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"[App Web] Test service-worker succeeded to upgrade from ${{ github.event.inputs.versionFrom }}${{ github.event.client_payload.versionFrom }} to ${{ github.event.inputs.versionTo }}${{ github.event.client_payload.versionTo }} :rocket:️️"}'  "$SLACK_WEBHOOK_SERVICE_WORKER_TEST"
