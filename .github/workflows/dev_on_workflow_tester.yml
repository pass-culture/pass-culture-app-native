name: "4 [on_workflow] Tester yaml"

on:
  workflow_call:
    inputs:
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
jobs:
  yarn_test_web:
    name: 'Run Web unit tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3]
    steps:
      - uses: actions/checkout@v4
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Cache the node_modules
        id: yarn-modules-cache
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
      - uses: pass-culture-github-actions/cache@v1.0.0
        with:
          path: .jest/cache
          key: v1-yarn-test-web-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-test-web-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
      - run: yarn test:unit:web:ci  --shard=${{ matrix.shard }}/${{ strategy.job-total }}

  yarn_test_native:
    name: 'Run native unit tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7]
    steps:
      - uses: actions/checkout@v4
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Cache the node_modules
        id: yarn-modules-cache
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: .jest/cache
          key: v1-yarn-test-native-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-test-native-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: yarn test:unit:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      - run: mv coverage/coverage-final.json coverage/${{matrix.shard}}.json
      - name: Cache the coverage report
        id: coverage-modules-cache
        uses: pass-culture-github-actions/gcs-cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            coverage/${{ matrix.shard }}.json
          restore-keys:
          key: v1-coverage-dependency-cache-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}
  report-coverage:
    runs-on: ubuntu-latest
    needs: yarn_test_native
    steps:
      - uses: actions/checkout@v4
      - name: "OpenID Connect Authentication"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get Secret
        id: 'sonar_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SONAR_TOKEN:passculture-metier-ehp/passculture-app-native-sonar-token
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Set up Cloud SDK to get gsutils
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 416.0.0'
      - name: 'Get from bucket the differents coverages'
        run: |
          mkdir coverage
          gsutil cp 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-coverage-dependency-cache-${{ runner.os }}-${{ github.sha }}-*' coverage
          for file in `ls coverage/*tar`; do tar  --use-compress-program='zstd --long=30' -xf $file; done 
          rm -f coverage/*.tar
      - name: 'Merge each coverage into one'
        run: |
          npx nyc merge coverage coverage/coverage-final.json
          npx nyc report -t coverage --report-dir coverage --reporter=clover --reporter=lcov
          rm coverage/[0-9].json
      - name: SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.sonar_secrets.outputs.SONAR_TOKEN }}
        with:
          projectBaseDir: .
  yarn_test_proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Cache the proxy node_modules
        id: yarn-modules-cache-proxy
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-proxy-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-proxy-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install --immutable --cwd server
      - run: yarn --cwd server test:unit:ci
      - name: Get secrets for SonarCloud
        id: 'sonar_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SONAR_TOKEN:passculture-metier-ehp/passculture-app-native-sonar-token
      - name: SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.sonar_secrets.outputs.SONAR_TOKEN }}
        with:
          projectBaseDir: server
  slack_notify:
    runs-on: ubuntu-latest
    if: ${{ always() && github.ref == 'refs/heads/master' }}
    needs:
      - yarn_test_native
      - yarn_test_proxy
      - yarn_test_web
    steps:
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get secrets for Slack
        id: 'slack_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - uses: technote-space/workflow-conclusion-action@v3
        if: ${{ always() }}
      - name: Post to a Slack channel
        id: slack
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # channel #alertes-deploiement-native
          channel-id: 'C0309RP8K42'
          payload: |
            {
              "attachments": [
                  {
                      "mrkdwn_in": ["text"],
                      "color": "${{ fromJSON('["#36a64f", "#A30002"]')[ env.WORKFLOW_CONCLUSION == 'failure'] }}",
                      "author_name": "${{github.actor}}",
                      "author_link": "https://github.com/${{github.actor}}",
                      "author_icon": "https://github.com/${{github.actor}}.png",
                      "title": "PCAPPNATIVE Deployment",
                      "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                      "text": "Les tests sur master ont échoué :boom:"
                  }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.slack_secrets.outputs.SLACK_BOT_TOKEN }}
