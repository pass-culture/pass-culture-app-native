name: '4 [on_workflow] Tester yaml'

on:
  workflow_call:
    inputs:
      CACHE_BUCKET_NAME:
        type: string
        required: true
    secrets:
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true

concurrency:
  group: tester-${{ github.ref }}
  cancel-in-progress: true

env:
  RUN_ALLURE: ${{ github.ref == 'refs/heads/master' && 'true' || 'false' }}
  JEST_JUNIT_OUTPUT_DIR: ./reports/junit/

jobs:
  yarn_test_web:
    name: 'Run Web unit tests'
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/checkout@v4
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Cache the node_modules
        id: yarn-modules-cache
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
      - uses: pass-culture-github-actions/cache@v1.0.0
        with:
          path: .jest/cache
          key: v1-yarn-test-web-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-test-web-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
      - run: yarn test:unit:web:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}

      - name: Rename allure reports folder
        if: ${{ always() && github.ref == 'refs/heads/master' }}
        run: mv allure-results allure-results-web-${{matrix.shard}}

      - name: Cache the allure reports
        if: ${{ always() && github.ref == 'refs/heads/master' }}
        id: allure-report-cache-web
        uses: pass-culture-github-actions/gcs-cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            allure-results-web-${{matrix.shard}}
          restore-keys: |
            v1-allure-dependency-cache-web-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}
          key: v1-allure-dependency-cache-web-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}

  yarn_test_native:
    name: 'Run native unit tests'
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4, 5, 6, 7]
    steps:
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/checkout@v4
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Cache the node_modules
        id: yarn-modules-cache
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: .jest/cache
          key: v1-yarn-test-native-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-test-native-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - run: yarn test:unit:ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}
      - run: mv coverage/coverage-final.json coverage/${{matrix.shard}}.json

      - name: Rename allure reports folder
        if: ${{ always() && github.ref == 'refs/heads/master' }}
        run: mv allure-results allure-results-${{matrix.shard}}

      - name: Cache the coverage report
        id: coverage-modules-cache
        uses: pass-culture-github-actions/gcs-cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            coverage/${{ matrix.shard }}.json
          restore-keys: |
            v1-coverage-dependency-cache-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}
          key: v1-coverage-dependency-cache-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}

      - name: Cache the allure reports
        if: ${{ always() && github.ref == 'refs/heads/master' }}
        id: allure-report-cache-native
        uses: pass-culture-github-actions/gcs-cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            allure-results-${{matrix.shard}}
          restore-keys: |
            v1-allure-dependency-cache-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}
          key: v1-allure-dependency-cache-${{ runner.os }}-${{ github.sha }}-${{ matrix.shard }}

  allure-report:
    name: Update Allure report
    if: ${{ always() && github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    permissions:
      id-token: write
      contents: read
      pages: write
    needs: [yarn_test_native, yarn_test_web]

    steps:
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Cache the node_modules
        id: yarn-modules-cache
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: 'Authentification to Google'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK to get gsutils
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 416.0.0'

      - name: 'Retrieve reports from bucket'
        run: |
          mkdir allure-results
          gsutil cp 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-allure-dependency-cache-${{ runner.os }}-${{ github.sha }}-*' allure-results
          gsutil cp 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-allure-dependency-cache-web-${{ runner.os }}-${{ github.sha }}-*' allure-results
          for file in `ls allure-results/*tar`; do tar --use-compress-program='zstd --long=30' -xf $file; done
          rm -f allure-results/*.tar
          find . -maxdepth 1 -type d -name "allure-results-*" | while read dir; do
          cp -r "$dir"/* allure-results
          done
          rm -rf allure-results-*

      - name: 'Retrieve previous Allure history from bucket'
        run: |
          mkdir -p allure-results/history
          # Check if history exists and copy it directly
          if gsutil ls 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-allure-history/' >/dev/null 2>&1; then
            gsutil cp -r 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-allure-history/*' allure-results/history/ || true
          fi

      - name: Generate Allure Report
        run: yarn generate:allure-report

      - name: 'Save Allure history to bucket'
        run: |
          # Check if history was generated and save it
          if [ -d "allure-report/history" ] && [ "$(ls -A allure-report/history)" ]; then
            gsutil cp -r allure-report/history/* 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-allure-history/' || true
          else
            echo "Warning: No history generated in allure-report/history"
          fi

      - name: 'Author'
        run: |
          git config --global user.email PassCulture-SA@users.noreply.github.com
          git config --global user.name ${{ github.actor }}

      - name: Deploy to GitHub Pages on gh
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: allure-report
          user_name: ${{ github.actor }}
          user_email: 'PassCulture-SA@users.noreply.github.com'

  report-coverage:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    needs: yarn_test_native
    steps:
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/checkout@v4
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get Secret
        id: 'sonar_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SONAR_TOKEN:passculture-metier-ehp/passculture-app-native-sonar-token
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Set up Cloud SDK to get gsutils
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 416.0.0'
      - name: 'Get from bucket the differents coverages'
        run: |
          mkdir coverage
          gsutil cp 'gs://${{ inputs.CACHE_BUCKET_NAME }}/pass-culture/pass-culture-app-native/v1-coverage-dependency-cache-${{ runner.os }}-${{ github.sha }}-*' coverage
          for file in `ls coverage/*tar`; do tar  --use-compress-program='zstd --long=30' -xf $file; done 
          rm -f coverage/*.tar
      - name: 'Merge each coverage into one'
        run: |
          npx nyc merge coverage coverage/coverage-final.json
          npx nyc report -t coverage --report-dir coverage --reporter=clover --reporter=lcov
          rm coverage/[0-9].json
      - name: SonarCloud scan - App & Webapp
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.sonar_secrets.outputs.SONAR_TOKEN }}
        with:
          projectBaseDir: .

  yarn_test_proxy:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    steps:
      - name: Enable Corepack
        run: corepack enable
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Cache the proxy node_modules
        id: yarn-modules-cache-proxy
        uses: pass-culture-github-actions/cache@v1.0.0
        with:
          bucket: ${{ inputs.CACHE_BUCKET_NAME }}
          path: |
            node_modules
            ~/.cache/yarn
          key: v1-yarn-proxy-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-proxy-dependency-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install packages for proxy
        run: cd server && yarn install && cd ..
      - name: Run proxy unit tests
        # the test https://github.com/pass-culture/pass-culture-app-native/blob/64e47e0bd8887e80fa20b6d7df00e110d77fd22e/server/src/middlewares/tests/webAppProxyMiddleware.test.ts#L275 fails sometimes, we suppose the backend doesn't respond sometimes
        run: cd server && (yarn test:unit:ci || yarn test:unit:ci || yarn test:unit:ci) && cd ..
      - name: Get secrets for SonarCloud
        id: 'sonar_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SONAR_TOKEN:passculture-metier-ehp/passculture-app-native-sonar-token
      - name: SonarCloud scan - Proxy
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ steps.sonar_secrets.outputs.SONAR_TOKEN }}
        with:
          projectBaseDir: server
  slack_notify:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    if: ${{ always() && github.ref == 'refs/heads/master' }}
    needs:
      - yarn_test_native
      - yarn_test_proxy
      - yarn_test_web
    steps:
      - name: 'OpenID Connect Authentication'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: Get secrets for Slack
        id: 'slack_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
      - uses: technote-space/workflow-conclusion-action@v3
        if: ${{ always() }}
      - name: Post to a Slack channel
        id: slack
        if: ${{ env.WORKFLOW_CONCLUSION == 'failure' }}
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # channel #alertes-deploiement-native
          channel-id: 'C0309RP8K42'
          payload: |
            {
              "attachments": [
                  {
                      "mrkdwn_in": ["text"],
                      "color": "#A30002",
                      "author_name": "${{github.actor}}",
                      "author_link": "https://github.com/${{github.actor}}",
                      "author_icon": "https://github.com/${{github.actor}}.png",
                      "title": "PCAPPNATIVE Deployment",
                      "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                      "text": "Les tests sur master ont échoué :boom:"
                  }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
        env:
          SLACK_BOT_TOKEN: ${{ steps.slack_secrets.outputs.SLACK_BOT_TOKEN }}
