name: Tests e2e iOS App

on:
#  schedule:
#    - cron: '5 4 * * *'

  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
        required: true
        default: staging
      specs:
        type: string
        description: |
          Define specs for test execution. You can either specify a glob
          pattern to match multiple files at once or wrap a glob or set of
          paths into an array using "," delimiter to run them within a single worker process.
          [Default: run all tests]
        required: false

jobs:
  build-simu-ios-zip:
    name: Build iOS simulator zip
    uses: ./.github/workflows/reusable-e2e-buildsimuioszip.yml
    secrets: inherit
    with:
      environment: ${{ inputs.environment || 'staging' }}

  e2e-ios-app:
    needs: build-simu-ios-zip
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - osVersion: '15.2'
            os: 'iOS'
            model: 'iPhone 13'
    env:
      CI: true
      APPIUM_TEST_SERVER_PORT: 4723
      APPIUM_TEST_SERVER_HOST: 127.0.0.1
      APPIUM_STARTUP_TIMEOUT_SEC: 30
      _FORCE_LOGS: 1
      # if inputs.* are not defined, it is because it is scheduled, and fallback here are for scheduled task
      ENVIRONMENT: ${{ inputs.environment || 'staging' }}
      SPECS: ${{ inputs.specs }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
      SLACK_WEB_HOOK_URL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL }}
      SLACK_WEB_HOOK_URL_MANUAL: ${{ secrets.E2E_SLACK_WEB_HOOK_URL_MANUAL }}
      # useful for Slack reports
      GITHUB_SERVER_URL: ${{ github.server_url }}
      GITHUB_RUN_ID: ${{ github.run_id }}
    runs-on: macos-11
    environment: ${{ inputs.environment || 'staging' }}
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - uses: actions/checkout@v3

      - uses: futureware-tech/simulator-action@v2

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - uses: ruby/setup-ruby@v1

      - name: Install dependencies
        run: yarn install

      - name: Download artifact build simulator iOS
        uses: actions/download-artifact@v3
        with:
          name: build-simu-ios-zip

      - name: Add IOS_IPA_PATH to Environment variable
        run: echo "IOS_IPA_PATH=./PassCulture.zip" >> $GITHUB_ENV

      - name: Install extraneous dev dependencies
        run: |
          npm config set legacy-peer-deps true
          npm install -g appium@next
          appium driver install xcuitest
          appium driver install safari

      - name: Start Appium server
        run: |
          cwd=$(pwd)
          pushd "$cwd"
          cd ~
          nohup appium server \
            --port=$APPIUM_TEST_SERVER_PORT \
            --address=$APPIUM_TEST_SERVER_HOST \
            --relaxed-security \
            --allow-cors \
            2>&1 > "$cwd/appium.log" &
          popd

      - name: Wait for Appium server startup
        run: |
          seconds_started=$(date +%s)
          while ! nc -z $APPIUM_TEST_SERVER_HOST $APPIUM_TEST_SERVER_PORT; do
            sleep 0.1
            seconds_elapsed=$(( $(date +%s) - seconds_started ))
            if [[ $seconds_elapsed -gt $APPIUM_STARTUP_TIMEOUT_SEC ]]; then
              echo "Appium server was unable to start within $APPIUM_STARTUP_TIMEOUT_SEC seconds timeout"
              exit 1
            fi
          done

      - name: Slack failure notification
        if: ${{ failure() }}
        env:
          BRANCH_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/tree/${{ env.GITHUB_REF_NAME }}
          COMMIT_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/tree/${{ env.GITHUB_SHA_SHORT }}
          ACTION_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY_OWNER_PART }}/${{ env.GITHUB_REPOSITORY_NAME_PART }}/actions/runs/${{ env.GITHUB_RUN_ID }}
          SLACK_WEBHOOK: ${{ env.GITHUB_EVENT_NAME == 'schedule' && env.SLACK_WEB_HOOK_URL || env.SLACK_WEB_HOOK_URL_MANUAL }}
          EVENT_NAME: ${{ env.GITHUB_EVENT_NAME == 'schedule' && 'Scheduled' || 'Manually' }}
        run: |
          slackMessageTitle="<${BRANCH_URL}|${{ env.GITHUB_REF_NAME }}>/<${COMMIT_URL}|${{ env.GITHUB_SHA_SHORT }}> ${{ env.ENVIRONMENT }} - wdio ${{ env.GITHUB_REPOSITORY_NAME_PART }} \`e2e:ios.app\` <${ACTION_URL}|action> (${EVENT_NAME})"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x: *CI NOK: ${slackMessageTitle}* :x:\"}"  "$SLACK_WEBHOOK"

      - name: Run functional tests
        run: ENVIRONMENT="${{ env.ENVIRONMENT }}" IOS_DEVICE_NAME="${{ matrix.model }}" IOS_PLATFORM_VERSION="${{ matrix.osVersion }}" APPIUM_APP=${{ env.IOS_IPA_PATH }} yarn e2e:ios.app

      - name: Save server output
        if: ${{ always() }}
        uses: actions/upload-artifact@master
        with:
          name: appium-log-${{ matrix.model }}-${{ matrix.osVersion }}
          path: appium.log

      - name: Show appium server output
        if: ${{ always() }}
        run: cat appium.log

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: fail-screenshots-videos-${{ matrix.model }}-${{ matrix.osVersion }}
          path: e2e/output
          if-no-files-found: ignore
