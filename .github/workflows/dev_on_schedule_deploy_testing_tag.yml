name: Scheduled Hard Deploy Testing

on:
  schedule:
    - cron: '00 14 * * *' # tous les jours Ã  16h00 Europe/Paris
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  actions: write

jobs:
  deploy-new-testing-tag:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable Corepack (Yarn 3.x)
        run: |
          corepack enable
          corepack prepare yarn@3.6.4 --activate

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Authenticate through github app ghactionci
        uses: actions/create-github-app-token@v2
        id: github-app-token
        with:
          app-id: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
          private-key: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            pass-culture-app-native
          permission-contents: write
          permission-actions: write
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api \"/users/${{ steps.github-app-token.outputs.app-slug }}[bot]\" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.github-app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.github-app-token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ steps.github-app-token.outputs.token }}@github.com/${{ github.repository_owner }}/pass-culture-app-native.git
      - name: Get latest testing tag
        id: get_tag
        run: |
          TAG=$(git tag --list 'testing/v*' --sort=-v:refname | head -n 1)
          if [ -z "$TAG" ]; then
            echo "Aucun tag testing/v* trouvÃ©, le job Ã©choue."
            exit 1
          fi
          git fetch origin master
          LAST_TAG_COMMIT=$(git rev-list -n 1 "$TAG")
          LATEST_MASTER_COMMIT=$(git rev-parse origin/master)
          if [ "$LAST_TAG_COMMIT" = "$LATEST_MASTER_COMMIT" ]; then
            echo "Aucun nouveau commit sur master depuis le dernier tag testing, rien Ã  dÃ©ployer."
            exit 0
          fi
          VERSION=${TAG#testing/v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=testing/v${NEW_VERSION}" >> $GITHUB_ENV
      - name: Bump patch version
        run: |
          yarn version patch --no-git-tag-version
          cd server
          yarn version patch --no-git-tag-version
          cd ..

      - name: Update build number
        run: |
          VERSION=$(jq -r .version package.json)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          BUILD_NUMBER=$((10000000 * MAJOR + 1000 * MINOR + PATCH))
          jq ".build = $BUILD_NUMBER" package.json > tmp && mv tmp package.json
          jq ".build = $BUILD_NUMBER" server/package.json > tmp && mv tmp server/package.json

      - name: Commit version and build number
        run: |
          VERSION=$(jq -r .version package.json)
          git add package.json server/package.json
          git commit -m "testing/v$VERSION"
          git push origin master

      - name: Create and push testing tag
        run: |
          VERSION=$(jq -r .version package.json)
          TAG="testing/v$VERSION"
          git tag --annotate "$TAG" --message "ðŸš€ $TAG"
          git push origin "$TAG"
