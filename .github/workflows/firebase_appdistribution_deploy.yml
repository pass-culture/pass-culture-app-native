name: 'Firebase App Distribution Deploy'

on:
  # Daily deployment at 8:00 AM UTC (9:00 AM CET)
  schedule:
    - cron: '0 8 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - ios
        - android
        - both
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testing'
        type: choice
        options:
        - testing
        - staging
      generate_build_number:
        description: 'Generate incremental build number'
        required: false
        default: true
        type: boolean

  # Trigger on pull requests with "testme" label
  pull_request:
    types: [labeled]

jobs:
  check_trigger:
    name: 'Check deployment trigger'
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      platform: ${{ steps.check.outputs.platform }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Check if deployment should run
        id: check
        run: |
          should_deploy="false"
          platform="both"
          environment="testing"
          
          # Check if triggered by schedule
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Triggered by daily schedule"
            should_deploy="true"
          fi
          
          # Check if triggered manually
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Triggered manually"
            should_deploy="true"
            platform="${{ github.event.inputs.platform }}"
            environment="${{ github.event.inputs.environment }}"
          fi
          
          # Check if triggered by PR with "testme" label
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ contains(github.event.pull_request.labels.*.name, 'testme') }}" == "true" ]; then
              echo "Triggered by PR with 'testme' label"
              should_deploy="true"
            else
              echo "PR does not have 'testme' label"
            fi
          fi
          
          echo "should_deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "platform=$platform" >> $GITHUB_OUTPUT
          echo "environment=$environment" >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy to Firebase App Distribution'
    runs-on: macos-14
    needs: check_trigger
    if: needs.check_trigger.outputs.should_deploy == 'true'
    timeout-minutes: 90
    env:
      PLATFORM: ${{ needs.check_trigger.outputs.platform }}
      ENVIRONMENT: ${{ needs.check_trigger.outputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      
      - name: Setup yarn
        run: npm install -g yarn
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Setup Java (for Android builds)
        if: contains(env.PLATFORM, 'android')
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Setup Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      
      - name: Select Xcode version (for iOS builds)
        if: contains(env.PLATFORM, 'ios')
        run: |
          XCODE_VERSION="$(cat ./.xcode-version)"
          sudo xcode-select --switch /Applications/Xcode_${XCODE_VERSION}.app/Contents/Developer
          xcodebuild -showsdks
      
      - name: Install CocoaPods dependencies (for iOS builds)
        if: contains(env.PLATFORM, 'ios')
        run: cd ios/ && bundle exec pod install
      
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      
      - name: Get Firebase credentials from Secret Manager
        id: 'firebase_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            FIREBASE_TOKEN:passculture-metier-ehp/pc_native_${{ env.ENVIRONMENT }}_firebase_json
            SLACK_WEBHOOK_URL:passculture-metier-ehp/passculture-native-firebase-deploy-slack-webhook
      
      - name: Get iOS secrets from Secret Manager (for iOS builds)
        if: contains(env.PLATFORM, 'ios')
        id: 'ios_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD:passculture-metier-ehp/passculture-app-native-ios-fastlane-password
            IOS_APPCENTER_API_TOKEN:passculture-metier-ehp/passculture-app-native-ios-${{ env.ENVIRONMENT }}-token
            IOS_GOOGLE_SERVICES_PLIST:passculture-metier-ehp/pc-native-ios-google-service-${{ env.ENVIRONMENT }}
            MATCH_GIT_URL:passculture-metier-ehp/passculture-app-native-match-git-url
            MATCH_PASSWORD:passculture-metier-ehp/passculture-app-native-match-password
            MATCH_SSH_KEY:passculture-metier-ehp/passculture-app-native-match-ssh-key
            MATCH_USERNAME:passculture-metier-ehp/passculture-app-native-match-username
      
      - name: Get Android secrets from Secret Manager (for Android builds)
        if: contains(env.PLATFORM, 'android')
        id: 'android_secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            ANDROID_APPCENTER_API_TOKEN:passculture-metier-ehp/passculture-app-native-android-${{ env.ENVIRONMENT }}-token
            ANDROID_GOOGLE_SERVICES_JSON:passculture-metier-ehp/pc-native-android-google-service-${{ env.ENVIRONMENT }}
      
      - name: Setup Firebase credentials file
        run: |
          echo '${{ steps.firebase_secrets.outputs.FIREBASE_TOKEN }}' > firebase_credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/firebase_credentials.json" >> $GITHUB_ENV
      
      - name: Setup iOS configuration (for iOS builds)
        if: contains(env.PLATFORM, 'ios')
        run: |
          echo '${{ steps.ios_secrets.outputs.IOS_GOOGLE_SERVICES_PLIST }}' > ios/GoogleService-Info.plist
      
      - name: Setup Android configuration (for Android builds)
        if: contains(env.PLATFORM, 'android')
        run: |
          echo '${{ steps.android_secrets.outputs.ANDROID_GOOGLE_SERVICES_JSON }}' > android/app/google-services.json
      
      - name: Add iOS SSH key (for iOS builds)
        if: contains(env.PLATFORM, 'ios')
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ steps.ios_secrets.outputs.MATCH_SSH_KEY }}
      
      - name: Deploy to Firebase App Distribution
        run: |
          # Determine build number flag
          BUILD_FLAG=""
          if [ "${{ github.event.inputs.generate_build_number || 'true' }}" == "true" ]; then
            BUILD_FLAG="-b"
          fi
          
          # Run deployment script
          ./scripts/deploy_firebase_appdistribution.sh \
            -o "${{ env.PLATFORM }}" \
            -e "${{ env.ENVIRONMENT }}" \
            -s "${{ steps.firebase_secrets.outputs.SLACK_WEBHOOK_URL }}" \
            -f "${{ env.GOOGLE_APPLICATION_CREDENTIALS }}" \
            $BUILD_FLAG
        env:
          LC_ALL: en_US.UTF-8
          LANG: en_US.UTF-8
          # iOS environment variables
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ steps.ios_secrets.outputs.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          IOS_APPCENTER_API_TOKEN: ${{ steps.ios_secrets.outputs.IOS_APPCENTER_API_TOKEN }}
          MATCH_PASSWORD: ${{ steps.ios_secrets.outputs.MATCH_PASSWORD }}
          MATCH_USERNAME: ${{ steps.ios_secrets.outputs.MATCH_USERNAME }}
          MATCH_GIT_URL: ${{ steps.ios_secrets.outputs.MATCH_GIT_URL }}
          # Android environment variables  
          ANDROID_APPCENTER_API_TOKEN: ${{ steps.android_secrets.outputs.ANDROID_APPCENTER_API_TOKEN }}
      
      - name: Cleanup sensitive files
        if: always()
        run: |
          rm -f firebase_credentials.json
          rm -f ios/GoogleService-Info.plist
          rm -f android/app/google-services.json

  notify_failure:
    name: 'Notify deployment failure'
    runs-on: ubuntu-latest
    needs: [check_trigger, deploy]
    if: always() && needs.check_trigger.outputs.should_deploy == 'true' && needs.deploy.result == 'failure'
    steps:
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      
      - name: Get Slack webhook from Secret Manager
        id: 'slack_secret'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_WEBHOOK_URL:passculture-metier-ehp/passculture-native-firebase-deploy-slack-webhook
      
      - name: Send failure notification to Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "attachments": [
                {
                  "color": "#A30002",
                  "author_name": "${{ github.actor }}",
                  "title": "Firebase App Distribution Deployment Failed",
                  "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "text": "Firebase App Distribution deployment failed for ${{ needs.check_trigger.outputs.platform }} to `${{ needs.check_trigger.outputs.environment }}`\n\n*Repository:* ${{ github.repository }}\n*Workflow:* ${{ github.workflow }}\n*Run ID:* ${{ github.run_id }}",
                  "mrkdwn_in": ["text"]
                }
              ]
            }' \
            "${{ steps.slack_secret.outputs.SLACK_WEBHOOK_URL }}"