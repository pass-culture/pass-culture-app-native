version: 2.1

###################
#  EXECUTORS
###################

executors:
  node:
    docker:
      - image: cimg/node:16.13

  android:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45

  ios:
    macos:
      xcode: '13.2.1'

  gcp:
    docker:
      - image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-tools/node-gcp:16
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:
  install_node_version:
    description: Install Node version with NVM
    steps:
      - run:
          name: Install Node version with NVM
          command: |
            set +e
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            source $BASH_ENV
            nvm install --default
            nvm use

  install_node_modules:
    description: Install Node Dependencies
    steps:
      - restore_cache:
          name: Restore Node Modules
          keys:
            - node-modules-v9-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Node Modules
          key: node-modules-v9-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules

  unit_test_native:
    description: Unit Tests Native
    steps:
      - restore_cache:
          name: Restore Tests cache
          keys:
            - jest-cache-{{ checksum "yarn.lock" }}-{{ arch }}
      - run: yarn test:unit:ci
      - save_cache:
          name: Save Tests cache
          key: jest-cache-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - .jest

  install_ruby_modules:
    description: Install Ruby Dependencies
    steps:
      - restore_cache:
          name: Restore Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Install Gem dependencies
          command: |
            bundle install --path=vendor/bundle
      - save_cache:
          name: Save Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .bundle/
            - vendor/bundle

  skip_testing_soft_deploy_when_new_tag:
    description: Skip job when new tag to deploy
    steps:
      - run: git tag --points-at HEAD | grep -E '^testing_v[0-9]+(\.[0-9]+){2}$' && circleci step halt || true

  setup_android_google_services_config:
    description: Setup android Google services config
    steps:
      - run: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json

  setup_staging_secrets:
    description: Setup staging secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_STAGING" >> .env.staging
            echo "CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_STAGING" >> .env.staging
            echo "BATCH_API_KEY_ANDROID=$BATCH_API_KEY_ANDROID_STAGING" >> .env.staging
            echo "BATCH_API_KEY_IOS=$BATCH_API_KEY_IOS_STAGING" >> .env.staging
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_STAGING" >> .env.staging
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_STAGING" >> .env.staging
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_STAGING" >> .env.staging
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.staging

  setup_integration_secrets:
    description: Setup integration secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_STAGING" >> .env.integration
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_INTEGRATION" >> .env.integration
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_STAGING" >> .env.integration
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.integration

  setup_production_secrets:
    description: Setup production secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_PRODUCTION" >> .env.production
            echo "CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_PRODUCTION" >> .env.production
            echo "BATCH_API_KEY_ANDROID=$BATCH_API_KEY_ANDROID_PRODUCTION" >> .env.production
            echo "BATCH_API_KEY_IOS=$BATCH_API_KEY_IOS_PRODUCTION" >> .env.production
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_PRODUCTION" >> .env.production
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_PRODUCTION" >> .env.production
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_PRODUCTION" >> .env.production
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.production

  install_cocoapods:
    description: Install cocoapods
    steps:
      - run: cd ios/ && bundle exec pod install

  decode_match_secrets:
    description: Decode match secrets
    steps:
      - run: export MATCH_PASSWORD=$MATCH_PASSWORD_CERTIFICATES

  setup_sentry:
    description: Setup sentry credentials
    steps:
      - run:
          name: Setup sentry credentials
          command: |
            echo "[defaults]" >> ~/.sentryclirc
            echo "url=https://sentry.internal-passculture.app/" >> ~/.sentryclirc
            echo "org=sentry" >> ~/.sentryclirc
            echo "project=application-native" >> ~/.sentryclirc
            echo "" >> ~/.sentryclirc
            echo "[auth]" >> ~/.sentryclirc
            echo "token=$SENTRY_AUTH_TOKEN" >> ~/.sentryclirc

  notify-release-appcenter:
    description: Send Slack notification for new AppCenter release
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Notify deployed version
          command: |
            curl -X POST -H 'Content-type: application/json' \
            --data '{"channel":"alertes-deploiement","blocks":[{"type":"section","text":{"type": "mrkdwn","text":"*<< parameters.env >>*: Version *<< pipeline.git.tag >>* is now available in Appcenter üöÄ"}},{"type":"actions","elements":[{"type":"button","text":{"type":"plain_text","emoji":true,"text":"ü§ñ Android"},"url":"https://appcenter.ms/orgs/pass-Culture/apps/passculture-<< parameters.env >>-android"},{"type":"button","text":{"type":"plain_text","emoji":true,"text":"üçè iOS"},"url":"https://appcenter.ms/orgs/pass-Culture/apps/passculture-<< parameters.env >>-ios"},{"type":"button","text":{"type":"plain_text","emoji":true,"text":"üñ• Web"},"url":"https://app.<< parameters.env >>.passculture.team/"}]}]}' \
            $SLACK_OPS_BOT_URL

  notify-soft-release:
    description: Send Slack notification for new soft release
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Notify deployed version
          command: |
            BOT_MESSAGE="'*<< parameters.env >>* : [App Native] patch *"$CIRCLE_TAG"* has been successfully deployed :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  notify-release-production:
    description: Send Slack notification for new production release
    steps:
      - run:
          name: Notify deployed version
          command: |
            BOT_MESSAGE="'*production* : [App Native] Version *"$CIRCLE_TAG"* has been successfully deployed :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp_key_name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp_key_name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  copy_assetlinks:
    description: Copy assetlinks-<< parameters.env >>.json to assetlinks.json
    parameters:
      env:
        type: string
    steps:
      - run: |
          cp ./public/.well-known/assetlinks-<< parameters.env >>.json ./public/.well-known/assetlinks.json

  build_web:
    description: Build decliweb
    parameters:
      env:
        type: string
    steps:
      - install_node_version
      - install_node_modules
      - run: |
          yarn build:<< parameters.env >>

  push-to-bucket:
    description: Push the built decliweb to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
    steps:
      - run: |
          set +eo pipefail
          gsutil rsync -r ./build gs://<< parameters.bucket_name >>

  invalidate-cache:
    description: Invalidate Cache asynchronously
    parameters:
      url_map_name:
        type: string
    steps:
      - run:
          name: Invalidate cache
          command: |
            gcloud compute url-maps invalidate-cdn-cache << parameters.url_map_name >> --path "/*"  --async
            echo "An invalidateCache operation has been requested. You can follow its progress on https://console.cloud.google.com/compute/operations"

  sonarcloud-scanner:
    description: Detect bugs and vulnerabilities
    parameters:
      cache_version:
        default: 1
        description: increment this value if the cache is corrupted and you want to start with a clean cache
        type: integer
      sonar_token_variable_name:
        default: SONAR_TOKEN
        description: the name of the environment variable where the SonarCloud API token is stored
        type: env_var_name
    steps:
      - run:
          command: mkdir -p /tmp/cache/scanner
          name: Create cache directory if it doesn't exist
      - restore_cache:
          keys:
            - v<<parameters.cache_version>>-sonarcloud-scanner-4.6.2.2472
      - run:
          name: Scan repository with sonar-scanner
          command: |
            set -e
            VERSION=4.6.2.2472
            SONAR_TOKEN=$<<parameters.sonar_token_variable_name>>
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            echo $SONAR_USER_HOME

            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
            fi

            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
            chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java

            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
          environment:
            SONARQUBE_SCANNER_PARAMS: '{"sonar.host.url":"https://sonarcloud.io"}'
            name: SonarCloud
      - save_cache:
          key: v<<parameters.cache_version>>-sonarcloud-scanner-4.6.2.2472
          paths:
            - /tmp/cache/scanner

###################
#  JOBS
###################

jobs:
  checkout-and-install-deps:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules

  test-lint-and-types:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Linter
          command: |
            yarn test:lint
      - run:
          name: Typescript Type Check
          command: yarn test:types

  test-native:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - unit_test_native
      - sonarcloud-scanner

  test-web:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Unit Tests Web
          command: yarn test:unit:web:ci

  notify-hard-testing-release:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - notify-release-appcenter:
          env: testing

  notify-hard-staging-release:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - notify-release-appcenter:
          env: staging

  notify-hard-production-release:
    executor: node
    working_directory: ~/pass-culture
    steps:
      - notify-release-production

  deploy-soft-testing:
    executor: android
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_testing_soft_deploy_when_new_tag
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_sentry
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_TESTING
            ./scripts/deploy.sh -o android -t soft -e testing
      - run:
          name: Deploy IOS App for testing environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_TESTING
            ./scripts/deploy.sh -o ios -t soft -e testing

  deploy-android-testing-hard:
    executor: android
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_sentry
      - run:
          name: Setup android keystore for testing environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_TESTING | base64 -di > android/keystores/testing.keystore
            echo "keyAlias=passculture" >> android/keystores/testing.keystore.properties
            echo "storeFile=testing.keystore" >> android/keystores/testing.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_TESTING" >> android/keystores/testing.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_TESTING" >>  android/keystores/testing.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e testing

  deploy-ios-testing-hard:
    executor: ios
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_TESTING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for testing environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e testing

  deploy-ios-staging-hard:
    executor: ios
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_STAGING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for staging environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e staging

  deploy-android-staging-hard:
    executor: android
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Setup android keystore for staging environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_STAGING | base64 -di > android/keystores/staging.keystore
            echo "keyAlias=passculture" >> android/keystores/staging.keystore.properties
            echo "storeFile=staging.keystore" >> android/keystores/staging.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_STAGING" >> android/keystores/staging.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_STAGING" >>  android/keystores/staging.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e staging

  deploy-soft-staging:
    executor: android
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Deploy Android Code push for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_STAGING
            ./scripts/deploy.sh -o android -t soft -e staging
      - run:
          name: Deploy IOS Code push for staging environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t soft -e staging
      - notify-soft-release:
          env: staging

  deploy-android-production-hard:
    executor: android
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=android-app" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for production environment
          command: |
            ./scripts/deploy.sh -o android -t hard -e production

  deploy-ios-production-hard:
    executor: ios
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_PRODUCTION > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for production environment
          no_output_timeout: 30m
          command: |
            ./scripts/deploy.sh -o ios -t hard -e production

  deploy-soft-production:
    executor: android
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Deploy Android Code push for production environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_PRODUCTION_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_PRODUCTION
            ./scripts/deploy.sh -o android -t soft -e production
      - run:
          name: Deploy IOS Code push for production environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_PRODUCTION_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t soft -e production
      - notify-soft-release:
          env: production

  deploy-web-testing:
    executor: gcp
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - copy_assetlinks:
          env: testing
      - install_node_modules
      - setup_sentry
      - run:
          name: SENTRY_LOG_LEVEL
          command: |
            export SENTRY_LOG_LEVEL="debug webpack -c web/config/webpack.config.js"
      - authenticate_gcp:
          gcp_key_name: GCP_APP_NATIVE_KEY
      - build_web:
          env: testing
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-testing-decliweb
      - invalidate-cache:
          url_map_name: testing-decliweb-url-map

  deploy-web-staging:
    executor: gcp
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - copy_assetlinks:
          env: staging
      - install_node_modules
      - setup_staging_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_APP_NATIVE_KEY
      - build_web:
          env: staging
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-staging-decliweb
      - invalidate-cache:
          url_map_name: staging-decliweb-url-map

  deploy-web-integration:
    executor: gcp
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - setup_integration_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_APP_NATIVE_KEY
      - build_web:
          env: integration
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-integration-decliweb
      - invalidate-cache:
          url_map_name: integration-decliweb-url-map

  deploy-web-prod:
    executor: gcp
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - copy_assetlinks:
          env: production
      - install_node_modules
      - setup_production_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_APP_NATIVE_KEY
      - build_web:
          env: production
      - push-to-bucket:
          bucket_name: passculture-metier-prod-production-decliweb
      - invalidate-cache:
          url_map_name: production-decliweb-url-map

###################
#  WORKFLOWS
###################

workflows:
  version: 2.1
  commit:
    jobs:
      - checkout-and-install-deps:
          filters:
            tags:
              only: /.*/
      - test-lint-and-types:
          requires:
            - checkout-and-install-deps
      - test-native:
          requires:
            - checkout-and-install-deps
          context: SonarCloud
      - test-web:
          requires:
            - checkout-and-install-deps
      - deploy-soft-testing:
          filters:
            branches:
              only:
                - master
          requires:
            - checkout-and-install-deps
      - deploy-android-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - notify-hard-testing-release:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-ios-testing-hard
            - deploy-android-testing-hard
      - deploy-android-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - notify-hard-staging-release:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-ios-staging-hard
            - deploy-android-staging-hard
      - deploy-soft-staging:
          filters:
            tags:
              only: /^hotfix-staging.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-android-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - notify-hard-production-release:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-ios-production-hard
            - deploy-android-production-hard
      - deploy-soft-production:
          filters:
            tags:
              only: /^hotfix-production.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-web-testing:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-web
          context:
            - GCP
            - GCP_APP_NATIVE_EHP
      - deploy-web-staging:
          filters:
            tags:
              only:
                - /^v.*/
                - /^hotfix-staging.*/
            branches:
              ignore: /.*/
          requires:
            - wait_for_approval_web_to_deploy
          context:
            - GCP
            - GCP_APP_NATIVE_EHP
      - deploy-web-integration:
          filters:
            tags:
              only:
                - /^prod-hard-deploy.*/
                - /^hotfix-prod.*/
            branches:
              ignore: /.*/
          requires:
            - wait_for_approval_web_to_deploy
          context:
            - GCP
            - GCP_APP_NATIVE_EHP
      - deploy-web-prod:
          filters:
            tags:
              only:
                - /^prod-hard-deploy.*/
                - /^hotfix-prod.*/
            branches:
              ignore: /.*/
          requires:
            - wait_for_approval_web_to_deploy
          context:
            - GCP
            - GCP_APP_NATIVE_PROD
      - wait_for_approval_web_to_deploy:
          filters:
            tags:
              only:
                - /^prod-hard-deploy.*/
                - /^hotfix-prod.*/
                - /^v.*/
                - /^hotfix-staging.*/
            branches:
              ignore: /.*/
          type: approval
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-web
