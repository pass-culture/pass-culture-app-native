version: 2.1

commands:
  install_node_version:
    description: Install Node version with NVM
    steps:
      - run:
          name: Install Node version with NVM
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install 12.16.3 &> /dev/null' >> $BASH_ENV
            echo 'nvm alias default 12.16.3 &> /dev/null' >> $BASH_ENV
  install_node_modules:
    description: Install Node Dependencies
    steps:
      - restore_cache:
          name: Restore Node Modules
          keys:
            - node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Node Modules
          key: node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules
  install_ruby_modules:
    description: Install Ruby Dependencies
    steps:
      - restore_cache:
          name: Restore Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Install Gem dependencies
          command: |
            bundle install --path=vendor/bundle
      - save_cache:
          name: Save Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .bundle/
            - vendor/bundle
  skip_testing_soft_deploy_when_new_tag:
    description: Skip job when new tag to deploy
    steps:
      - run: git tag --points-at HEAD | grep -E '^testing_v[0-9]+(\.[0-9]+){2}$' && circleci step halt || true
  setup_android_google_services_config:
    description: Setup android Google services config
    steps:
      - run: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json
  install_cocoapods:
    description: Install cocoapods
    steps:
      - run: cd ios/ && bundle exec pod install
  decode_match_secrets:
    description: Decode match secrets
    steps:
      - run: export MATCH_PASSWORD=$MATCH_PASSWORD_CERTIFICATES
  upload_sourcemaps:
    description: Upload source maps
    steps:
      - run:
          name: Setup sentry credentials
          command: |
            echo "[defaults]" >> ~/.sentryclirc
            echo "url=https://sentry.internal-passculture.app/" >> ~/.sentryclirc
            echo "org=sentry" >> ~/.sentryclirc
            echo "project=application-native" >> ~/.sentryclirc
            echo "" >> ~/.sentryclirc
            echo "[auth]" >> ~/.sentryclirc
            echo "token=$SENTRY_AUTH_TOKEN" >> ~/.sentryclirc
      - run:
          name: Upload source maps
          command: |
            ./scripts/upload_sourcemaps_to_sentry.sh
  notify-release:
    description: Notify deployment
    steps:
      - run:
          name: Notify deployed version
          command: |
            BOT_MESSAGE="'[App Native] Version *"$CIRCLE_TAG"* has been successfully deployed :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

jobs:
  run-tests:
    docker:
      - image: cimg/node:12.16
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Linter
          command: |
            yarn test:lint
      - run:
          name: Typescript Type Check
          command: |
            yarn test:types
      - run:
          name: Unit Tests Native
          command: |
            yarn test:unit:ci
      - run:
          name: Unit Tests Web
          command: |
            yarn test:unit:web:ci

  upload-sourcemaps:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - upload_sourcemaps

  notify-hard-release:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - notify-release

  deploy-soft-testing:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_testing_soft_deploy_when_new_tag
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_TESTING
            ./scripts/deploy.sh -o android -t soft -e testing
      - run:
          name: Deploy IOS App for testing environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_TESTING
            ./scripts/deploy.sh -o ios -t soft -e testing

  build-android-production-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=android-app" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - setup_android_google_services_config
      - run:
          name: Build Android App for production environment
          command: ./scripts/check_diff.sh && bundle exec fastlane android build --env production --verbose

  build-ios-production-hard:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_PRODUCTION > ios/GoogleService-Info.plist
      - run:
          name: Build IOS App for production environment
          no_output_timeout: 30m
          command: |
            if ./scripts/check_diff.sh; then
              bundle exec fastlane ios download_certificates --env production
              bundle exec fastlane ios build --env production --verbose
            fi

  deploy-android-testing-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup android keystore for testing environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_TESTING | base64 -di > android/keystores/testing.keystore
            echo "keyAlias=passculture" >> android/keystores/testing.keystore.properties
            echo "storeFile=testing.keystore" >> android/keystores/testing.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_TESTING" >> android/keystores/testing.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_TESTING" >>  android/keystores/testing.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e testing

  deploy-ios-testing-hard:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_TESTING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for testing environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e testing

  deploy-ios-staging-hard:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_STAGING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for staging environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e staging

  deploy-android-staging-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup android keystore for staging environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_STAGING | base64 -di > android/keystores/staging.keystore
            echo "keyAlias=passculture" >> android/keystores/staging.keystore.properties
            echo "storeFile=staging.keystore" >> android/keystores/staging.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_STAGING" >> android/keystores/staging.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_STAGING" >>  android/keystores/staging.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e staging

  deploy-soft-staging:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Deploy Android Code push for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_STAGING
            ./scripts/deploy.sh -o android -t soft -e staging
      - run:
          name: Deploy IOS Code push for staging environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_STAGING
            ./scripts/deploy.sh -o ios -t soft -e staging
      - notify-release

  deploy-android-production-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=android-app" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for production environment
          command: |
            ./scripts/deploy.sh -o android -t hard -e production

  deploy-ios-production-hard:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_PRODUCTION > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for production environment
          no_output_timeout: 30m
          command: |
            ./scripts/deploy.sh -o ios -t hard -e production

  deploy-soft-production:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Deploy Android Code push for production environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_PRODUCTION_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_PRODUCTION
            ./scripts/deploy.sh -o android -t soft -e production
      - run:
          name: Deploy IOS Code push for production environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_PRODUCTION_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_PRODUCTION
            ./scripts/deploy.sh -o ios -t soft -e production
      - notify-release

workflows:
  version: 2.1
  commit:
    jobs:
      - run-tests:
          # Need to tell job run-tests to been launched for all tags
          # as it is a required step for some jobs, triggered by tags
          # see: https://discuss.circleci.com/t/tag-filter-not-firing-in-workflow/25534/3
          filters:
            tags:
              only: /.*/
      - deploy-soft-testing:
          filters:
            branches:
              only:
                - master
          requires:
            - run-tests
      - build-android-production-hard:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - run-tests
      - build-ios-production-hard:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - run-tests
      - deploy-android-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - deploy-ios-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - upload-sourcemaps:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              only:
                - master
          requires:
            - deploy-android-testing-hard
            - deploy-ios-testing-hard
      - deploy-android-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - deploy-ios-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - notify-hard-release:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-ios-staging-hard
            - deploy-android-staging-hard
      - deploy-soft-staging:
          filters:
            tags:
              only: /^hotfix-staging.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - deploy-android-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - deploy-ios-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
      - notify-hard-release:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - deploy-ios-production-hard
            - deploy-android-production-hard
      - deploy-soft-production:
          filters:
            tags:
              only: /^hotfix-production.*/
            branches:
              ignore: /.*/
          requires:
            - run-tests
