version: 2.1

commands:
  install_node_version:
    description: Install Node version with NVM
    steps:
      - run:
          name: Install Node version with NVM
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install 12.16.3 &> /dev/null' >> $BASH_ENV
            echo 'nvm alias default 12.16.3 &> /dev/null' >> $BASH_ENV
  install_node_modules:
    description: Install Node Dependencies
    steps:
      - restore_cache:
          name: Restore Node Modules
          keys:
            - node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Node Modules
          key: node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules
  install_ruby_modules:
    description: Install Ruby Dependencies
    steps:
      - restore_cache:
          name: Restore Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Install Gem dependencies
          command: |
            bundle install --path=vendor/bundle
      - save_cache:
          name: Save Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .bundle/
            - vendor/bundle
  skip_testing_soft_deploy_when_new_tag:
    description: Skip job when new tag to deploy
    steps:
      - run: git tag --points-at HEAD | grep -E '^testing_v[0-9]+(\.[0-9]+){2}$' && circleci step halt || true

jobs:
  run-tests:
    docker:
      - image: cimg/node:12.16
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Linter
          command: |
            yarn test:lint
      - run:
          name: Typescript Type Check
          command: |
            yarn test:types
      - run:
          name: Unit Tests
          command: |
            yarn test:unit:ci

  deploy-soft-testing:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_testing_soft_deploy_when_new_tag
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_TESTING
            ./scripts/deploy.sh -o android -t soft -e testing
      - run:
          name: Deploy IOS App for testing environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_TESTING
            ./scripts/deploy.sh -o ios -t soft -e testing

  deploy-android-testing-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Skip job when no tag found
          command: git tag --points-at HEAD | grep -E '^(testing_)?v[0-9]+(\.[0-9]+){2}$' || circleci step halt
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup android keystore for testing environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_TESTING | base64 -di > android/keystores/testing.keystore
            echo "keyAlias=passculture" >> android/keystores/testing.keystore.properties
            echo "storeFile=testing.keystore" >> android/keystores/testing.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_TESTING" >> android/keystores/testing.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_TESTING" >>  android/keystores/testing.keystore.properties
      - run:
          name: Setup android Google services config
          command: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e testing

  deploy-ios-testing-hard:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - run:
          name: Skip job when no tag found
          command: git tag --points-at HEAD | grep -E '^(testing_)?v[0-9]+(\.[0-9]+){2}$' || circleci step halt
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Install cocoapods
          command: cd ios/ && bundle exec pod install
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_TESTING > ios/GoogleService-Info.plist
      - run:
          name: Decode match secrets
          command: export MATCH_PASSWORD=$MATCH_PASSWORD_CERTIFICATES
      - run:
          name: Deploy IOS App for testing environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e testing

  deploy-ios-staging:
    macos:
      xcode: '12.0.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Install cocoapods
          command: cd ios/ && bundle exec pod install
      - run:
          name: Decode match secrets
          command: export MATCH_PASSWORD=$MATCH_PASSWORD_CERTIFICATES
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_STAGING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for staging environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e staging

  deploy-android-staging:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup android keystore for staging environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_STAGING | base64 -di > android/keystores/staging.keystore
            echo "keyAlias=passculture" >> android/keystores/staging.keystore.properties
            echo "storeFile=staging.keystore" >> android/keystores/staging.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_STAGING" >> android/keystores/staging.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_STAGING" >>  android/keystores/staging.keystore.properties
      - run:
          name: Setup android Google services config
          command: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json
      - run:
          name: Deploy Android App for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e staging

  deploy-android-production-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=passculture" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - run:
          name: Setup android Google services config
          command: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json
      - run:
          name: Deploy Android App for production environment
          command: |
            ./scripts/deploy.sh -o android -t hard -e production

workflows:
  version: 2.1
  commit:
    jobs:
      - run-tests
      - deploy-soft-testing:
          filters:
            branches:
              only:
                - master
          requires:
            - run-tests
      - deploy-android-testing-hard:
          filters:
            branches:
              only:
                - master
          requires:
            - run-tests
      - deploy-ios-testing-hard:
          filters:
            branches:
              only:
                - master
          requires:
            - run-tests
      - deploy-android-staging:
          filters:
            branches:
              only:
                - staging
          requires:
            - run-tests
      - deploy-ios-staging:
          filters:
            branches:
              only:
                - staging
          requires:
            - run-tests
      - deploy-android-production-hard:
          filters:
            branches:
              only:
                - production
          requires:
            - run-tests
