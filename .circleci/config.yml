version: 2.1

commands:
  copy_assetlinks_testing:
    description: Copy assetlinks-testing.json to assetlinks.json
    steps:
      - run:
          name: Copy assetlinks-testing.json to assetlinks.json
          command: cp ./public/.well-known/assetlinks-testing.json ./public/.well-known/assetlinks.json
  copy_assetlinks_staging:
    description: Copy assetlinks-staging.json to assetlinks.json
    steps:
      - run:
          name: Copy assetlinks-staging.json to assetlinks.json
          command: cp ./public/.well-known/assetlinks-staging.json ./public/.well-known/assetlinks.json
  copy_assetlinks_production:
    description: Copy assetlinks-production.json to assetlinks.json
    steps:
      - run:
          name: Copy assetlinks-production.json to assetlinks.json
          command: cp ./public/.well-known/assetlinks-production.json ./public/.well-known/assetlinks.json
  install_node_version:
    description: Install Node version with NVM
    steps:
      - run:
          name: Install Node version with NVM
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install 12.16.3 &> /dev/null' >> $BASH_ENV
            echo 'nvm alias default 12.16.3 &> /dev/null' >> $BASH_ENV
  install_node_modules:
    description: Install Node Dependencies
    steps:
      - restore_cache:
          name: Restore Node Modules
          keys:
            - node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
      - run:
          name: Install Dependencies
          command: yarn install --immutable
      - save_cache:
          name: Save Node Modules
          key: node-modules-v5-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - node_modules
  install_ruby_modules:
    description: Install Ruby Dependencies
    steps:
      - restore_cache:
          name: Restore Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Install Gem dependencies
          command: |
            bundle install --path=vendor/bundle
      - save_cache:
          name: Save Gem dependencies
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .bundle/
            - vendor/bundle
  skip_testing_soft_deploy_when_new_tag:
    description: Skip job when new tag to deploy
    steps:
      - run: git tag --points-at HEAD | grep -E '^testing_v[0-9]+(\.[0-9]+){2}$' && circleci step halt || true
  setup_android_google_services_config:
    description: Setup android Google services config
    steps:
      - run: echo $ANDROID_GOOGLE_SERVICES_JSON > android/app/google-services.json
  setup_staging_secrets:
    description: Setup staging secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_STAGING" >> .env.staging
            echo "CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_STAGING" >> .env.staging
            echo "BATCH_API_KEY_ANDROID=$BATCH_API_KEY_ANDROID_STAGING" >> .env.staging
            echo "BATCH_API_KEY_IOS=$BATCH_API_KEY_IOS_STAGING" >> .env.staging
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_STAGING" >> .env.staging
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_STAGING" >> .env.staging
            echo "APP_SEARCH_KEY=$APP_SEARCH_KEY_STAGING" >> .env.staging
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_STAGING" >> .env.staging
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.staging
  setup_integration_secrets:
    description: Setup integration secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_STAGING" >> .env.integration
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_STAGING" >> .env.integration
            echo "APP_SEARCH_KEY=$APP_SEARCH_KEY_STAGING" >> .env.integration
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_STAGING" >> .env.integration
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.integration
  setup_production_secrets:
    description: Setup production secrets env variables
    steps:
      - run:
          name: Setup secrets env variables
          command: |
            echo "CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_PRODUCTION" >> .env.production
            echo "CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_PRODUCTION" >> .env.production
            echo "BATCH_API_KEY_ANDROID=$BATCH_API_KEY_ANDROID_PRODUCTION" >> .env.production
            echo "BATCH_API_KEY_IOS=$BATCH_API_KEY_IOS_PRODUCTION" >> .env.production
            echo "CONTENTFUL_ACCESS_TOKEN=$CONTENTFUL_ACCESS_TOKEN_PRODUCTION" >> .env.production
            echo "ALGOLIA_SEARCH_API_KEY=$ALGOLIA_SEARCH_API_KEY_PRODUCTION" >> .env.production
            echo "APP_SEARCH_KEY=$APP_SEARCH_KEY_PRODUCTION" >> .env.production
            echo "RECOMMENDATION_TOKEN=$RECOMMENDATION_TOKEN_PRODUCTION" >> .env.production
            echo "APPS_FLYER_DEV_KEY=$APPS_FLYER_DEV_KEY" >> .env.production
  install_cocoapods:
    description: Install cocoapods
    steps:
      - run: cd ios/ && bundle exec pod install
  decode_match_secrets:
    description: Decode match secrets
    steps:
      - run: export MATCH_PASSWORD=$MATCH_PASSWORD_CERTIFICATES
  setup_sentry:
    description: Setup sentry credentials
    steps:
      - run:
          name: Setup sentry credentials
          command: |
            echo "[defaults]" >> ~/.sentryclirc
            echo "url=https://sentry.internal-passculture.app/" >> ~/.sentryclirc
            echo "org=sentry" >> ~/.sentryclirc
            echo "project=application-native" >> ~/.sentryclirc
            echo "" >> ~/.sentryclirc
            echo "[auth]" >> ~/.sentryclirc
            echo "token=$SENTRY_AUTH_TOKEN" >> ~/.sentryclirc
  notify-release:
    description: Notify deployment
    steps:
      - run:
          name: Notify deployed version
          command: |
            BOT_MESSAGE="'[App Native] Version *"$CIRCLE_TAG"* has been successfully deployed :muscle:'"
            curl -X POST -H 'Content-type: application/json' --data "{'text': $BOT_MESSAGE}" $SLACK_OPS_BOT_URL

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp_key_name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp_key_name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}
  build_web:
    description: Build decliweb
    parameters:
      env:
        type: string
    steps:
      - install_node_modules
      - run: |
          yarn build:<< parameters.env >>
  push-to-bucket:
    description: Push the built decliweb to a cloudstorage bucket
    parameters:
      bucket_name:
        type: string
    steps:
      - run: |
          set +eo pipefail
          gsutil rsync -r ./build gs://<< parameters.bucket_name >>
          true
  invalidate-cache:
    description: Invalidate Cache
    parameters:
      url_map_name:
        type: string
    steps:
      - run:
          name: Invalidate cache
          command: gcloud compute url-maps invalidate-cdn-cache << parameters.url_map_name >> --path "/*"

jobs:
  checkout-and-install-deps:
    docker:
      - image: cimg/node:12.16
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules

  test-lint-and-types:
    docker:
      - image: cimg/node:12.16
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Linter
          command: |
            yarn test:lint
      - run:
          name: Typescript Type Check
          command: yarn test:types

  test-native:
    docker:
      - image: cimg/node:12.16
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Unit Tests Native
          command: yarn test:unit:ci

  test-web:
    docker:
      - image: cimg/node:12.16
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - run:
          name: Unit Tests Web
          command: yarn test:unit:web:ci

  notify-hard-release:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - notify-release

  deploy-soft-testing:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - skip_testing_soft_deploy_when_new_tag
      - install_node_modules
      - install_ruby_modules
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_TESTING
            ./scripts/deploy.sh -o android -t soft -e testing
      - run:
          name: Deploy IOS App for testing environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_IOS=$CODEPUSH_KEY_IOS_TESTING
            ./scripts/deploy.sh -o ios -t soft -e testing

  build-android-production-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=android-app" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - setup_android_google_services_config
      - run:
          name: Build Android App for production environment
          command: |
            if ./scripts/check_diff.sh; then
              bundle exec fastlane android build --env production --verbose
            fi

  build-ios-production-hard:
    macos:
      xcode: '12.5.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_PRODUCTION > ios/GoogleService-Info.plist
      - run:
          name: Build IOS App for production environment
          no_output_timeout: 30m
          command: |
            if ./scripts/check_diff.sh; then
              bundle exec fastlane ios download_certificates --env production
              bundle exec fastlane ios build --env production --verbose
            fi

  deploy-android-testing-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_sentry
      - run:
          name: Setup android keystore for testing environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_TESTING | base64 -di > android/keystores/testing.keystore
            echo "keyAlias=passculture" >> android/keystores/testing.keystore.properties
            echo "storeFile=testing.keystore" >> android/keystores/testing.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_TESTING" >> android/keystores/testing.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_TESTING" >>  android/keystores/testing.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for testing environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e testing

  deploy-ios-testing-hard:
    macos:
      xcode: '12.5.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_TESTING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for testing environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_TESTING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e testing

  deploy-ios-staging-hard:
    macos:
      xcode: '12.5.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_STAGING > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for staging environment
          no_output_timeout: 30m
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t hard -e staging

  deploy-android-staging-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Setup android keystore for staging environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_STAGING | base64 -di > android/keystores/staging.keystore
            echo "keyAlias=passculture" >> android/keystores/staging.keystore.properties
            echo "storeFile=staging.keystore" >> android/keystores/staging.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_STAGING" >> android/keystores/staging.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_STAGING" >>  android/keystores/staging.keystore.properties
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o android -t hard -e staging

  deploy-soft-staging:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_staging_secrets
      - setup_sentry
      - run:
          name: Deploy Android Code push for staging environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_STAGING_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_STAGING
            ./scripts/deploy.sh -o android -t soft -e staging
      - run:
          name: Deploy IOS Code push for staging environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_STAGING_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t soft -e staging
      - notify-release

  deploy-android-production-hard:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    resource_class: medium+
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup production keystore for production environment
          command: |
            mkdir -p android/keystores
            echo $ANDROID_KEYSTORE_PRODUCTION | base64 -di > android/keystores/production.keystore
            echo "keyAlias=android-app" >> android/keystores/production.keystore.properties
            echo "storeFile=production.keystore" >> android/keystores/production.keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_STORE_PASSWORD_PRODUCTION" >> android/keystores/production.keystore.properties
            echo "keyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD_PRODUCTION" >>  android/keystores/production.keystore.properties
            echo $ANDROID_PLAYSTORE_SERVICE_ACCOUNT | base64 -di > fastlane/playStoreServiceAccount.json
      - setup_android_google_services_config
      - run:
          name: Deploy Android App for production environment
          command: |
            ./scripts/deploy.sh -o android -t hard -e production

  deploy-ios-production-hard:
    macos:
      xcode: '12.5.1'
    working_directory: ~/pass-culture
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'c2:ef:26:74:b8:dd:d6:3e:be:9b:ea:1a:cb:a1:a3:c3'
      - install_node_version
      - install_node_modules
      - install_ruby_modules
      - install_cocoapods
      - decode_match_secrets
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Setup iOS Google services config
          command: echo $IOS_GOOGLE_SERVICES_PLIST_PRODUCTION > ios/GoogleService-Info.plist
      - run:
          name: Deploy IOS App for production environment
          no_output_timeout: 30m
          command: |
            ./scripts/deploy.sh -o ios -t hard -e production

  deploy-soft-production:
    docker:
      - image: circleci/android@sha256:1be18bcc7582be501a1986bb222561298c7f7760673a50c21d5ec782b5d70b45
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - install_ruby_modules
      - setup_production_secrets
      - setup_sentry
      - run:
          name: Deploy Android Code push for production environment
          command: |
            export ANDROID_APPCENTER_API_TOKEN=$ANDROID_PRODUCTION_APPCENTER_API_TOKEN
            export CODEPUSH_KEY_ANDROID=$CODEPUSH_KEY_ANDROID_PRODUCTION
            ./scripts/deploy.sh -o android -t soft -e production
      - run:
          name: Deploy IOS Code push for production environment
          command: |
            export IOS_APPCENTER_API_TOKEN=$IOS_PRODUCTION_APPCENTER_API_TOKEN
            ./scripts/deploy.sh -o ios -t soft -e production
      - notify-release

  deploy-web-testing:
    docker:
      - image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-tools/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
    working_directory: ~/pass-culture
    steps:
      - checkout
      - copy_assetlinks_testing
      - install_node_modules
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build_web:
          env: testing
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-testing-decliweb
      - invalidate-cache:
          url_map_name: testing-decliweb-url-map

  deploy-web-staging:
    docker:
      - image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-tools/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
    working_directory: ~/pass-culture
    steps:
      - checkout
      - copy_assetlinks_staging
      - install_node_modules
      - setup_staging_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build_web:
          env: staging
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-staging-decliweb
      - invalidate-cache:
          url_map_name: staging-decliweb-url-map

  deploy-web-integration:
    docker:
      - image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-tools/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
    working_directory: ~/pass-culture
    steps:
      - checkout
      - install_node_modules
      - setup_integration_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build_web:
          env: integration
      - push-to-bucket:
          bucket_name: passculture-metier-ehp-integration-decliweb
      - invalidate-cache:
          url_map_name: integration-decliweb-url-map

  deploy-web-prod:
    docker:
      - image: europe-west1-docker.pkg.dev/passculture-infra-prod/pass-culture-tools/node-gcp:12
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY
    working_directory: ~/pass-culture
    steps:
      - checkout
      - copy_assetlinks_production
      - install_node_modules
      - setup_production_secrets
      - setup_sentry
      - authenticate_gcp:
          gcp_key_name: GCP_METIER_KEY
      - build_web:
          env: production
      - push-to-bucket:
          bucket_name: passculture-metier-prod-production-decliweb
      - invalidate-cache:
          url_map_name: production-decliweb-url-map

workflows:
  version: 2.1
  commit:
    jobs:
      - checkout-and-install-deps:
          filters:
            tags:
              only: /.*/
      - test-lint-and-types:
          requires:
            - checkout-and-install-deps
      - test-native:
          requires:
            - checkout-and-install-deps
      - test-web:
          requires:
            - checkout-and-install-deps
      - deploy-soft-testing:
          filters:
            branches:
              only:
                - master
          requires:
            - checkout-and-install-deps
      - build-android-production-hard:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - build-ios-production-hard:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-android-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-testing-hard:
          filters:
            tags:
              only: /^(testing_)?v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-android-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-staging-hard:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - notify-hard-release:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
            - deploy-ios-staging-hard
            - deploy-android-staging-hard
      - deploy-soft-staging:
          filters:
            tags:
              only: /^hotfix-staging.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-android-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-ios-production-hard:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - notify-hard-release:
          filters:
            tags:
              only: /^prod-hard-deploy.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
            - deploy-ios-production-hard
            - deploy-android-production-hard
      - deploy-soft-production:
          filters:
            tags:
              only: /^hotfix-production.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-native
      - deploy-web-testing:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-web
          context:
            - GCP
            - GCP_EHP
      - deploy-web-staging:
          filters:
            tags:
              only:
                - /^v.*/
                - /^hotfix-staging.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-web
          context:
            - GCP
            - GCP_EHP
      - deploy-web-integration:
          filters:
            tags:
              only:
                - /^v.*/
                - /^hotfix-prod.*/
            branches:
              ignore: /.*/
          requires:
            - test-lint-and-types
            - test-web
          context:
            - GCP
            - GCP_EHP
      - deploy-web-prod:
          filters:
            tags:
              only:
                - /^v.*/
                - /^hotfix-prod.*/
            branches:
              ignore: /.*/
          requires:
            - checkout-and-install-deps
            - test-lint-and-types
            - test-web
          context:
            - GCP
            - GCP_PROD
