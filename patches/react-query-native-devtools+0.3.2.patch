diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js
index a212bfc..85dad4d 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js
@@ -1,7 +1,5 @@
 'use strict';
 
-Object.defineProperty(exports, '__esModule', { value: true });
-
 var flatted = require('flatted');
 var reactNativeFlipper = require('react-native-flipper');
 
@@ -9,9 +7,7 @@ function addPlugin(queryCache) {
   var unsubscribe;
 
   function getQueries() {
-    return queryCache.getQueries(function () {
-      return true;
-    });
+    return queryCache.getAll();
   }
 
   function getQueryByHash(queryHash) {
diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js.map b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js.map
index a0a3b41..bd789ff 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js.map
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-query-native-devtools.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { CachedQuery, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getQueries(() => true);\n  }\n\n  function getQueryByHash(queryHash: string): CachedQuery<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["addPlugin","queryCache","unsubscribe","getQueries","getQueryByHash","queryHash","query","getSerializedQueries","queries","stringify","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":";;;;;;;SAQgBA,UAAUC;AACxB,MAAIC,WAAJ;;AAEA,WAASC,UAAT;AACE,WAAOF,UAAU,CAACE,UAAX,CAAsB;AAAA,aAAM,IAAN;AAAA,KAAtB,CAAP;AACD;;AAED,WAASC,cAAT,CAAwBC,SAAxB;AACE;AACA,WAAOJ,UAAU,CAACE,UAAX,CAAsB,UAACG,KAAD;AAAA,aAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,KAAtB,EAAgE,CAAhE,CAAP;AACD;;AAED,WAASE,oBAAT;AACE,WAAO;AACLC,MAAAA,OAAO,EAAEC,iBAAS,CAACN,UAAU,EAAX;AADb,KAAP;AAGD;;AAEDO,EAAAA,4BAAgB,CAAC;AACfC,IAAAA,KAAK,EAAE;AAAA,aAAM,4CAAN;AAAA,KADQ;AAEfC,IAAAA,SAFe,qBAELC,UAFK;AAGbX,MAAAA,WAAW,GAAGD,UAAU,CAACa,SAAX,CAAqB;AACjCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,OAFa,CAAd;AAIAM,MAAAA,UAAU,CAACG,OAAX,CAAmB,eAAnB,EAAoC,gBAAgBC,SAAhB;;;YAAGZ,iBAAAA;AACrC;AACA,2BAAAD,cAAc,CAACC,SAAD,CAAd,oEAA2Ba,KAA3B;AACAD,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;AAKAN,MAAAA,UAAU,CAACG,OAAX,CAAmB,cAAnB,EAAmC,iBAAgBC,SAAhB;YAAGZ,kBAAAA;AACpC;AACAJ,QAAAA,UAAU,CAACmB,aAAX,CAAyB,UAACd,KAAD;AAAA,iBAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,SAAzB;AACAY,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;;AAOAN,MAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,KApBc;AAqBfc,IAAAA,YArBe;AAsBb,UAAInB,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACXA,QAAAA,WAAW,GAAGoB,SAAd;AACD;AACF,KA1Bc;AA2BfC,IAAAA,eAAe,EAAE;AAAA,aAAM,IAAN;AAAA;AA3BF,GAAD,CAAhB;AA6BD;;;;"}
\ No newline at end of file
+{"version":3,"file":"react-query-native-devtools.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { Query, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getAll();\n  }\n\n  function getQueryByHash(queryHash: string): Query<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["addPlugin","queryCache","unsubscribe","getQueries","getAll","getQueryByHash","queryHash","query","getSerializedQueries","queries","stringify","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":";;;;;SAQgBA,UAAUC;AACxB,MAAIC,WAAJ;;AAEA,WAASC,UAAT;AACE,WAAOF,UAAU,CAACG,MAAX,EAAP;AACD;;AAED,WAASC,cAAT,CAAwBC,SAAxB;AACE;AACA,WAAOL,UAAU,CAACE,UAAX,CAAsB,UAACI,KAAD;AAAA,aAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,KAAtB,EAAgE,CAAhE,CAAP;AACD;;AAED,WAASE,oBAAT;AACE,WAAO;AACLC,MAAAA,OAAO,EAAEC,iBAAS,CAACP,UAAU,EAAX;AADb,KAAP;AAGD;;AAEDQ,EAAAA,4BAAgB,CAAC;AACfC,IAAAA,KAAK,EAAE;AAAA,aAAM,4CAAN;AAAA,KADQ;AAEfC,IAAAA,SAFe,qBAELC,UAFK;AAGbZ,MAAAA,WAAW,GAAGD,UAAU,CAACc,SAAX,CAAqB;AACjCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,OAFa,CAAd;AAIAM,MAAAA,UAAU,CAACG,OAAX,CAAmB,eAAnB,EAAoC,gBAAgBC,SAAhB;;;YAAGZ,iBAAAA;AACrC;AACA,2BAAAD,cAAc,CAACC,SAAD,CAAd,oEAA2Ba,KAA3B;AACAD,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;AAKAN,MAAAA,UAAU,CAACG,OAAX,CAAmB,cAAnB,EAAmC,iBAAgBC,SAAhB;YAAGZ,kBAAAA;AACpC;AACAL,QAAAA,UAAU,CAACoB,aAAX,CAAyB,UAACd,KAAD;AAAA,iBAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,SAAzB;AACAY,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;;AAOAN,MAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,KApBc;AAqBfc,IAAAA,YArBe;AAsBb,UAAIpB,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACXA,QAAAA,WAAW,GAAGqB,SAAd;AACD;AACF,KA1Bc;AA2BfC,IAAAA,eAAe,EAAE;AAAA,aAAM,IAAN;AAAA;AA3BF,GAAD,CAAhB;AA6BD;;;;"}
\ No newline at end of file
diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js
index 2e4225b..a40183d 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("flatted"),r=require("react-native-flipper");exports.addPlugin=function(n){var u;function t(){return{queries:e.stringify(n.getQueries((function(){return!0})))}}r.addPlugin({getId:function(){return"flipper-plugin-react-query-native-devtools"},onConnect:function(e){u=n.subscribe((function(){e.send("queries",t())})),e.receive("query:refetch",(function(e,r){var u,t;null===(t=e.queryHash,u=n.getQueries((function(e){return e.queryHash===t}))[0])||void 0===u||u.fetch(),r.success()})),e.receive("query:remove",(function(e,r){var u=e.queryHash;n.removeQueries((function(e){return e.queryHash===u})),r.success()})),e.send("queries",t())},onDisconnect:function(){u&&(u(),u=void 0)},runInBackground:function(){return!0}})};
+"use strict";var e=require("flatted"),n=require("react-native-flipper");exports.addPlugin=function(r){var u;function i(){return{queries:e.stringify(r.getAll())}}n.addPlugin({getId:function(){return"flipper-plugin-react-query-native-devtools"},onConnect:function(e){u=r.subscribe((function(){e.send("queries",i())})),e.receive("query:refetch",(function(e,n){var u,i;null===(i=e.queryHash,u=r.getQueries((function(e){return e.queryHash===i}))[0])||void 0===u||u.fetch(),n.success()})),e.receive("query:remove",(function(e,n){var u=e.queryHash;r.removeQueries((function(e){return e.queryHash===u})),n.success()})),e.send("queries",i())},onDisconnect:function(){u&&(u(),u=void 0)},runInBackground:function(){return!0}})};
 //# sourceMappingURL=react-query-native-devtools.cjs.production.min.js.map
diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js.map b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js.map
index 6acedc9..98e7596 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js.map
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-query-native-devtools.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { CachedQuery, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getQueries(() => true);\n  }\n\n  function getQueryByHash(queryHash: string): CachedQuery<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["queryCache","unsubscribe","getSerializedQueries","queries","stringify","getQueries","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","queryHash","query","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":"0JAQ0BA,OACpBC,WAWKC,UACA,CACLC,QAASC,YAVJJ,EAAWK,YAAW,kBAAM,OAcrCC,YAAiB,CACfC,MAAO,iBAAM,8CACbC,mBAAUC,GACRR,EAAcD,EAAWU,WAAU,WACjCD,EAAWE,KAAK,UAAWT,QAG7BO,EAAWG,QAAQ,iBAAiB,WAAgBC,SAlBhCC,UAAAA,IAkBmBA,YAhBlCd,EAAWK,YAAW,SAACU,UAAUA,EAAMD,YAAcA,KAAW,mBAkBxCE,QAC3BH,EAAUI,aAEZR,EAAWG,QAAQ,gBAAgB,WAAgBC,OAAbC,IAAAA,UAEpCd,EAAWkB,eAAc,SAACH,UAAUA,EAAMD,YAAcA,KACxDD,EAAUI,aAIZR,EAAWE,KAAK,UAAWT,MAE7BiB,wBACMlB,IACFA,IACAA,OAAcmB,IAGlBC,gBAAiB,kBAAM"}
\ No newline at end of file
+{"version":3,"file":"react-query-native-devtools.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { Query, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getAll();\n  }\n\n  function getQueryByHash(queryHash: string): Query<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["queryCache","unsubscribe","getSerializedQueries","queries","stringify","getAll","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","queryHash","getQueries","query","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":"mGAQ0BA,OACpBC,WAWKC,UACA,CACLC,QAASC,YAVJJ,EAAWK,WAcpBC,YAAiB,CACfC,MAAO,iBAAM,8CACbC,mBAAUC,GACRR,EAAcD,EAAWU,WAAU,WACjCD,EAAWE,KAAK,UAAWT,QAG7BO,EAAWG,QAAQ,iBAAiB,WAAgBC,SAlBhCC,UAAAA,IAkBmBA,YAhBlCd,EAAWe,YAAW,SAACC,UAAUA,EAAMF,YAAcA,KAAW,mBAkBxCG,QAC3BJ,EAAUK,aAEZT,EAAWG,QAAQ,gBAAgB,WAAgBC,OAAbC,IAAAA,UAEpCd,EAAWmB,eAAc,SAACH,UAAUA,EAAMF,YAAcA,KACxDD,EAAUK,aAIZT,EAAWE,KAAK,UAAWT,MAE7BkB,wBACMnB,IACFA,IACAA,OAAcoB,IAGlBC,gBAAiB,kBAAM"}
\ No newline at end of file
diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js
index 2122533..2e6885e 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js
@@ -5,9 +5,7 @@ function addPlugin(queryCache) {
   var unsubscribe;
 
   function getQueries() {
-    return queryCache.getQueries(function () {
-      return true;
-    });
+    return queryCache.getAll();
   }
 
   function getQueryByHash(queryHash) {
diff --git a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js.map b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js.map
index 5466784..fe66b05 100644
--- a/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js.map
+++ b/node_modules/react-query-native-devtools/dist/react-query-native-devtools.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"react-query-native-devtools.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { CachedQuery, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getQueries(() => true);\n  }\n\n  function getQueryByHash(queryHash: string): CachedQuery<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["addPlugin","queryCache","unsubscribe","getQueries","getQueryByHash","queryHash","query","getSerializedQueries","queries","stringify","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":";;;SAQgBA,UAAUC;AACxB,MAAIC,WAAJ;;AAEA,WAASC,UAAT;AACE,WAAOF,UAAU,CAACE,UAAX,CAAsB;AAAA,aAAM,IAAN;AAAA,KAAtB,CAAP;AACD;;AAED,WAASC,cAAT,CAAwBC,SAAxB;AACE;AACA,WAAOJ,UAAU,CAACE,UAAX,CAAsB,UAACG,KAAD;AAAA,aAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,KAAtB,EAAgE,CAAhE,CAAP;AACD;;AAED,WAASE,oBAAT;AACE,WAAO;AACLC,MAAAA,OAAO,EAAEC,SAAS,CAACN,UAAU,EAAX;AADb,KAAP;AAGD;;AAEDO,EAAAA,WAAgB,CAAC;AACfC,IAAAA,KAAK,EAAE;AAAA,aAAM,4CAAN;AAAA,KADQ;AAEfC,IAAAA,SAFe,qBAELC,UAFK;AAGbX,MAAAA,WAAW,GAAGD,UAAU,CAACa,SAAX,CAAqB;AACjCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,OAFa,CAAd;AAIAM,MAAAA,UAAU,CAACG,OAAX,CAAmB,eAAnB,EAAoC,gBAAgBC,SAAhB;;;YAAGZ,iBAAAA;AACrC;AACA,2BAAAD,cAAc,CAACC,SAAD,CAAd,oEAA2Ba,KAA3B;AACAD,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;AAKAN,MAAAA,UAAU,CAACG,OAAX,CAAmB,cAAnB,EAAmC,iBAAgBC,SAAhB;YAAGZ,kBAAAA;AACpC;AACAJ,QAAAA,UAAU,CAACmB,aAAX,CAAyB,UAACd,KAAD;AAAA,iBAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,SAAzB;AACAY,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;;AAOAN,MAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,KApBc;AAqBfc,IAAAA,YArBe;AAsBb,UAAInB,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACXA,QAAAA,WAAW,GAAGoB,SAAd;AACD;AACF,KA1Bc;AA2BfC,IAAAA,eAAe,EAAE;AAAA,aAAM,IAAN;AAAA;AA3BF,GAAD,CAAhB;AA6BD;;;;"}
\ No newline at end of file
+{"version":3,"file":"react-query-native-devtools.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { stringify } from 'flatted';\nimport { addPlugin as addFlipperPlugin } from 'react-native-flipper';\nimport { Query, QueryCache } from 'react-query';\n\ntype SerializedQueriesPayload = {\n  queries: string;\n};\n\nexport function addPlugin(queryCache: QueryCache) {\n  let unsubscribe: (() => void) | undefined;\n\n  function getQueries() {\n    return queryCache.getAll();\n  }\n\n  function getQueryByHash(queryHash: string): Query<unknown> {\n    // @ts-ignore\n    return queryCache.getQueries((query) => query.queryHash === queryHash)[0];\n  }\n\n  function getSerializedQueries(): SerializedQueriesPayload {\n    return {\n      queries: stringify(getQueries()),\n    };\n  }\n\n  addFlipperPlugin({\n    getId: () => 'flipper-plugin-react-query-native-devtools',\n    onConnect(connection) {\n      unsubscribe = queryCache.subscribe(() => {\n        connection.send('queries', getSerializedQueries());\n      });\n\n      connection.receive('query:refetch', ({ queryHash }, responder) => {\n        // @ts-ignore\n        getQueryByHash(queryHash)?.fetch();\n        responder.success();\n      });\n      connection.receive('query:remove', ({ queryHash }, responder) => {\n        // @ts-ignore\n        queryCache.removeQueries((query) => query.queryHash === queryHash);\n        responder.success();\n      });\n\n      // send initial queries\n      connection.send('queries', getSerializedQueries());\n    },\n    onDisconnect() {\n      if (unsubscribe) {\n        unsubscribe();\n        unsubscribe = undefined;\n      }\n    },\n    runInBackground: () => true,\n  });\n}\n"],"names":["addPlugin","queryCache","unsubscribe","getQueries","getAll","getQueryByHash","queryHash","query","getSerializedQueries","queries","stringify","addFlipperPlugin","getId","onConnect","connection","subscribe","send","receive","responder","fetch","success","removeQueries","onDisconnect","undefined","runInBackground"],"mappings":";;;SAQgBA,UAAUC;AACxB,MAAIC,WAAJ;;AAEA,WAASC,UAAT;AACE,WAAOF,UAAU,CAACG,MAAX,EAAP;AACD;;AAED,WAASC,cAAT,CAAwBC,SAAxB;AACE;AACA,WAAOL,UAAU,CAACE,UAAX,CAAsB,UAACI,KAAD;AAAA,aAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,KAAtB,EAAgE,CAAhE,CAAP;AACD;;AAED,WAASE,oBAAT;AACE,WAAO;AACLC,MAAAA,OAAO,EAAEC,SAAS,CAACP,UAAU,EAAX;AADb,KAAP;AAGD;;AAEDQ,EAAAA,WAAgB,CAAC;AACfC,IAAAA,KAAK,EAAE;AAAA,aAAM,4CAAN;AAAA,KADQ;AAEfC,IAAAA,SAFe,qBAELC,UAFK;AAGbZ,MAAAA,WAAW,GAAGD,UAAU,CAACc,SAAX,CAAqB;AACjCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,OAFa,CAAd;AAIAM,MAAAA,UAAU,CAACG,OAAX,CAAmB,eAAnB,EAAoC,gBAAgBC,SAAhB;;;YAAGZ,iBAAAA;AACrC;AACA,2BAAAD,cAAc,CAACC,SAAD,CAAd,oEAA2Ba,KAA3B;AACAD,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;AAKAN,MAAAA,UAAU,CAACG,OAAX,CAAmB,cAAnB,EAAmC,iBAAgBC,SAAhB;YAAGZ,kBAAAA;AACpC;AACAL,QAAAA,UAAU,CAACoB,aAAX,CAAyB,UAACd,KAAD;AAAA,iBAAWA,KAAK,CAACD,SAAN,KAAoBA,SAA/B;AAAA,SAAzB;AACAY,QAAAA,SAAS,CAACE,OAAV;AACD,OAJD;;AAOAN,MAAAA,UAAU,CAACE,IAAX,CAAgB,SAAhB,EAA2BR,oBAAoB,EAA/C;AACD,KApBc;AAqBfc,IAAAA,YArBe;AAsBb,UAAIpB,WAAJ,EAAiB;AACfA,QAAAA,WAAW;AACXA,QAAAA,WAAW,GAAGqB,SAAd;AACD;AACF,KA1Bc;AA2BfC,IAAAA,eAAe,EAAE;AAAA,aAAM,IAAN;AAAA;AA3BF,GAAD,CAAhB;AA6BD;;;;"}
\ No newline at end of file
diff --git a/node_modules/react-query-native-devtools/src/index.ts b/node_modules/react-query-native-devtools/src/index.ts
index 0cc6097..52739e4 100644
--- a/node_modules/react-query-native-devtools/src/index.ts
+++ b/node_modules/react-query-native-devtools/src/index.ts
@@ -1,6 +1,6 @@
 import { stringify } from 'flatted';
 import { addPlugin as addFlipperPlugin } from 'react-native-flipper';
-import { CachedQuery, QueryCache } from 'react-query';
+import { Query, QueryCache } from 'react-query';
 
 type SerializedQueriesPayload = {
   queries: string;
@@ -10,10 +10,10 @@ export function addPlugin(queryCache: QueryCache) {
   let unsubscribe: (() => void) | undefined;
 
   function getQueries() {
-    return queryCache.getQueries(() => true);
+    return queryCache.getAll();
   }
 
-  function getQueryByHash(queryHash: string): CachedQuery<unknown> {
+  function getQueryByHash(queryHash: string): Query<unknown> {
     // @ts-ignore
     return queryCache.getQueries((query) => query.queryHash === queryHash)[0];
   }
