diff --git a/node_modules/react-native/react.gradle b/node_modules/react-native/react.gradle
index dd34c98..d264383 100644
--- a/node_modules/react-native/react.gradle
+++ b/node_modules/react-native/react.gradle
@@ -97,6 +97,7 @@ afterEvaluate {
         // Create variant and target names
         def targetName = variant.name.capitalize()
         def targetPath = variant.dirName
+        def isRelease = targetName.toLowerCase().contains("release") || config."useReleaseConfigIn${targetName}"
 
         // React js bundle directories
         def jsBundleDir = file("$buildDir/generated/assets/react/${targetPath}")
@@ -151,7 +152,7 @@ afterEvaluate {
 
             // Set up dev mode
             def devEnabled = !(config."devDisabledIn${targetName}"
-                || targetName.toLowerCase().contains("release"))
+                || isRelease)
 
             def extraArgs = config.extraPackagerArgs ?: [];
 
@@ -171,7 +172,7 @@ afterEvaluate {
                     def hermesFlags;
                     def hbcTempFile = file("${jsBundleFile}.hbc")
                     exec {
-                        if (targetName.toLowerCase().contains("release")) {
+                        if (isRelease) {
                             // Can't use ?: since that will also substitute valid empty lists
                             hermesFlags = config.hermesFlagsRelease
                             if (hermesFlags == null) hermesFlags = ["-O", "-output-source-map"]
@@ -215,7 +216,7 @@ afterEvaluate {
                 ? config."bundleIn${targetName}"
                 : config."bundleIn${variant.buildType.name.capitalize()}" != null
                     ? config."bundleIn${variant.buildType.name.capitalize()}"
-                    : targetName.toLowerCase().contains("release")
+                    : isRelease
         }
 
         // Expose a minimal interface on the application variant and the task itself:
@@ -312,7 +313,6 @@ afterEvaluate {
         // This should really be done by packaging all Hermes releated libs into
         // two separate HermesDebug and HermesRelease AARs, but until then we'll
         // kludge it by deleting the .so files out of the /transforms/ directory.
-        def isRelease = targetName.toLowerCase().contains("release")
         def libDir = "$buildDir/intermediates/transforms/"
         def vmSelectionAction = {
             fileTree(libDir).matching {
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..361f5fb
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
diff --git a/node_modules/react-native/scripts/find-node.sh b/node_modules/react-native/scripts/find-node.sh
index 2ef8cf8..236c52f 100755
--- a/node_modules/react-native/scripts/find-node.sh
+++ b/node_modules/react-native/scripts/find-node.sh
@@ -1,37 +1,37 @@
-#!/bin/bash
-# Copyright (c) Facebook, Inc. and its affiliates.
+##!/bin/bash
+## Copyright (c) Facebook, Inc. and its affiliates.
+##
+## This source code is licensed under the MIT license found in the
+## LICENSE file in the root directory of this source tree.
 #
-# This source code is licensed under the MIT license found in the
-# LICENSE file in the root directory of this source tree.
-
-set -e
-
-# Define NVM_DIR and source the nvm.sh setup script
-[ -z "$NVM_DIR" ] && export NVM_DIR="$HOME/.nvm"
-
-if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
-  . "$HOME/.nvm/nvm.sh"
-elif [[ -x "$(command -v brew)" && -s "$(brew --prefix nvm)/nvm.sh" ]]; then
-  . "$(brew --prefix nvm)/nvm.sh"
-fi
-
-# Set up the nodenv node version manager if present
-if [[ -x "$HOME/.nodenv/bin/nodenv" ]]; then
-  eval "$("$HOME/.nodenv/bin/nodenv" init -)"
-elif [[ -x "$(command -v brew)" && -x "$(brew --prefix nodenv)/bin/nodenv" ]]; then
-  eval "$("$(brew --prefix nodenv)/bin/nodenv" init -)"
-fi
-
-# Set up the ndenv of anyenv if preset
-if [[ ! -x node && -d ${HOME}/.anyenv/bin ]]; then
-  export PATH=${HOME}/.anyenv/bin:${PATH}
-  if [[ "$(anyenv envs | grep -c ndenv )" -eq 1 ]]; then
-    eval "$(anyenv init -)"
-  fi
-fi
-
-# Support Homebrew on M1
-HOMEBREW_M1_BIN=/opt/homebrew/bin
-if [[ -d $HOMEBREW_M1_BIN && ! $PATH =~ $HOMEBREW_M1_BIN ]]; then
-  export PATH="$HOMEBREW_M1_BIN:$PATH"
-fi
+#set -e
+#
+## Define NVM_DIR and source the nvm.sh setup script
+#[ -z "$NVM_DIR" ] && export NVM_DIR="$HOME/.nvm"
+#
+#if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
+#  . "$HOME/.nvm/nvm.sh"
+#elif [[ -x "$(command -v brew)" && -s "$(brew --prefix nvm)/nvm.sh" ]]; then
+#  . "$(brew --prefix nvm)/nvm.sh"
+#fi
+#
+## Set up the nodenv node version manager if present
+#if [[ -x "$HOME/.nodenv/bin/nodenv" ]]; then
+#  eval "$("$HOME/.nodenv/bin/nodenv" init -)"
+#elif [[ -x "$(command -v brew)" && -x "$(brew --prefix nodenv)/bin/nodenv" ]]; then
+#  eval "$("$(brew --prefix nodenv)/bin/nodenv" init -)"
+#fi
+#
+## Set up the ndenv of anyenv if preset
+#if [[ ! -x node && -d ${HOME}/.anyenv/bin ]]; then
+#  export PATH=${HOME}/.anyenv/bin:${PATH}
+#  if [[ "$(anyenv envs | grep -c ndenv )" -eq 1 ]]; then
+#    eval "$(anyenv init -)"
+#  fi
+#fi
+#
+## Support Homebrew on M1
+#HOMEBREW_M1_BIN=/opt/homebrew/bin
+#if [[ -d $HOMEBREW_M1_BIN && ! $PATH =~ $HOMEBREW_M1_BIN ]]; then
+#  export PATH="$HOMEBREW_M1_BIN:$PATH"
+#fi
