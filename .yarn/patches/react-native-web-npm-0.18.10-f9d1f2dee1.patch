diff --git a/dist/cjs/exports/Image/index.js b/dist/cjs/exports/Image/index.js
index 870acc39b8bad509b4a8f4b07d7e1a84126daab4..dbafa6d4954473d2bb5975d23b863c162a3e9756 100644
--- a/dist/cjs/exports/Image/index.js
+++ b/dist/cjs/exports/Image/index.js
@@ -1,17 +1,25 @@
 "use strict";
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+var _interopRequireDefault =
+  require("@babel/runtime/helpers/interopRequireDefault").default;
 
-var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
+var _interopRequireWildcard =
+  require("@babel/runtime/helpers/interopRequireWildcard").default;
 
 exports.__esModule = true;
 exports.default = void 0;
 
-var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
+var _objectSpread2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectSpread2")
+);
 
-var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+var _extends2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/extends")
+);
 
-var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectWithoutPropertiesLoose")
+);
 
 var React = _interopRequireWildcard(require("react"));
 
@@ -27,45 +35,75 @@ var _PixelRatio = _interopRequireDefault(require("../PixelRatio"));
 
 var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
 
-var _TextAncestorContext = _interopRequireDefault(require("../Text/TextAncestorContext"));
+var _TextAncestorContext = _interopRequireDefault(
+  require("../Text/TextAncestorContext")
+);
 
 var _View = _interopRequireDefault(require("../View"));
 
-var _excluded = ["accessibilityLabel", "blurRadius", "defaultSource", "draggable", "onError", "onLayout", "onLoad", "onLoadEnd", "onLoadStart", "pointerEvents", "source", "style"];
-var ERRORED = 'ERRORED';
-var LOADED = 'LOADED';
-var LOADING = 'LOADING';
-var IDLE = 'IDLE';
+var _excluded = [
+  "accessibilityLabel",
+  "blurRadius",
+  "defaultSource",
+  "draggable",
+  "onError",
+  "onLayout",
+  "onLoad",
+  "onLoadEnd",
+  "onLoadStart",
+  "pointerEvents",
+  "source",
+  "style",
+];
+var ERRORED = "ERRORED";
+var LOADED = "LOADED";
+var LOADING = "LOADING";
+var IDLE = "IDLE";
 var _filterId = 0;
 var svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
 
 function createTintColorSVG(tintColor, id) {
-  return tintColor && id != null ? /*#__PURE__*/React.createElement("svg", {
-    style: {
-      position: 'absolute',
-      height: 0,
-      visibility: 'hidden',
-      width: 0
-    }
-  }, /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
-    id: "tint-" + id,
-    suppressHydrationWarning: true
-  }, /*#__PURE__*/React.createElement("feFlood", {
-    floodColor: "" + tintColor,
-    key: tintColor
-  }), /*#__PURE__*/React.createElement("feComposite", {
-    in2: "SourceAlpha",
-    operator: "atop"
-  })))) : null;
+  return tintColor && id != null
+    ? /*#__PURE__*/ React.createElement(
+        "svg",
+        {
+          style: {
+            position: "absolute",
+            height: 0,
+            visibility: "hidden",
+            width: 0,
+          },
+        },
+        /*#__PURE__*/ React.createElement(
+          "defs",
+          null,
+          /*#__PURE__*/ React.createElement(
+            "filter",
+            {
+              id: "tint-" + id,
+              suppressHydrationWarning: true,
+            },
+            /*#__PURE__*/ React.createElement("feFlood", {
+              floodColor: "" + tintColor,
+              key: tintColor,
+            }),
+            /*#__PURE__*/ React.createElement("feComposite", {
+              in2: "SourceAlpha",
+              operator: "atop",
+            })
+          )
+        )
+      )
+    : null;
 }
 
 function getFlatStyle(style, blurRadius, filterId) {
   var flatStyle = _StyleSheet.default.flatten(style);
 
   var filter = flatStyle.filter,
-      resizeMode = flatStyle.resizeMode,
-      shadowOffset = flatStyle.shadowOffset,
-      tintColor = flatStyle.tintColor; // Add CSS filters
+    resizeMode = flatStyle.resizeMode,
+    shadowOffset = flatStyle.shadowOffset,
+    tintColor = flatStyle.tintColor; // Add CSS filters
   // React Native exposes these features as props and proprietary styles
 
   var filters = [];
@@ -92,11 +130,10 @@ function getFlatStyle(style, blurRadius, filterId) {
   }
 
   if (filters.length > 0) {
-    _filter = filters.join(' ');
+    _filter = filters.join(" ");
   } // These styles are converted to CSS filters applied to the
   // element displaying the background image.
 
-
   delete flatStyle.blurRadius;
   delete flatStyle.shadowColor;
   delete flatStyle.shadowOpacity;
@@ -110,21 +147,25 @@ function getFlatStyle(style, blurRadius, filterId) {
 }
 
 function resolveAssetDimensions(source) {
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     var _getAssetByID = (0, _AssetRegistry.getAssetByID)(source),
-        _height = _getAssetByID.height,
-        _width = _getAssetByID.width;
+      _height = _getAssetByID.height,
+      _width = _getAssetByID.width;
 
     return {
       height: _height,
-      width: _width
+      width: _width,
     };
-  } else if (source != null && !Array.isArray(source) && typeof source === 'object') {
+  } else if (
+    source != null &&
+    !Array.isArray(source) &&
+    typeof source === "object"
+  ) {
     var _height2 = source.height,
-        _width2 = source.width;
+      _width2 = source.width;
     return {
       height: _height2,
-      width: _width2
+      width: _width2,
     };
   }
 }
@@ -132,12 +173,16 @@ function resolveAssetDimensions(source) {
 function resolveAssetUri(source) {
   var uri = null;
 
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     // get the URI from the packager
     var asset = (0, _AssetRegistry.getAssetByID)(source);
 
     if (asset == null) {
-      throw new Error("Image: asset with ID \"" + source + "\" could not be found. Please check the image source or packager.");
+      throw new Error(
+        'Image: asset with ID "' +
+          source +
+          '" could not be found. Please check the image source or packager.'
+      );
     }
 
     var scale = asset.scales[0];
@@ -145,15 +190,25 @@ function resolveAssetUri(source) {
     if (asset.scales.length > 1) {
       var preferredScale = _PixelRatio.default.get(); // Get the scale which is closest to the preferred scale
 
-
-      scale = asset.scales.reduce((prev, curr) => Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale) ? curr : prev);
+      scale = asset.scales.reduce((prev, curr) =>
+        Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)
+          ? curr
+          : prev
+      );
     }
 
-    var scaleSuffix = scale !== 1 ? "@" + scale + "x" : '';
-    uri = asset ? asset.httpServerLocation + "/" + asset.name + scaleSuffix + "." + asset.type : '';
-  } else if (typeof source === 'string') {
+    var scaleSuffix = scale !== 1 ? "@" + scale + "x" : "";
+    uri = asset
+      ? asset.httpServerLocation +
+        "/" +
+        asset.name +
+        scaleSuffix +
+        "." +
+        asset.type
+      : "";
+  } else if (typeof source === "string") {
     uri = source;
-  } else if (source && typeof source.uri === 'string') {
+  } else if (source && typeof source.uri === "string") {
     uri = source.uri;
   }
 
@@ -162,7 +217,7 @@ function resolveAssetUri(source) {
 
     if (match) {
       var prefix = match[1],
-          svg = match[2];
+        svg = match[2];
       var encodedSvg = encodeURIComponent(svg);
       return "" + prefix + encodedSvg;
     }
@@ -171,84 +226,99 @@ function resolveAssetUri(source) {
   return uri;
 }
 
-var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
+var Image = /*#__PURE__*/ React.forwardRef((props, ref) => {
   var accessibilityLabel = props.accessibilityLabel,
-      blurRadius = props.blurRadius,
-      defaultSource = props.defaultSource,
-      draggable = props.draggable,
-      onError = props.onError,
-      onLayout = props.onLayout,
-      onLoad = props.onLoad,
-      onLoadEnd = props.onLoadEnd,
-      onLoadStart = props.onLoadStart,
-      pointerEvents = props.pointerEvents,
-      source = props.source,
-      style = props.style,
-      rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
-
-  if (process.env.NODE_ENV !== 'production') {
+    blurRadius = props.blurRadius,
+    defaultSource = props.defaultSource,
+    draggable = props.draggable,
+    onError = props.onError,
+    onLayout = props.onLayout,
+    onLoad = props.onLoad,
+    onLoadEnd = props.onLoadEnd,
+    onLoadStart = props.onLoadStart,
+    pointerEvents = props.pointerEvents,
+    source = props.source,
+    transform = props.transform,
+    style = props.style,
+    rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
+
+  if (process.env.NODE_ENV !== "production") {
     if (props.children) {
-      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
+      throw new Error(
+        "The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning."
+      );
     }
   }
 
   var _React$useState = React.useState(() => {
-    var uri = resolveAssetUri(source);
+      var uri = resolveAssetUri(source);
 
-    if (uri != null) {
-      var isLoaded = _ImageLoader.default.has(uri);
+      if (uri != null) {
+        var isLoaded = _ImageLoader.default.has(uri);
 
-      if (isLoaded) {
-        return LOADED;
+        if (isLoaded) {
+          return LOADED;
+        }
       }
-    }
 
-    return IDLE;
-  }),
-      state = _React$useState[0],
-      updateState = _React$useState[1];
+      return IDLE;
+    }),
+    state = _React$useState[0],
+    updateState = _React$useState[1];
 
   var _React$useState2 = React.useState({}),
-      layout = _React$useState2[0],
-      updateLayout = _React$useState2[1];
+    layout = _React$useState2[0],
+    updateLayout = _React$useState2[1];
 
   var hasTextAncestor = React.useContext(_TextAncestorContext.default);
   var hiddenImageRef = React.useRef(null);
   var filterRef = React.useRef(_filterId++);
   var requestRef = React.useRef(null);
-  var shouldDisplaySource = state === LOADED || state === LOADING && defaultSource == null;
+  var shouldDisplaySource =
+    state === LOADED || (state === LOADING && defaultSource == null);
 
   var _getFlatStyle = getFlatStyle(style, blurRadius, filterRef.current),
-      flatStyle = _getFlatStyle[0],
-      _resizeMode = _getFlatStyle[1],
-      filter = _getFlatStyle[2],
-      tintColor = _getFlatStyle[3];
+    flatStyle = _getFlatStyle[0],
+    _resizeMode = _getFlatStyle[1],
+    filter = _getFlatStyle[2],
+    tintColor = _getFlatStyle[3];
 
-  var resizeMode = props.resizeMode || _resizeMode || 'cover';
+  var resizeMode = props.resizeMode || _resizeMode || "cover";
   var selectedSource = shouldDisplaySource ? source : defaultSource;
   var displayImageUri = resolveAssetUri(selectedSource);
   var imageSizeStyle = resolveAssetDimensions(selectedSource);
-  var backgroundImage = displayImageUri ? "url(\"" + displayImageUri + "\")" : null;
+  var backgroundImage = displayImageUri
+    ? 'url("' + displayImageUri + '")'
+    : null;
   var backgroundSize = getBackgroundSize(); // Accessibility image allows users to trigger the browser's image context menu
 
-  var hiddenImage = displayImageUri ? (0, _createElement.default)('img', {
-    alt: accessibilityLabel || '',
-    style: styles.accessibilityImage$raw,
-    draggable: draggable || false,
-    ref: hiddenImageRef,
-    src: displayImageUri
-  }) : null;
+  var hiddenImage = displayImageUri
+    ? (0, _createElement.default)("img", {
+        alt: accessibilityLabel || "",
+        style: styles.accessibilityImage$raw,
+        draggable: draggable || false,
+        ref: hiddenImageRef,
+        src: displayImageUri,
+      })
+    : null;
 
   function getBackgroundSize() {
-    if (hiddenImageRef.current != null && (resizeMode === 'center' || resizeMode === 'repeat')) {
+    if (
+      hiddenImageRef.current != null &&
+      (resizeMode === "center" || resizeMode === "repeat")
+    ) {
       var _hiddenImageRef$curre = hiddenImageRef.current,
-          naturalHeight = _hiddenImageRef$curre.naturalHeight,
-          naturalWidth = _hiddenImageRef$curre.naturalWidth;
+        naturalHeight = _hiddenImageRef$curre.naturalHeight,
+        naturalWidth = _hiddenImageRef$curre.naturalWidth;
       var _height3 = layout.height,
-          _width3 = layout.width;
+        _width3 = layout.width;
 
       if (naturalHeight && naturalWidth && _height3 && _width3) {
-        var scaleFactor = Math.min(1, _width3 / naturalWidth, _height3 / naturalHeight);
+        var scaleFactor = Math.min(
+          1,
+          _width3 / naturalWidth,
+          _height3 / naturalHeight
+        );
         var x = Math.ceil(scaleFactor * naturalWidth);
         var y = Math.ceil(scaleFactor * naturalHeight);
         return x + "px " + y + "px";
@@ -257,14 +327,13 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
   }
 
   function handleLayout(e) {
-    if (resizeMode === 'center' || resizeMode === 'repeat' || onLayout) {
+    if (resizeMode === "center" || resizeMode === "repeat" || onLayout) {
       var _layout = e.nativeEvent.layout;
       onLayout && onLayout(e);
       updateLayout(_layout);
     }
   } // Image loading
 
-
   var uri = resolveAssetUri(source);
   React.useEffect(() => {
     abortPendingRequest();
@@ -276,31 +345,35 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
         onLoadStart();
       }
 
-      requestRef.current = _ImageLoader.default.load(uri, function load(e) {
-        updateState(LOADED);
-
-        if (onLoad) {
-          onLoad(e);
+      requestRef.current = _ImageLoader.default.load(
+        uri,
+        function load(e) {
+          updateState(LOADED);
+
+          if (onLoad) {
+            onLoad(e);
+          }
+
+          if (onLoadEnd) {
+            onLoadEnd();
+          }
+        },
+        function error() {
+          updateState(ERRORED);
+
+          if (onError) {
+            onError({
+              nativeEvent: {
+                error: "Failed to load resource " + uri + " (404)",
+              },
+            });
+          }
+
+          if (onLoadEnd) {
+            onLoadEnd();
+          }
         }
-
-        if (onLoadEnd) {
-          onLoadEnd();
-        }
-      }, function error() {
-        updateState(ERRORED);
-
-        if (onError) {
-          onError({
-            nativeEvent: {
-              error: "Failed to load resource " + uri + " (404)"
-            }
-          });
-        }
-
-        if (onLoadEnd) {
-          onLoadEnd();
-        }
-      });
+      );
     }
 
     function abortPendingRequest() {
@@ -313,23 +386,40 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
 
     return abortPendingRequest;
   }, [uri, requestRef, updateState, onError, onLoad, onLoadEnd, onLoadStart]);
-  return /*#__PURE__*/React.createElement(_View.default, (0, _extends2.default)({}, rest, {
-    accessibilityLabel: accessibilityLabel,
-    onLayout: handleLayout,
-    pointerEvents: pointerEvents,
-    ref: ref,
-    style: [styles.root, hasTextAncestor && styles.inline, imageSizeStyle, flatStyle]
-  }), /*#__PURE__*/React.createElement(_View.default, {
-    style: [styles.image, resizeModeStyles[resizeMode], {
-      backgroundImage,
-      filter
-    }, backgroundSize != null && {
-      backgroundSize
-    }],
-    suppressHydrationWarning: true
-  }), hiddenImage, createTintColorSVG(tintColor, filterRef.current));
+  return /*#__PURE__*/ React.createElement(
+    _View.default,
+    (0, _extends2.default)({}, rest, {
+      accessibilityLabel: accessibilityLabel,
+      onLayout: handleLayout,
+      pointerEvents: pointerEvents,
+      ref: ref,
+      style: [
+        styles.root,
+        hasTextAncestor && styles.inline,
+        imageSizeStyle,
+        flatStyle,
+      ],
+    }),
+    /*#__PURE__*/ React.createElement(_View.default, {
+      style: [
+        styles.image,
+        resizeModeStyles[resizeMode],
+        {
+          backgroundImage,
+          filter,
+          transform,
+        },
+        backgroundSize != null && {
+          backgroundSize,
+        },
+      ],
+      suppressHydrationWarning: true,
+    }),
+    hiddenImage,
+    createTintColorSVG(tintColor, filterRef.current)
+  );
 });
-Image.displayName = 'Image'; // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
+Image.displayName = "Image"; // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 
 var ImageWithStatics = Image;
 
@@ -347,52 +437,60 @@ ImageWithStatics.queryCache = function (uris) {
 
 var styles = _StyleSheet.default.create({
   root: {
-    flexBasis: 'auto',
-    overflow: 'hidden',
-    zIndex: 0
+    flexBasis: "auto",
+    overflow: "hidden",
+    zIndex: 0,
   },
   inline: {
-    display: 'inline-flex'
+    display: "inline-flex",
   },
-  image: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _StyleSheet.default.absoluteFillObject), {}, {
-    backgroundColor: 'transparent',
-    backgroundPosition: 'center',
-    backgroundRepeat: 'no-repeat',
-    backgroundSize: 'cover',
-    height: '100%',
-    width: '100%',
-    zIndex: -1
-  }),
-  accessibilityImage$raw: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, _StyleSheet.default.absoluteFillObject), {}, {
-    height: '100%',
-    opacity: 0,
-    width: '100%',
-    zIndex: -1
-  })
+  image: (0, _objectSpread2.default)(
+    (0, _objectSpread2.default)({}, _StyleSheet.default.absoluteFillObject),
+    {},
+    {
+      backgroundColor: "transparent",
+      backgroundPosition: "center",
+      backgroundRepeat: "no-repeat",
+      backgroundSize: "cover",
+      height: "100%",
+      width: "100%",
+      zIndex: -1,
+    }
+  ),
+  accessibilityImage$raw: (0, _objectSpread2.default)(
+    (0, _objectSpread2.default)({}, _StyleSheet.default.absoluteFillObject),
+    {},
+    {
+      height: "100%",
+      opacity: 0,
+      width: "100%",
+      zIndex: -1,
+    }
+  ),
 });
 
 var resizeModeStyles = _StyleSheet.default.create({
   center: {
-    backgroundSize: 'auto'
+    backgroundSize: "auto",
   },
   contain: {
-    backgroundSize: 'contain'
+    backgroundSize: "contain",
   },
   cover: {
-    backgroundSize: 'cover'
+    backgroundSize: "cover",
   },
   none: {
-    backgroundPosition: '0',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundSize: "auto",
   },
   repeat: {
-    backgroundPosition: '0',
-    backgroundRepeat: 'repeat',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundRepeat: "repeat",
+    backgroundSize: "auto",
   },
   stretch: {
-    backgroundSize: '100% 100%'
-  }
+    backgroundSize: "100% 100%",
+  },
 });
 
 var _default = ImageWithStatics;
diff --git a/dist/cjs/exports/Text/index.js b/dist/cjs/exports/Text/index.js
index c24a3eb155efefbb4e311275c2468ec5dc33c060..fd6ad5789b509c5640935f3ee437c825301f4887 100644
--- a/dist/cjs/exports/Text/index.js
+++ b/dist/cjs/exports/Text/index.js
@@ -1,76 +1,130 @@
 "use strict";
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+var _interopRequireDefault =
+  require("@babel/runtime/helpers/interopRequireDefault").default;
 
-var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
+var _interopRequireWildcard =
+  require("@babel/runtime/helpers/interopRequireWildcard").default;
 
 exports.__esModule = true;
 exports.default = void 0;
 
-var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
+var _objectSpread2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectSpread2")
+);
 
-var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
+var _objectWithoutPropertiesLoose2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectWithoutPropertiesLoose")
+);
 
 var React = _interopRequireWildcard(require("react"));
 
 var _createElement = _interopRequireDefault(require("../createElement"));
 
-var forwardedProps = _interopRequireWildcard(require("../../modules/forwardedProps"));
+var forwardedProps = _interopRequireWildcard(
+  require("../../modules/forwardedProps")
+);
 
 var _pick = _interopRequireDefault(require("../../modules/pick"));
 
-var _useElementLayout = _interopRequireDefault(require("../../modules/useElementLayout"));
+var _useElementLayout = _interopRequireDefault(
+  require("../../modules/useElementLayout")
+);
 
-var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));
+var _useMergeRefs = _interopRequireDefault(
+  require("../../modules/useMergeRefs")
+);
 
-var _usePlatformMethods = _interopRequireDefault(require("../../modules/usePlatformMethods"));
+var _usePlatformMethods = _interopRequireDefault(
+  require("../../modules/usePlatformMethods")
+);
 
-var _useResponderEvents = _interopRequireDefault(require("../../modules/useResponderEvents"));
+var _useResponderEvents = _interopRequireDefault(
+  require("../../modules/useResponderEvents")
+);
 
 var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
 
-var _TextAncestorContext = _interopRequireDefault(require("./TextAncestorContext"));
+var _TextAncestorContext = _interopRequireDefault(
+  require("./TextAncestorContext")
+);
 
 var _useLocale = require("../../modules/useLocale");
 
-var _excluded = ["hrefAttrs", "numberOfLines", "onClick", "onLayout", "onPress", "onMoveShouldSetResponder", "onMoveShouldSetResponderCapture", "onResponderEnd", "onResponderGrant", "onResponderMove", "onResponderReject", "onResponderRelease", "onResponderStart", "onResponderTerminate", "onResponderTerminationRequest", "onScrollShouldSetResponder", "onScrollShouldSetResponderCapture", "onSelectionChangeShouldSetResponder", "onSelectionChangeShouldSetResponderCapture", "onStartShouldSetResponder", "onStartShouldSetResponderCapture", "selectable"];
-var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {
-  href: true,
-  lang: true,
-  pointerEvents: true
-});
+var _excluded = [
+  "hrefAttrs",
+  "numberOfLines",
+  "onClick",
+  "onLayout",
+  "onPress",
+  "onMoveShouldSetResponder",
+  "onMoveShouldSetResponderCapture",
+  "onResponderEnd",
+  "onResponderGrant",
+  "onResponderMove",
+  "onResponderReject",
+  "onResponderRelease",
+  "onResponderStart",
+  "onResponderTerminate",
+  "onResponderTerminationRequest",
+  "onScrollShouldSetResponder",
+  "onScrollShouldSetResponderCapture",
+  "onSelectionChangeShouldSetResponder",
+  "onSelectionChangeShouldSetResponderCapture",
+  "onStartShouldSetResponder",
+  "onStartShouldSetResponderCapture",
+  "selectable",
+];
+var forwardPropsList = Object.assign(
+  {},
+  forwardedProps.defaultProps,
+  forwardedProps.accessibilityProps,
+  forwardedProps.clickProps,
+  forwardedProps.focusProps,
+  forwardedProps.keyboardProps,
+  forwardedProps.mouseProps,
+  forwardedProps.touchProps,
+  forwardedProps.styleProps,
+  {
+    href: true,
+    lang: true,
+    pointerEvents: true,
+  }
+);
 
-var pickProps = props => (0, _pick.default)(props, forwardPropsList);
+var pickProps = (props) => (0, _pick.default)(props, forwardPropsList);
 
-var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
+var Text = /*#__PURE__*/ React.forwardRef((props, forwardedRef) => {
   var hrefAttrs = props.hrefAttrs,
-      numberOfLines = props.numberOfLines,
-      onClick = props.onClick,
-      onLayout = props.onLayout,
-      onPress = props.onPress,
-      onMoveShouldSetResponder = props.onMoveShouldSetResponder,
-      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
-      onResponderEnd = props.onResponderEnd,
-      onResponderGrant = props.onResponderGrant,
-      onResponderMove = props.onResponderMove,
-      onResponderReject = props.onResponderReject,
-      onResponderRelease = props.onResponderRelease,
-      onResponderStart = props.onResponderStart,
-      onResponderTerminate = props.onResponderTerminate,
-      onResponderTerminationRequest = props.onResponderTerminationRequest,
-      onScrollShouldSetResponder = props.onScrollShouldSetResponder,
-      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
-      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,
-      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,
-      onStartShouldSetResponder = props.onStartShouldSetResponder,
-      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
-      selectable = props.selectable,
-      rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
+    numberOfLines = props.numberOfLines,
+    onClick = props.onClick,
+    onLayout = props.onLayout,
+    onPress = props.onPress,
+    onMoveShouldSetResponder = props.onMoveShouldSetResponder,
+    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
+    onResponderEnd = props.onResponderEnd,
+    onResponderGrant = props.onResponderGrant,
+    onResponderMove = props.onResponderMove,
+    onResponderReject = props.onResponderReject,
+    onResponderRelease = props.onResponderRelease,
+    onResponderStart = props.onResponderStart,
+    onResponderTerminate = props.onResponderTerminate,
+    onResponderTerminationRequest = props.onResponderTerminationRequest,
+    onScrollShouldSetResponder = props.onScrollShouldSetResponder,
+    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
+    onSelectionChangeShouldSetResponder =
+      props.onSelectionChangeShouldSetResponder,
+    onSelectionChangeShouldSetResponderCapture =
+      props.onSelectionChangeShouldSetResponderCapture,
+    onStartShouldSetResponder = props.onStartShouldSetResponder,
+    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
+    selectable = props.selectable,
+    rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
   var hasTextAncestor = React.useContext(_TextAncestorContext.default);
   var hostRef = React.useRef(null);
 
   var _useLocaleContext = (0, _useLocale.useLocaleContext)(),
-      contextDirection = _useLocaleContext.direction;
+    contextDirection = _useLocaleContext.direction;
 
   (0, _useElementLayout.default)(hostRef, onLayout);
   (0, _useResponderEvents.default)(hostRef, {
@@ -89,42 +143,57 @@ var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
     onSelectionChangeShouldSetResponder,
     onSelectionChangeShouldSetResponderCapture,
     onStartShouldSetResponder,
-    onStartShouldSetResponderCapture
+    onStartShouldSetResponderCapture,
   });
-  var handleClick = React.useCallback(e => {
-    if (onClick != null) {
-      onClick(e);
-    } else if (onPress != null) {
-      e.stopPropagation();
-      onPress(e);
-    }
-  }, [onClick, onPress]);
-  var component = hasTextAncestor ? 'span' : 'div';
-  var langDirection = props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;
+  var handleClick = React.useCallback(
+    (e) => {
+      if (onClick != null) {
+        onClick(e);
+      } else if (onPress != null) {
+        e.stopPropagation();
+        onPress(e);
+      }
+    },
+    [onClick, onPress]
+  );
+  var component = hasTextAncestor ? "span" : "div";
+  var langDirection =
+    props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;
   var componentDirection = props.dir || langDirection;
   var writingDirection = componentDirection || contextDirection;
   var supportedProps = pickProps(rest);
-  supportedProps.dir = componentDirection; // 'auto' by default allows browsers to infer writing direction (root elements only)
+  supportedProps.dir = componentDirection; // 'ltr' by default allows browsers to infer writing direction (root elements only)
 
   if (!hasTextAncestor) {
-    supportedProps.dir = componentDirection != null ? componentDirection : 'auto';
+    supportedProps.dir =
+      componentDirection != null ? componentDirection : "ltr";
   }
 
   if (onClick || onPress) {
     supportedProps.onClick = handleClick;
   }
 
-  supportedProps.style = [numberOfLines != null && numberOfLines > 1 && {
-    WebkitLineClamp: numberOfLines
-  }, hasTextAncestor === true ? styles.textHasAncestor$raw : styles.text$raw, numberOfLines === 1 && styles.textOneLine, numberOfLines != null && numberOfLines > 1 && styles.textMultiLine, props.style, selectable === true && styles.selectable, selectable === false && styles.notSelectable, onPress && styles.pressable];
+  supportedProps.style = [
+    numberOfLines != null &&
+      numberOfLines > 1 && {
+        WebkitLineClamp: numberOfLines,
+      },
+    hasTextAncestor === true ? styles.textHasAncestor$raw : styles.text$raw,
+    numberOfLines === 1 && styles.textOneLine,
+    numberOfLines != null && numberOfLines > 1 && styles.textMultiLine,
+    props.style,
+    selectable === true && styles.selectable,
+    selectable === false && styles.notSelectable,
+    onPress && styles.pressable,
+  ];
 
   if (props.href != null) {
-    component = 'a';
+    component = "a";
 
     if (hrefAttrs != null) {
       var download = hrefAttrs.download,
-          rel = hrefAttrs.rel,
-          target = hrefAttrs.target;
+        rel = hrefAttrs.rel,
+        target = hrefAttrs.target;
 
       if (download != null) {
         supportedProps.download = download;
@@ -134,70 +203,85 @@ var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
         supportedProps.rel = rel;
       }
 
-      if (typeof target === 'string') {
-        supportedProps.target = target.charAt(0) !== '_' ? '_' + target : target;
+      if (typeof target === "string") {
+        supportedProps.target =
+          target.charAt(0) !== "_" ? "_" + target : target;
       }
     }
   }
 
   var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);
-  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, forwardedRef);
+  var setRef = (0, _useMergeRefs.default)(
+    hostRef,
+    platformMethodsRef,
+    forwardedRef
+  );
   supportedProps.ref = setRef;
   var element = (0, _createElement.default)(component, supportedProps, {
-    writingDirection
+    writingDirection,
   });
-  return hasTextAncestor ? element : /*#__PURE__*/React.createElement(_TextAncestorContext.default.Provider, {
-    value: true
-  }, element);
+  return hasTextAncestor
+    ? element
+    : /*#__PURE__*/ React.createElement(
+        _TextAncestorContext.default.Provider,
+        {
+          value: true,
+        },
+        element
+      );
 });
-Text.displayName = 'Text';
+Text.displayName = "Text";
 var textStyle = {
-  backgroundColor: 'transparent',
-  border: '0 solid black',
-  boxSizing: 'border-box',
-  color: 'black',
-  display: 'inline',
-  font: '14px System',
-  listStyle: 'none',
+  backgroundColor: "transparent",
+  border: "0 solid black",
+  boxSizing: "border-box",
+  color: "black",
+  display: "inline",
+  font: "14px System",
+  listStyle: "none",
   margin: 0,
   padding: 0,
-  textAlign: 'inherit',
-  textDecoration: 'none',
-  whiteSpace: 'pre-wrap',
-  wordWrap: 'break-word'
+  textAlign: "inherit",
+  textDecoration: "none",
+  whiteSpace: "pre-wrap",
+  wordWrap: "break-word",
 };
 
 var styles = _StyleSheet.default.create({
   text$raw: textStyle,
-  textHasAncestor$raw: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, textStyle), {}, {
-    color: 'inherit',
-    font: 'inherit',
-    whiteSpace: 'inherit'
-  }),
+  textHasAncestor$raw: (0, _objectSpread2.default)(
+    (0, _objectSpread2.default)({}, textStyle),
+    {},
+    {
+      color: "inherit",
+      font: "inherit",
+      whiteSpace: "inherit",
+    }
+  ),
   textOneLine: {
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    whiteSpace: 'nowrap',
-    wordWrap: 'normal'
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    whiteSpace: "nowrap",
+    wordWrap: "normal",
   },
   // See #13
   textMultiLine: {
-    display: '-webkit-box',
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    WebkitBoxOrient: 'vertical'
+    display: "-webkit-box",
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    WebkitBoxOrient: "vertical",
   },
   notSelectable: {
-    userSelect: 'none'
+    userSelect: "none",
   },
   selectable: {
-    userSelect: 'text'
+    userSelect: "text",
   },
   pressable: {
-    cursor: 'pointer'
-  }
+    cursor: "pointer",
+  },
 });
 
 var _default = Text;
diff --git a/dist/cjs/exports/TextInput/index.js b/dist/cjs/exports/TextInput/index.js
index 0b99520b1c39329b6a0a2733b39cecc44d8f5714..4231d4719cf41d17c83f81c0cbc9d6dc479e515a 100644
--- a/dist/cjs/exports/TextInput/index.js
+++ b/dist/cjs/exports/TextInput/index.js
@@ -1,8 +1,10 @@
 "use strict";
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+var _interopRequireDefault =
+  require("@babel/runtime/helpers/interopRequireDefault").default;
 
-var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
+var _interopRequireWildcard =
+  require("@babel/runtime/helpers/interopRequireWildcard").default;
 
 exports.__esModule = true;
 exports.default = void 0;
@@ -11,25 +13,39 @@ var React = _interopRequireWildcard(require("react"));
 
 var _createElement = _interopRequireDefault(require("../createElement"));
 
-var forwardedProps = _interopRequireWildcard(require("../../modules/forwardedProps"));
+var forwardedProps = _interopRequireWildcard(
+  require("../../modules/forwardedProps")
+);
 
 var _pick = _interopRequireDefault(require("../../modules/pick"));
 
-var _useElementLayout = _interopRequireDefault(require("../../modules/useElementLayout"));
+var _useElementLayout = _interopRequireDefault(
+  require("../../modules/useElementLayout")
+);
 
-var _useLayoutEffect = _interopRequireDefault(require("../../modules/useLayoutEffect"));
+var _useLayoutEffect = _interopRequireDefault(
+  require("../../modules/useLayoutEffect")
+);
 
-var _useMergeRefs = _interopRequireDefault(require("../../modules/useMergeRefs"));
+var _useMergeRefs = _interopRequireDefault(
+  require("../../modules/useMergeRefs")
+);
 
-var _usePlatformMethods = _interopRequireDefault(require("../../modules/usePlatformMethods"));
+var _usePlatformMethods = _interopRequireDefault(
+  require("../../modules/usePlatformMethods")
+);
 
-var _useResponderEvents = _interopRequireDefault(require("../../modules/useResponderEvents"));
+var _useResponderEvents = _interopRequireDefault(
+  require("../../modules/useResponderEvents")
+);
 
 var _useLocale = require("../../modules/useLocale");
 
 var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
 
-var _TextInputState = _interopRequireDefault(require("../../modules/TextInputState"));
+var _TextInputState = _interopRequireDefault(
+  require("../../modules/TextInputState")
+);
 
 /**
  * Copyright (c) Nicolas Gallagher.
@@ -38,7 +54,7 @@ var _TextInputState = _interopRequireDefault(require("../../modules/TextInputSta
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  */
 
 /**
@@ -47,9 +63,9 @@ var _TextInputState = _interopRequireDefault(require("../../modules/TextInputSta
  */
 var isSelectionStale = (node, selection) => {
   var selectionEnd = node.selectionEnd,
-      selectionStart = node.selectionStart;
+    selectionStart = node.selectionStart;
   var start = selection.start,
-      end = selection.end;
+    end = selection.end;
   return start !== selectionStart || end !== selectionEnd;
 };
 /**
@@ -57,11 +73,10 @@ var isSelectionStale = (node, selection) => {
  * error.
  */
 
-
 var setSelection = (node, selection) => {
   if (isSelectionStale(node, selection)) {
     var start = selection.start,
-        end = selection.end;
+      end = selection.end;
 
     try {
       node.setSelectionRange(start, end || start);
@@ -69,165 +84,192 @@ var setSelection = (node, selection) => {
   }
 };
 
-var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {
-  autoCapitalize: true,
-  autoComplete: true,
-  autoCorrect: true,
-  autoFocus: true,
-  defaultValue: true,
-  disabled: true,
-  lang: true,
-  maxLength: true,
-  onChange: true,
-  onScroll: true,
-  placeholder: true,
-  pointerEvents: true,
-  readOnly: true,
-  rows: true,
-  spellCheck: true,
-  value: true,
-  type: true
-});
+var forwardPropsList = Object.assign(
+  {},
+  forwardedProps.defaultProps,
+  forwardedProps.accessibilityProps,
+  forwardedProps.clickProps,
+  forwardedProps.focusProps,
+  forwardedProps.keyboardProps,
+  forwardedProps.mouseProps,
+  forwardedProps.touchProps,
+  forwardedProps.styleProps,
+  {
+    autoCapitalize: true,
+    autoComplete: true,
+    autoCorrect: true,
+    autoFocus: true,
+    defaultValue: true,
+    disabled: true,
+    lang: true,
+    maxLength: true,
+    onChange: true,
+    onScroll: true,
+    placeholder: true,
+    pointerEvents: true,
+    readOnly: true,
+    rows: true,
+    spellCheck: true,
+    value: true,
+    type: true,
+  }
+);
 
-var pickProps = props => (0, _pick.default)(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.
+var pickProps = (props) => (0, _pick.default)(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.
 // https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
 
-
 function isEventComposing(nativeEvent) {
   return nativeEvent.isComposing || nativeEvent.keyCode === 229;
 }
 
 var focusTimeout = null;
-var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
+var TextInput = /*#__PURE__*/ React.forwardRef((props, forwardedRef) => {
   var _props$autoCapitalize = props.autoCapitalize,
-      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,
-      autoComplete = props.autoComplete,
-      autoCompleteType = props.autoCompleteType,
-      _props$autoCorrect = props.autoCorrect,
-      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,
-      blurOnSubmit = props.blurOnSubmit,
-      clearTextOnFocus = props.clearTextOnFocus,
-      dir = props.dir,
-      _props$editable = props.editable,
-      editable = _props$editable === void 0 ? true : _props$editable,
-      _props$keyboardType = props.keyboardType,
-      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,
-      _props$multiline = props.multiline,
-      multiline = _props$multiline === void 0 ? false : _props$multiline,
-      _props$numberOfLines = props.numberOfLines,
-      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,
-      onBlur = props.onBlur,
-      onChange = props.onChange,
-      onChangeText = props.onChangeText,
-      onContentSizeChange = props.onContentSizeChange,
-      onFocus = props.onFocus,
-      onKeyPress = props.onKeyPress,
-      onLayout = props.onLayout,
-      onMoveShouldSetResponder = props.onMoveShouldSetResponder,
-      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
-      onResponderEnd = props.onResponderEnd,
-      onResponderGrant = props.onResponderGrant,
-      onResponderMove = props.onResponderMove,
-      onResponderReject = props.onResponderReject,
-      onResponderRelease = props.onResponderRelease,
-      onResponderStart = props.onResponderStart,
-      onResponderTerminate = props.onResponderTerminate,
-      onResponderTerminationRequest = props.onResponderTerminationRequest,
-      onScrollShouldSetResponder = props.onScrollShouldSetResponder,
-      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
-      onSelectionChange = props.onSelectionChange,
-      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,
-      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,
-      onStartShouldSetResponder = props.onStartShouldSetResponder,
-      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
-      onSubmitEditing = props.onSubmitEditing,
-      placeholderTextColor = props.placeholderTextColor,
-      returnKeyType = props.returnKeyType,
-      _props$secureTextEntr = props.secureTextEntry,
-      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,
-      selection = props.selection,
-      selectTextOnFocus = props.selectTextOnFocus,
-      spellCheck = props.spellCheck;
+    autoCapitalize =
+      _props$autoCapitalize === void 0 ? "sentences" : _props$autoCapitalize,
+    autoComplete = props.autoComplete,
+    autoCompleteType = props.autoCompleteType,
+    _props$autoCorrect = props.autoCorrect,
+    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,
+    blurOnSubmit = props.blurOnSubmit,
+    clearTextOnFocus = props.clearTextOnFocus,
+    dir = props.dir,
+    _props$editable = props.editable,
+    editable = _props$editable === void 0 ? true : _props$editable,
+    _props$keyboardType = props.keyboardType,
+    keyboardType =
+      _props$keyboardType === void 0 ? "default" : _props$keyboardType,
+    _props$multiline = props.multiline,
+    multiline = _props$multiline === void 0 ? false : _props$multiline,
+    _props$numberOfLines = props.numberOfLines,
+    numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,
+    onBlur = props.onBlur,
+    onChange = props.onChange,
+    onChangeText = props.onChangeText,
+    onContentSizeChange = props.onContentSizeChange,
+    onFocus = props.onFocus,
+    onKeyPress = props.onKeyPress,
+    onLayout = props.onLayout,
+    onMoveShouldSetResponder = props.onMoveShouldSetResponder,
+    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
+    onResponderEnd = props.onResponderEnd,
+    onResponderGrant = props.onResponderGrant,
+    onResponderMove = props.onResponderMove,
+    onResponderReject = props.onResponderReject,
+    onResponderRelease = props.onResponderRelease,
+    onResponderStart = props.onResponderStart,
+    onResponderTerminate = props.onResponderTerminate,
+    onResponderTerminationRequest = props.onResponderTerminationRequest,
+    onScrollShouldSetResponder = props.onScrollShouldSetResponder,
+    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
+    onSelectionChange = props.onSelectionChange,
+    onSelectionChangeShouldSetResponder =
+      props.onSelectionChangeShouldSetResponder,
+    onSelectionChangeShouldSetResponderCapture =
+      props.onSelectionChangeShouldSetResponderCapture,
+    onStartShouldSetResponder = props.onStartShouldSetResponder,
+    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
+    onSubmitEditing = props.onSubmitEditing,
+    placeholderTextColor = props.placeholderTextColor,
+    returnKeyType = props.returnKeyType,
+    _props$secureTextEntr = props.secureTextEntry,
+    secureTextEntry =
+      _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,
+    selection = props.selection,
+    selectTextOnFocus = props.selectTextOnFocus,
+    spellCheck = props.spellCheck;
   var type;
   var inputMode;
 
   switch (keyboardType) {
-    case 'email-address':
-      type = 'email';
+    case "email-address":
+      type = "email";
       break;
 
-    case 'number-pad':
-    case 'numeric':
-      inputMode = 'numeric';
+    case "number-pad":
+    case "numeric":
+      inputMode = "numeric";
       break;
 
-    case 'decimal-pad':
-      inputMode = 'decimal';
+    case "decimal-pad":
+      inputMode = "decimal";
       break;
 
-    case 'phone-pad':
-      type = 'tel';
+    case "phone-pad":
+      type = "tel";
       break;
 
-    case 'search':
-    case 'web-search':
-      type = 'search';
+    case "search":
+    case "web-search":
+      type = "search";
       break;
 
-    case 'url':
-      type = 'url';
+    case "url":
+      type = "url";
       break;
 
     default:
-      type = 'text';
+      type = "text";
   }
 
   if (secureTextEntry) {
-    type = 'password';
+    type = "password";
   }
 
   var dimensions = React.useRef({
     height: null,
-    width: null
+    width: null,
   });
   var hostRef = React.useRef(null);
-  var handleContentSizeChange = React.useCallback(hostNode => {
-    if (multiline && onContentSizeChange && hostNode != null) {
-      var newHeight = hostNode.scrollHeight;
-      var newWidth = hostNode.scrollWidth;
-
-      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {
-        dimensions.current.height = newHeight;
-        dimensions.current.width = newWidth;
-        onContentSizeChange({
-          nativeEvent: {
-            contentSize: {
-              height: dimensions.current.height,
-              width: dimensions.current.width
-            }
-          }
-        });
-      }
-    }
-  }, [multiline, onContentSizeChange]);
-  var imperativeRef = React.useMemo(() => hostNode => {
-    // TextInput needs to add more methods to the hostNode in addition to those
-    // added by `usePlatformMethods`. This is temporarily until an API like
-    // `TextInput.clear(hostRef)` is added to React Native.
-    if (hostNode != null) {
-      hostNode.clear = function () {
-        if (hostNode != null) {
-          hostNode.value = '';
+  var handleContentSizeChange = React.useCallback(
+    (hostNode) => {
+      if (multiline && onContentSizeChange && hostNode != null) {
+        var newHeight = hostNode.scrollHeight;
+        var newWidth = hostNode.scrollWidth;
+
+        if (
+          newHeight !== dimensions.current.height ||
+          newWidth !== dimensions.current.width
+        ) {
+          dimensions.current.height = newHeight;
+          dimensions.current.width = newWidth;
+          onContentSizeChange({
+            nativeEvent: {
+              contentSize: {
+                height: dimensions.current.height,
+                width: dimensions.current.width,
+              },
+            },
+          });
         }
-      };
+      }
+    },
+    [multiline, onContentSizeChange]
+  );
+  var imperativeRef = React.useMemo(
+    () => (hostNode) => {
+      // TextInput needs to add more methods to the hostNode in addition to those
+      // added by `usePlatformMethods`. This is temporarily until an API like
+      // `TextInput.clear(hostRef)` is added to React Native.
+      if (hostNode != null) {
+        hostNode.clear = function () {
+          if (hostNode != null) {
+            hostNode.value = "";
+          }
+        };
 
-      hostNode.isFocused = function () {
-        return hostNode != null && _TextInputState.default.currentlyFocusedField() === hostNode;
-      };
+        hostNode.isFocused = function () {
+          return (
+            hostNode != null &&
+            _TextInputState.default.currentlyFocusedField() === hostNode
+          );
+        };
 
-      handleContentSizeChange(hostNode);
-    }
-  }, [handleContentSizeChange]);
+        handleContentSizeChange(hostNode);
+      }
+    },
+    [handleContentSizeChange]
+  );
 
   function handleBlur(e) {
     _TextInputState.default._currentlyFocusedNode = null;
@@ -265,7 +307,7 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       _TextInputState.default._currentlyFocusedNode = hostNode;
 
       if (clearTextOnFocus) {
-        hostNode.value = '';
+        hostNode.value = "";
       }
 
       if (selectTextOnFocus) {
@@ -288,7 +330,8 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
 
     e.stopPropagation();
     var blurOnSubmitDefault = !multiline;
-    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;
+    var shouldBlurOnSubmit =
+      blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;
     var nativeEvent = e.nativeEvent;
     var isComposing = isEventComposing(nativeEvent);
 
@@ -296,8 +339,12 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       onKeyPress(e);
     }
 
-    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.
-    !isComposing && !e.isDefaultPrevented()) {
+    if (
+      e.key === "Enter" &&
+      !e.shiftKey && // Do not call submit if composition is occuring.
+      !isComposing &&
+      !e.isDefaultPrevented()
+    ) {
       if ((blurOnSubmit || !multiline) && onSubmitEditing) {
         // prevent "Enter" from inserting a newline or submitting a form
         e.preventDefault();
@@ -316,10 +363,10 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       try {
         var node = e.target;
         var selectionStart = node.selectionStart,
-            selectionEnd = node.selectionEnd;
+          selectionEnd = node.selectionEnd;
         e.nativeEvent.selection = {
           start: selectionStart,
-          end: selectionEnd
+          end: selectionEnd,
         };
         e.nativeEvent.text = e.target.value;
         onSelectionChange(e);
@@ -338,7 +385,7 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       _TextInputState.default._currentlyFocusedNode = node;
     }
   }, [hostRef, selection]);
-  var component = multiline ? 'textarea' : 'input';
+  var component = multiline ? "textarea" : "input";
   (0, _useElementLayout.default)(hostRef, onLayout);
   (0, _useResponderEvents.default)(hostRef, {
     onMoveShouldSetResponder,
@@ -356,18 +403,18 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
     onSelectionChangeShouldSetResponder,
     onSelectionChangeShouldSetResponderCapture,
     onStartShouldSetResponder,
-    onStartShouldSetResponderCapture
+    onStartShouldSetResponderCapture,
   });
 
   var _useLocaleContext = (0, _useLocale.useLocaleContext)(),
-      contextDirection = _useLocaleContext.direction;
+    contextDirection = _useLocaleContext.direction;
 
   var supportedProps = pickProps(props);
   supportedProps.autoCapitalize = autoCapitalize;
-  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';
-  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction
+  supportedProps.autoComplete = autoComplete || autoCompleteType || "on";
+  supportedProps.autoCorrect = autoCorrect ? "on" : "off"; // 'auto' by default allows browsers to infer writing direction
 
-  supportedProps.dir = dir !== undefined ? dir : 'auto';
+  supportedProps.dir = dir !== undefined ? dir : "ltr";
   supportedProps.enterKeyHint = returnKeyType;
   supportedProps.inputMode = inputMode;
   supportedProps.onBlur = handleBlur;
@@ -378,41 +425,52 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
   supportedProps.readOnly = !editable;
   supportedProps.rows = multiline ? numberOfLines : undefined;
   supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;
-  supportedProps.style = [{
-    '--placeholderTextColor': placeholderTextColor
-  }, styles.textinput$raw, styles.placeholder, props.style];
+  supportedProps.style = [
+    {
+      "--placeholderTextColor": placeholderTextColor,
+    },
+    styles.textinput$raw,
+    styles.placeholder,
+    props.style,
+  ];
   supportedProps.type = multiline ? undefined : type;
   var platformMethodsRef = (0, _usePlatformMethods.default)(supportedProps);
-  var setRef = (0, _useMergeRefs.default)(hostRef, platformMethodsRef, imperativeRef, forwardedRef);
+  var setRef = (0, _useMergeRefs.default)(
+    hostRef,
+    platformMethodsRef,
+    imperativeRef,
+    forwardedRef
+  );
   supportedProps.ref = setRef;
-  var langDirection = props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;
+  var langDirection =
+    props.lang != null ? (0, _useLocale.getLocaleDirection)(props.lang) : null;
   var componentDirection = props.dir || langDirection;
   var writingDirection = componentDirection || contextDirection;
   var element = (0, _createElement.default)(component, supportedProps, {
-    writingDirection
+    writingDirection,
   });
   return element;
 });
-TextInput.displayName = 'TextInput'; // $FlowFixMe
+TextInput.displayName = "TextInput"; // $FlowFixMe
 
 TextInput.State = _TextInputState.default;
 
 var styles = _StyleSheet.default.create({
   textinput$raw: {
-    MozAppearance: 'textfield',
-    WebkitAppearance: 'none',
-    backgroundColor: 'transparent',
-    border: '0 solid black',
+    MozAppearance: "textfield",
+    WebkitAppearance: "none",
+    backgroundColor: "transparent",
+    border: "0 solid black",
     borderRadius: 0,
-    boxSizing: 'border-box',
-    font: '14px System',
+    boxSizing: "border-box",
+    font: "14px System",
     margin: 0,
     padding: 0,
-    resize: 'none'
+    resize: "none",
   },
   placeholder: {
-    placeholderTextColor: 'var(--placeholderTextColor)'
-  }
+    placeholderTextColor: "var(--placeholderTextColor)",
+  },
 });
 
 var _default = TextInput;
diff --git a/dist/cjs/vendor/react-native/VirtualizedList/index.js b/dist/cjs/vendor/react-native/VirtualizedList/index.js
index aab75581a658a8c3ae88f86db99704e0e35e62ac..2f5427f0b77557240112cd24930b46bea38d7873 100644
--- a/dist/cjs/vendor/react-native/VirtualizedList/index.js
+++ b/dist/cjs/vendor/react-native/VirtualizedList/index.js
@@ -1,33 +1,51 @@
 "use strict";
 
-var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
+var _interopRequireWildcard =
+  require("@babel/runtime/helpers/interopRequireWildcard").default;
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+var _interopRequireDefault =
+  require("@babel/runtime/helpers/interopRequireDefault").default;
 
 exports.__esModule = true;
 exports.default = void 0;
 
-var _createForOfIteratorHelperLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/createForOfIteratorHelperLoose"));
+var _createForOfIteratorHelperLoose2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/createForOfIteratorHelperLoose")
+);
 
-var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+var _extends2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/extends")
+);
 
-var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
+var _objectSpread2 = _interopRequireDefault(
+  require("@babel/runtime/helpers/objectSpread2")
+);
 
 var _Batchinator = _interopRequireDefault(require("../Batchinator"));
 
 var _FillRateHelper = _interopRequireDefault(require("../FillRateHelper"));
 
-var _findNodeHandle = _interopRequireDefault(require("../../../exports/findNodeHandle"));
+var _findNodeHandle = _interopRequireDefault(
+  require("../../../exports/findNodeHandle")
+);
 
-var _RefreshControl = _interopRequireDefault(require("../../../exports/RefreshControl"));
+var _RefreshControl = _interopRequireDefault(
+  require("../../../exports/RefreshControl")
+);
 
-var _ScrollView = _interopRequireDefault(require("../../../exports/ScrollView"));
+var _ScrollView = _interopRequireDefault(
+  require("../../../exports/ScrollView")
+);
 
-var _StyleSheet = _interopRequireDefault(require("../../../exports/StyleSheet"));
+var _StyleSheet = _interopRequireDefault(
+  require("../../../exports/StyleSheet")
+);
 
 var _View = _interopRequireDefault(require("../../../exports/View"));
 
-var _ViewabilityHelper = _interopRequireDefault(require("../ViewabilityHelper"));
+var _ViewabilityHelper = _interopRequireDefault(
+  require("../ViewabilityHelper")
+);
 
 var _infoLog = _interopRequireDefault(require("../infoLog"));
 
@@ -45,15 +63,15 @@ var _VirtualizedListContext = require("./VirtualizedListContext.js");
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  * @format
  */
 var flattenStyle = _StyleSheet.default.flatten;
 
-var __DEV__ = process.env.NODE_ENV !== 'production';
+var __DEV__ = process.env.NODE_ENV !== "production";
 
 var _usedIndexForKey = false;
-var _keylessItemComponentName = '';
+var _keylessItemComponentName = "";
 
 /**
  * Default Props Helper Functions
@@ -64,27 +82,30 @@ function horizontalOrDefault(horizontal) {
   return horizontal !== null && horizontal !== void 0 ? horizontal : false;
 } // initialNumToRenderOrDefault(this.props.initialNumToRenderOrDefault)
 
-
 function initialNumToRenderOrDefault(initialNumToRender) {
-  return initialNumToRender !== null && initialNumToRender !== void 0 ? initialNumToRender : 10;
+  return initialNumToRender !== null && initialNumToRender !== void 0
+    ? initialNumToRender
+    : 10;
 } // maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)
 
-
 function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
-  return maxToRenderPerBatch !== null && maxToRenderPerBatch !== void 0 ? maxToRenderPerBatch : 10;
+  return maxToRenderPerBatch !== null && maxToRenderPerBatch !== void 0
+    ? maxToRenderPerBatch
+    : 10;
 } // onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)
 
-
 function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
-  return onEndReachedThreshold !== null && onEndReachedThreshold !== void 0 ? onEndReachedThreshold : 2;
+  return onEndReachedThreshold !== null && onEndReachedThreshold !== void 0
+    ? onEndReachedThreshold
+    : 2;
 } // scrollEventThrottleOrDefault(this.props.scrollEventThrottle)
 
-
 function scrollEventThrottleOrDefault(scrollEventThrottle) {
-  return scrollEventThrottle !== null && scrollEventThrottle !== void 0 ? scrollEventThrottle : 50;
+  return scrollEventThrottle !== null && scrollEventThrottle !== void 0
+    ? scrollEventThrottle
+    : 50;
 } // windowSizeOrDefault(this.props.windowSize)
 
-
 function windowSizeOrDefault(windowSize) {
   return windowSize !== null && windowSize !== void 0 ? windowSize : 21;
 }
@@ -118,7 +139,6 @@ function windowSizeOrDefault(windowSize) {
  *
  */
 
-
 class VirtualizedList extends React.PureComponent {
   // scrollToEnd may be janky without getItemLayout prop
   scrollToEnd(params) {
@@ -127,89 +147,141 @@ class VirtualizedList extends React.PureComponent {
 
     var frame = this._getFrameMetricsApprox(veryLast);
 
-    var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
+    var offset = Math.max(
+      0,
+      frame.offset +
+        frame.length +
+        this._footerLength -
+        this._scrollMetrics.visibleLength
+    );
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontalOrDefault(this.props.horizontal)
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   } // scrollToIndex may be janky without getItemLayout prop
 
-
   scrollToIndex(params) {
     var _this$props = this.props,
-        data = _this$props.data,
-        horizontal = _this$props.horizontal,
-        getItemCount = _this$props.getItemCount,
-        getItemLayout = _this$props.getItemLayout,
-        onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
+      data = _this$props.data,
+      horizontal = _this$props.horizontal,
+      getItemCount = _this$props.getItemCount,
+      getItemLayout = _this$props.getItemLayout,
+      onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
     var animated = params.animated,
-        index = params.index,
-        viewOffset = params.viewOffset,
-        viewPosition = params.viewPosition;
-    (0, _invariant.default)(index >= 0, "scrollToIndex out of range: requested index " + index + " but minimum is 0");
-    (0, _invariant.default)(getItemCount(data) >= 1, "scrollToIndex out of range: item length " + getItemCount(data) + " but minimum is 1");
-    (0, _invariant.default)(index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " is out of 0 to " + (getItemCount(data) - 1));
+      index = params.index,
+      viewOffset = params.viewOffset,
+      viewPosition = params.viewPosition;
+    (0, _invariant.default)(
+      index >= 0,
+      "scrollToIndex out of range: requested index " +
+        index +
+        " but minimum is 0"
+    );
+    (0, _invariant.default)(
+      getItemCount(data) >= 1,
+      "scrollToIndex out of range: item length " +
+        getItemCount(data) +
+        " but minimum is 1"
+    );
+    (0, _invariant.default)(
+      index < getItemCount(data),
+      "scrollToIndex out of range: requested index " +
+        index +
+        " is out of 0 to " +
+        (getItemCount(data) - 1)
+    );
 
     if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
-      (0, _invariant.default)(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
+      (0, _invariant.default)(
+        !!onScrollToIndexFailed,
+        "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, " +
+          "otherwise there is no way to know the location of offscreen indices or handle failures."
+      );
       onScrollToIndexFailed({
         averageItemLength: this._averageCellLength,
         highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
-        index
+        index,
       });
       return;
     }
 
     var frame = this._getFrameMetricsApprox(index);
 
-    var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
+    var offset =
+      Math.max(
+        0,
+        frame.offset -
+          (viewPosition || 0) *
+            (this._scrollMetrics.visibleLength - frame.length)
+      ) - (viewOffset || 0);
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontal ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontal
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   } // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -
   // use scrollToIndex instead if possible.
 
-
   scrollToItem(params) {
     var item = params.item;
     var _this$props2 = this.props,
-        data = _this$props2.data,
-        getItem = _this$props2.getItem,
-        getItemCount = _this$props2.getItemCount;
+      data = _this$props2.data,
+      getItem = _this$props2.getItem,
+      getItemCount = _this$props2.getItemCount;
     var itemCount = getItemCount(data);
 
     for (var _index = 0; _index < itemCount; _index++) {
       if (getItem(data, _index) === item) {
-        this.scrollToIndex((0, _objectSpread2.default)((0, _objectSpread2.default)({}, params), {}, {
-          index: _index
-        }));
+        this.scrollToIndex(
+          (0, _objectSpread2.default)(
+            (0, _objectSpread2.default)({}, params),
+            {},
+            {
+              index: _index,
+            }
+          )
+        );
         break;
       }
     }
@@ -225,35 +297,42 @@ class VirtualizedList extends React.PureComponent {
    * should do an animation while scrolling.
    */
 
-
   scrollToOffset(params) {
     var animated = params.animated,
-        offset = params.offset;
+      offset = params.offset;
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontalOrDefault(this.props.horizontal)
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   }
 
   recordInteraction() {
-    this._nestedChildLists.forEach(childList => {
+    this._nestedChildLists.forEach((childList) => {
       childList.ref && childList.ref.recordInteraction();
     });
 
-    this._viewabilityTuples.forEach(t => {
+    this._viewabilityTuples.forEach((t) => {
       t.viewabilityHelper.recordInteraction();
     });
 
@@ -273,7 +352,6 @@ class VirtualizedList extends React.PureComponent {
    * need to check that it responds to `getScrollResponder` before calling it.
    */
 
-
   getScrollResponder() {
     if (this._scrollRef && this._scrollRef.getScrollResponder) {
       return this._scrollRef.getScrollResponder();
@@ -305,7 +383,11 @@ class VirtualizedList extends React.PureComponent {
   _getCellKey() {
     var _this$context;
 
-    return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
+    return (
+      ((_this$context = this.context) == null
+        ? void 0
+        : _this$context.cellKey) || "rootList"
+    );
   }
 
   _getListKey() {
@@ -319,7 +401,10 @@ class VirtualizedList extends React.PureComponent {
       listKey: this._getListKey(),
       cellKey: this._getCellKey(),
       horizontal: horizontalOrDefault(this.props.horizontal),
-      parent: (_this$context2 = this.context) == null ? void 0 : _this$context2.debugInfo
+      parent:
+        (_this$context2 = this.context) == null
+          ? void 0
+          : _this$context2.debugInfo,
     };
   }
 
@@ -344,15 +429,16 @@ class VirtualizedList extends React.PureComponent {
       }
     };
 
-    this._getNestedChildState = key => {
+    this._getNestedChildState = (key) => {
       var existingChildData = this._nestedChildLists.get(key);
 
       return existingChildData && existingChildData.state;
     };
 
-    this._registerAsNestedChild = childList => {
+    this._registerAsNestedChild = (childList) => {
       // Register the mapping between this child key and the cellKey for its cell
-      var childListsInCell = this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
+      var childListsInCell =
+        this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
       childListsInCell.add(childList.key);
 
       this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);
@@ -360,16 +446,27 @@ class VirtualizedList extends React.PureComponent {
       var existingChildData = this._nestedChildLists.get(childList.key);
 
       if (existingChildData && existingChildData.ref !== null) {
-        console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists((0, _objectSpread2.default)((0, _objectSpread2.default)({}, childList), {}, {
-          // We're called from the child's componentDidMount, so it's safe to
-          // read the child's props here (albeit weird).
-          horizontal: !!childList.ref.props.horizontal
-        })));
+        console.error(
+          "A VirtualizedList contains a cell which itself contains " +
+            "more than one VirtualizedList of the same orientation as the parent " +
+            "list. You must pass a unique listKey prop to each sibling list.\n\n" +
+            describeNestedLists(
+              (0, _objectSpread2.default)(
+                (0, _objectSpread2.default)({}, childList),
+                {},
+                {
+                  // We're called from the child's componentDidMount, so it's safe to
+                  // read the child's props here (albeit weird).
+                  horizontal: !!childList.ref.props.horizontal,
+                }
+              )
+            )
+        );
       }
 
       this._nestedChildLists.set(childList.key, {
         ref: childList.ref,
-        state: null
+        state: null,
       });
 
       if (this._hasInteracted) {
@@ -377,21 +474,21 @@ class VirtualizedList extends React.PureComponent {
       }
     };
 
-    this._unregisterAsNestedChild = childList => {
+    this._unregisterAsNestedChild = (childList) => {
       this._nestedChildLists.set(childList.key, {
         ref: null,
-        state: childList.state
+        state: childList.state,
       });
     };
 
     this._onUpdateSeparators = (keys, newProps) => {
-      keys.forEach(key => {
+      keys.forEach((key) => {
         var ref = key != null && this._cellRefs[key];
         ref && ref.updateSeparatorProps(newProps);
       });
     };
 
-    this._getSpacerKey = isVertical => isVertical ? 'height' : 'width';
+    this._getSpacerKey = (isVertical) => (isVertical ? "height" : "width");
 
     this._averageCellLength = 0;
     this._cellKeysToChildListKeys = new Map();
@@ -416,7 +513,7 @@ class VirtualizedList extends React.PureComponent {
       offset: 0,
       timestamp: 0,
       velocity: 0,
-      visibleLength: 0
+      visibleLength: 0,
     };
     this._scrollRef = null;
     this._sentEndForContentLength = 0;
@@ -424,54 +521,76 @@ class VirtualizedList extends React.PureComponent {
     this._totalCellsMeasured = 0;
     this._viewabilityTuples = [];
 
-    this._captureScrollRef = ref => {
+    this._captureScrollRef = (ref) => {
       this._scrollRef = ref;
     };
 
-    this._defaultRenderScrollComponent = props => {
+    this._defaultRenderScrollComponent = (props) => {
       var onRefresh = props.onRefresh;
 
       if (this._isNestedWithSameOrientation()) {
         // $FlowFixMe[prop-missing] - Typing ReactNativeComponent revealed errors
-        return /*#__PURE__*/React.createElement(_View.default, props);
+        return /*#__PURE__*/ React.createElement(_View.default, props);
       } else if (onRefresh) {
         var _props$refreshing;
 
-        (0, _invariant.default)(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) !== null && _props$refreshing !== void 0 ? _props$refreshing : 'undefined') + '`');
+        (0, _invariant.default)(
+          typeof props.refreshing === "boolean",
+          "`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `" +
+            JSON.stringify(
+              (_props$refreshing = props.refreshing) !== null &&
+                _props$refreshing !== void 0
+                ? _props$refreshing
+                : "undefined"
+            ) +
+            "`"
+        );
         return (
           /*#__PURE__*/
           // $FlowFixMe[prop-missing] Invalid prop usage
-          React.createElement(_ScrollView.default, (0, _extends2.default)({}, props, {
-            refreshControl: props.refreshControl == null ? /*#__PURE__*/React.createElement(_RefreshControl.default, {
-              refreshing: props.refreshing,
-              onRefresh: onRefresh,
-              progressViewOffset: props.progressViewOffset
-            }) : props.refreshControl
-          }))
+          React.createElement(
+            _ScrollView.default,
+            (0, _extends2.default)({}, props, {
+              refreshControl:
+                props.refreshControl == null
+                  ? /*#__PURE__*/ React.createElement(_RefreshControl.default, {
+                      refreshing: props.refreshing,
+                      onRefresh: onRefresh,
+                      progressViewOffset: props.progressViewOffset,
+                    })
+                  : props.refreshControl,
+            })
+          )
         );
       } else {
         // $FlowFixMe[prop-missing] Invalid prop usage
-        return /*#__PURE__*/React.createElement(_ScrollView.default, props);
+        return /*#__PURE__*/ React.createElement(_ScrollView.default, props);
       }
     };
 
-    this._onCellUnmount = cellKey => {
+    this._onCellUnmount = (cellKey) => {
       var curr = this._frames[cellKey];
 
       if (curr) {
-        this._frames[cellKey] = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, curr), {}, {
-          inLayout: false
-        });
+        this._frames[cellKey] = (0, _objectSpread2.default)(
+          (0, _objectSpread2.default)({}, curr),
+          {},
+          {
+            inLayout: false,
+          }
+        );
       }
     };
 
-    this._onLayout = e => {
+    this._onLayout = (e) => {
       if (this._isNestedWithSameOrientation()) {
         // Need to adjust our scroll metrics to be relative to our containing
         // VirtualizedList before we can make claims about list item viewability
         this.measureLayoutRelativeToContainingList();
       } else {
-        this._scrollMetrics.visibleLength = this._selectLength(e.nativeEvent.layout);
+        this._scrollMetrics.visibleLength = this._selectLength(
+          e.nativeEvent.layout
+        );
       }
 
       this.props.onLayout && this.props.onLayout(e);
@@ -481,26 +600,32 @@ class VirtualizedList extends React.PureComponent {
       this._maybeCallOnEndReached();
     };
 
-    this._onLayoutEmpty = e => {
+    this._onLayoutEmpty = (e) => {
       this.props.onLayout && this.props.onLayout(e);
     };
 
-    this._onLayoutFooter = e => {
+    this._onLayoutFooter = (e) => {
       this._triggerRemeasureForChildListsInCell(this._getFooterCellKey());
 
       this._footerLength = this._selectLength(e.nativeEvent.layout);
     };
 
-    this._onLayoutHeader = e => {
+    this._onLayoutHeader = (e) => {
       this._headerLength = this._selectLength(e.nativeEvent.layout);
     };
 
     this._onContentSizeChange = (width, height) => {
-      if (width > 0 && height > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasDoneInitialScroll) {
+      if (
+        width > 0 &&
+        height > 0 &&
+        this.props.initialScrollIndex != null &&
+        this.props.initialScrollIndex > 0 &&
+        !this._hasDoneInitialScroll
+      ) {
         if (this.props.contentOffset == null) {
           this.scrollToIndex({
             animated: false,
-            index: this.props.initialScrollIndex
+            index: this.props.initialScrollIndex,
           });
         }
 
@@ -513,7 +638,7 @@ class VirtualizedList extends React.PureComponent {
 
       this._scrollMetrics.contentLength = this._selectLength({
         height,
-        width
+        width,
       });
 
       this._scheduleCellsToRenderUpdate();
@@ -521,7 +646,7 @@ class VirtualizedList extends React.PureComponent {
       this._maybeCallOnEndReached();
     };
 
-    this._convertParentScrollMetrics = metrics => {
+    this._convertParentScrollMetrics = (metrics) => {
       // Offset of the top of the nested list relative to the top of its parent's viewport
       var offset = metrics.offset - this._offsetFromParentVirtualizedList; // Child's visible length is the same as its parent's
 
@@ -532,12 +657,12 @@ class VirtualizedList extends React.PureComponent {
         visibleLength,
         contentLength,
         offset,
-        dOffset
+        dOffset,
       };
     };
 
-    this._onScroll = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScroll = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScroll(e);
       });
 
@@ -564,7 +689,7 @@ class VirtualizedList extends React.PureComponent {
 
         var _this$_convertParentS = this._convertParentScrollMetrics({
           visibleLength,
-          offset
+          offset,
         });
 
         visibleLength = _this$_convertParentS.visibleLength;
@@ -573,15 +698,27 @@ class VirtualizedList extends React.PureComponent {
         dOffset = _this$_convertParentS.dOffset;
       }
 
-      var dt = this._scrollMetrics.timestamp ? Math.max(1, timestamp - this._scrollMetrics.timestamp) : 1;
+      var dt = this._scrollMetrics.timestamp
+        ? Math.max(1, timestamp - this._scrollMetrics.timestamp)
+        : 1;
       var velocity = dOffset / dt;
 
-      if (dt > 500 && this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !this._hasWarned.perf) {
-        (0, _infoLog.default)('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
-          dt,
-          prevDt: this._scrollMetrics.dt,
-          contentLength
-        });
+      if (
+        dt > 500 &&
+        this._scrollMetrics.dt > 500 &&
+        contentLength > 5 * visibleLength &&
+        !this._hasWarned.perf
+      ) {
+        (0, _infoLog.default)(
+          "VirtualizedList: You have a large list that is slow to update - make sure your " +
+            "renderItem function renders components that follow React performance best practices " +
+            "like PureComponent, shouldComponentUpdate, etc.",
+          {
+            dt,
+            prevDt: this._scrollMetrics.dt,
+            contentLength,
+          }
+        );
         this._hasWarned.perf = true;
       }
 
@@ -592,7 +729,7 @@ class VirtualizedList extends React.PureComponent {
         offset,
         timestamp,
         velocity,
-        visibleLength
+        visibleLength,
       };
 
       this._updateViewableItems(this.props.data);
@@ -612,12 +749,12 @@ class VirtualizedList extends React.PureComponent {
       this._scheduleCellsToRenderUpdate();
     };
 
-    this._onScrollBeginDrag = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScrollBeginDrag = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScrollBeginDrag(e);
       });
 
-      this._viewabilityTuples.forEach(tuple => {
+      this._viewabilityTuples.forEach((tuple) => {
         tuple.viewabilityHelper.recordInteraction();
       });
 
@@ -625,8 +762,8 @@ class VirtualizedList extends React.PureComponent {
       this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
     };
 
-    this._onScrollEndDrag = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScrollEndDrag = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScrollEndDrag(e);
       });
 
@@ -641,16 +778,16 @@ class VirtualizedList extends React.PureComponent {
       this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
     };
 
-    this._onMomentumScrollBegin = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onMomentumScrollBegin = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onMomentumScrollBegin(e);
       });
 
       this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
     };
 
-    this._onMomentumScrollEnd = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onMomentumScrollEnd = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onMomentumScrollEnd(e);
       });
 
@@ -663,10 +800,12 @@ class VirtualizedList extends React.PureComponent {
 
     this._updateCellsToRender = () => {
       var _this$props3 = this.props,
-          data = _this$props3.data,
-          getItemCount = _this$props3.getItemCount,
-          _onEndReachedThreshold = _this$props3.onEndReachedThreshold;
-      var onEndReachedThreshold = onEndReachedThresholdOrDefault(_onEndReachedThreshold);
+        data = _this$props3.data,
+        getItemCount = _this$props3.getItemCount,
+        _onEndReachedThreshold = _this$props3.onEndReachedThreshold;
+      var onEndReachedThreshold = onEndReachedThresholdOrDefault(
+        _onEndReachedThreshold
+      );
 
       var isVirtualizationDisabled = this._isVirtualizationDisabled();
 
@@ -676,12 +815,12 @@ class VirtualizedList extends React.PureComponent {
         return;
       }
 
-      this.setState(state => {
+      this.setState((state) => {
         var newState;
         var _this$_scrollMetrics = this._scrollMetrics,
-            contentLength = _this$_scrollMetrics.contentLength,
-            offset = _this$_scrollMetrics.offset,
-            visibleLength = _this$_scrollMetrics.visibleLength;
+          contentLength = _this$_scrollMetrics.contentLength,
+          offset = _this$_scrollMetrics.offset,
+          visibleLength = _this$_scrollMetrics.visibleLength;
 
         if (!isVirtualizationDisabled) {
           // If we run this with bogus data, we'll force-render window {first: 0, last: 0},
@@ -694,15 +833,26 @@ class VirtualizedList extends React.PureComponent {
             // So let's wait until we've scrolled the view to the right place. And until then,
             // we will trust the initialScrollIndex suggestion.
             if (!this.props.initialScrollIndex || this._scrollMetrics.offset) {
-              newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(this.props.data, this.props.getItemCount, maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch), windowSizeOrDefault(this.props.windowSize), state, this._getFrameMetricsApprox, this._scrollMetrics);
+              newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(
+                this.props.data,
+                this.props.getItemCount,
+                maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch),
+                windowSizeOrDefault(this.props.windowSize),
+                state,
+                this._getFrameMetricsApprox,
+                this._scrollMetrics
+              );
             }
           }
         } else {
           var distanceFromEnd = contentLength - visibleLength - offset;
-          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch) : 0;
+          var renderAhead =
+            distanceFromEnd < onEndReachedThreshold * visibleLength
+              ? maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)
+              : 0;
           newState = {
             first: 0,
-            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
+            last: Math.min(state.last + renderAhead, getItemCount(data) - 1),
           };
         }
 
@@ -716,7 +866,9 @@ class VirtualizedList extends React.PureComponent {
           for (var ii = newFirst; ii <= newLast; ii++) {
             var cellKeyForIndex = this._indicesToKeys.get(ii);
 
-            var childListKeys = cellKeyForIndex && this._cellKeysToChildListKeys.get(cellKeyForIndex);
+            var childListKeys =
+              cellKeyForIndex &&
+              this._cellKeysToChildListKeys.get(cellKeyForIndex);
 
             if (!childListKeys) {
               continue;
@@ -724,7 +876,14 @@ class VirtualizedList extends React.PureComponent {
 
             var someChildHasMore = false; // For each cell, need to check whether any child list in it has more elements to render
 
-            for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(childListKeys), _step; !(_step = _iterator()).done;) {
+            for (
+              var _iterator = (0, _createForOfIteratorHelperLoose2.default)(
+                  childListKeys
+                ),
+                _step;
+              !(_step = _iterator()).done;
+
+            ) {
               var childKey = _step.value;
 
               var childList = this._nestedChildLists.get(childKey);
@@ -743,7 +902,11 @@ class VirtualizedList extends React.PureComponent {
           }
         }
 
-        if (newState != null && newState.first === state.first && newState.last === state.last) {
+        if (
+          newState != null &&
+          newState.first === state.first &&
+          newState.last === state.last
+        ) {
           newState = null;
         }
 
@@ -753,18 +916,18 @@ class VirtualizedList extends React.PureComponent {
 
     this._createViewToken = (index, isViewable) => {
       var _this$props4 = this.props,
-          data = _this$props4.data,
-          getItem = _this$props4.getItem;
+        data = _this$props4.data,
+        getItem = _this$props4.getItem;
       var item = getItem(data, index);
       return {
         index,
         item,
         key: this._keyExtractor(item, index),
-        isViewable
+        isViewable,
       };
     };
 
-    this._getFrameMetricsApprox = index => {
+    this._getFrameMetricsApprox = (index) => {
       var frame = this._getFrameMetrics(index);
 
       if (frame && frame.index === index) {
@@ -772,21 +935,27 @@ class VirtualizedList extends React.PureComponent {
         return frame;
       } else {
         var getItemLayout = this.props.getItemLayout;
-        (0, _invariant.default)(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
+        (0, _invariant.default)(
+          !getItemLayout,
+          "Should not have to estimate frames when a measurement metrics function is provided"
+        );
         return {
           length: this._averageCellLength,
-          offset: this._averageCellLength * index
+          offset: this._averageCellLength * index,
         };
       }
     };
 
-    this._getFrameMetrics = index => {
+    this._getFrameMetrics = (index) => {
       var _this$props5 = this.props,
-          data = _this$props5.data,
-          getItem = _this$props5.getItem,
-          getItemCount = _this$props5.getItemCount,
-          getItemLayout = _this$props5.getItemLayout;
-      (0, _invariant.default)(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
+        data = _this$props5.data,
+        getItem = _this$props5.getItem,
+        getItemCount = _this$props5.getItemCount,
+        getItemLayout = _this$props5.getItemLayout;
+      (0, _invariant.default)(
+        getItemCount(data) > index,
+        "Tried to get frame for out of range index " + index
+      );
       var item = getItem(data, index);
 
       var frame = item && this._frames[this._keyExtractor(item, index)];
@@ -800,32 +969,55 @@ class VirtualizedList extends React.PureComponent {
        * suppresses an error found when Flow v0.63 was deployed. To see the error
        * delete this comment and run Flow. */
 
-
       return frame;
     };
 
-    (0, _invariant.default)( // $FlowFixMe[prop-missing]
-    !_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
-    (0, _invariant.default)(windowSizeOrDefault(_props.windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
+    (0, _invariant.default)(
+      // $FlowFixMe[prop-missing]
+      !_props.onScroll || !_props.onScroll.__isNative,
+      "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent " +
+        "to support native onScroll events with useNativeDriver"
+    );
+    (0, _invariant.default)(
+      windowSizeOrDefault(_props.windowSize) > 0,
+      "VirtualizedList: The windowSize prop must be present and set to a value greater than 0."
+    );
     this._fillRateHelper = new _FillRateHelper.default(this._getFrameMetrics);
-    this._updateCellsToRenderBatcher = new _Batchinator.default(this._updateCellsToRender, (_this$props$updateCel = this.props.updateCellsBatchingPeriod) !== null && _this$props$updateCel !== void 0 ? _this$props$updateCel : 50);
+    this._updateCellsToRenderBatcher = new _Batchinator.default(
+      this._updateCellsToRender,
+      (_this$props$updateCel = this.props.updateCellsBatchingPeriod) !== null &&
+      _this$props$updateCel !== void 0
+        ? _this$props$updateCel
+        : 50
+    );
 
     if (this.props.viewabilityConfigCallbackPairs) {
-      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(pair => ({
-        viewabilityHelper: new _ViewabilityHelper.default(pair.viewabilityConfig),
-        onViewableItemsChanged: pair.onViewableItemsChanged
-      }));
+      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(
+        (pair) => ({
+          viewabilityHelper: new _ViewabilityHelper.default(
+            pair.viewabilityConfig
+          ),
+          onViewableItemsChanged: pair.onViewableItemsChanged,
+        })
+      );
     } else if (this.props.onViewableItemsChanged) {
       this._viewabilityTuples.push({
-        viewabilityHelper: new _ViewabilityHelper.default(this.props.viewabilityConfig),
+        viewabilityHelper: new _ViewabilityHelper.default(
+          this.props.viewabilityConfig
+        ),
         // $FlowFixMe[incompatible-call]
-        onViewableItemsChanged: this.props.onViewableItemsChanged
+        onViewableItemsChanged: this.props.onViewableItemsChanged,
       });
     }
 
     var initialState = {
       first: this.props.initialScrollIndex || 0,
-      last: Math.min(this.props.getItemCount(this.props.data), (this.props.initialScrollIndex || 0) + initialNumToRenderOrDefault(this.props.initialNumToRender)) - 1
+      last:
+        Math.min(
+          this.props.getItemCount(this.props.data),
+          (this.props.initialScrollIndex || 0) +
+            initialNumToRenderOrDefault(this.props.initialNumToRender)
+        ) - 1,
     };
 
     if (this._isNestedWithSameOrientation()) {
@@ -839,9 +1031,12 @@ class VirtualizedList extends React.PureComponent {
     } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
     // For issue https://github.com/necolas/react-native-web/issues/995
 
-
-    this.invertedWheelEventHandler = ev => {
-      if (this.props.inverted && this._scrollRef && this._scrollRef.getScrollableNode) {
+    this.invertedWheelEventHandler = (ev) => {
+      if (
+        this.props.inverted &&
+        this._scrollRef &&
+        this._scrollRef.getScrollableNode
+      ) {
         var node = this._scrollRef.getScrollableNode();
 
         if (this.props.horizontal) {
@@ -867,11 +1062,10 @@ class VirtualizedList extends React.PureComponent {
         // the parent's props. This is why we explicitly propagate debugInfo
         // "down" via context and "up" again via this method call on the
         // parent.
-        parentDebugInfo: this.context.debugInfo
+        parentDebugInfo: this.context.debugInfo,
       });
     } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
     this.setupWebWheelHandler();
   }
 
@@ -882,66 +1076,79 @@ class VirtualizedList extends React.PureComponent {
         state: {
           first: this.state.first,
           last: this.state.last,
-          frames: this._frames
-        }
+          frames: this._frames,
+        },
       });
     }
 
     this._updateViewableItems(null);
 
     this._updateCellsToRenderBatcher.dispose({
-      abort: true
+      abort: true,
     });
 
-    this._viewabilityTuples.forEach(tuple => {
+    this._viewabilityTuples.forEach((tuple) => {
       tuple.viewabilityHelper.dispose();
     });
 
     this._fillRateHelper.deactivateAndFlush(); // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
     this.teardownWebWheelHandler();
   } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
   setupWebWheelHandler() {
     if (this._scrollRef && this._scrollRef.getScrollableNode) {
-      this._scrollRef.getScrollableNode().addEventListener('wheel', this.invertedWheelEventHandler);
+      this._scrollRef
+        .getScrollableNode()
+        .addEventListener("wheel", this.invertedWheelEventHandler);
     } else {
       setTimeout(() => this.setupWebWheelHandler(), 50);
       return;
     }
   } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
   teardownWebWheelHandler() {
     if (this._scrollRef && this._scrollRef.getScrollableNode) {
-      this._scrollRef.getScrollableNode().removeEventListener('wheel', this.invertedWheelEventHandler);
+      this._scrollRef
+        .getScrollableNode()
+        .removeEventListener("wheel", this.invertedWheelEventHandler);
     }
   }
 
   static getDerivedStateFromProps(newProps, prevState) {
     var data = newProps.data,
-        getItemCount = newProps.getItemCount;
-    var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(newProps.maxToRenderPerBatch); // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
+      getItemCount = newProps.getItemCount;
+    var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(
+      newProps.maxToRenderPerBatch
+    ); // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
     // sure we're rendering a reasonable range here.
 
     return {
-      first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
-      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
+      first: Math.max(
+        0,
+        Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)
+      ),
+      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1)),
     };
   }
 
-  _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
+  _pushCells(
+    cells,
+    stickyHeaderIndices,
+    stickyIndicesFromProps,
+    first,
+    last,
+    inversionStyle
+  ) {
     var _this = this;
 
     var _this$props6 = this.props,
-        CellRendererComponent = _this$props6.CellRendererComponent,
-        ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
-        data = _this$props6.data,
-        getItem = _this$props6.getItem,
-        getItemCount = _this$props6.getItemCount,
-        horizontal = _this$props6.horizontal;
+      CellRendererComponent = _this$props6.CellRendererComponent,
+      ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
+      data = _this$props6.data,
+      getItem = _this$props6.getItem,
+      getItemCount = _this$props6.getItemCount,
+      horizontal = _this$props6.horizontal;
     var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
     var end = getItemCount(data) - 1;
     var prevCellKey;
@@ -958,25 +1165,27 @@ class VirtualizedList extends React.PureComponent {
         stickyHeaderIndices.push(cells.length);
       }
 
-      cells.push( /*#__PURE__*/React.createElement(CellRenderer, {
-        CellRendererComponent: CellRendererComponent,
-        ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
-        cellKey: key,
-        fillRateHelper: _this._fillRateHelper,
-        horizontal: horizontal,
-        index: ii,
-        inversionStyle: inversionStyle,
-        item: item,
-        key: key,
-        prevCellKey: prevCellKey,
-        onUpdateSeparators: _this._onUpdateSeparators,
-        onLayout: e => _this._onCellLayout(e, key, ii),
-        onUnmount: _this._onCellUnmount,
-        parentProps: _this.props,
-        ref: _ref => {
-          _this._cellRefs[key] = _ref;
-        }
-      }));
+      cells.push(
+        /*#__PURE__*/ React.createElement(CellRenderer, {
+          CellRendererComponent: CellRendererComponent,
+          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
+          cellKey: key,
+          fillRateHelper: _this._fillRateHelper,
+          horizontal: horizontal,
+          index: ii,
+          inversionStyle: inversionStyle,
+          item: item,
+          key: key,
+          prevCellKey: prevCellKey,
+          onUpdateSeparators: _this._onUpdateSeparators,
+          onLayout: (e) => _this._onCellLayout(e, key, ii),
+          onUnmount: _this._onCellUnmount,
+          parentProps: _this.props,
+          ref: (_ref) => {
+            _this._cellRefs[key] = _ref;
+          },
+        })
+      );
       prevCellKey = key;
     };
 
@@ -991,7 +1200,10 @@ class VirtualizedList extends React.PureComponent {
 
   _isNestedWithSameOrientation() {
     var nestedContext = this.context;
-    return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
+    return !!(
+      nestedContext &&
+      !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal)
+    );
   }
 
   _keyExtractor(item, index) {
@@ -1016,22 +1228,29 @@ class VirtualizedList extends React.PureComponent {
     if (__DEV__) {
       var flatStyles = flattenStyle(this.props.contentContainerStyle);
 
-      if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
-        console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
+      if (flatStyles != null && flatStyles.flexWrap === "wrap") {
+        console.warn(
+          "`flexWrap: `wrap`` is not supported with the `VirtualizedList` components." +
+            "Consider using `numColumns` with `FlatList` instead."
+        );
       }
     }
 
     var _this$props7 = this.props,
-        ListEmptyComponent = _this$props7.ListEmptyComponent,
-        ListFooterComponent = _this$props7.ListFooterComponent,
-        ListHeaderComponent = _this$props7.ListHeaderComponent;
+      ListEmptyComponent = _this$props7.ListEmptyComponent,
+      ListFooterComponent = _this$props7.ListFooterComponent,
+      ListHeaderComponent = _this$props7.ListHeaderComponent;
     var _this$props8 = this.props,
-        data = _this$props8.data,
-        horizontal = _this$props8.horizontal;
+      data = _this$props8.data,
+      horizontal = _this$props8.horizontal;
 
     var isVirtualizationDisabled = this._isVirtualizationDisabled();
 
-    var inversionStyle = this.props.inverted ? horizontalOrDefault(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
+    var inversionStyle = this.props.inverted
+      ? horizontalOrDefault(this.props.horizontal)
+        ? styles.horizontallyInverted
+        : styles.verticallyInverted
+      : null;
     var cells = [];
     var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
     var stickyHeaderIndices = [];
@@ -1041,35 +1260,57 @@ class VirtualizedList extends React.PureComponent {
         stickyHeaderIndices.push(0);
       }
 
-      var element = /*#__PURE__*/React.isValidElement(ListHeaderComponent) ? ListHeaderComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListHeaderComponent, null);
-      cells.push( /*#__PURE__*/React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
-        cellKey: this._getCellKey() + '-header',
-        key: "$header"
-      }, /*#__PURE__*/React.createElement(_View.default, {
-        onLayout: this._onLayoutHeader,
-        style: _StyleSheet.default.compose(inversionStyle, this.props.ListHeaderComponentStyle)
-      }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
-      element)));
+      var element = /*#__PURE__*/ React.isValidElement(ListHeaderComponent)
+        ? ListHeaderComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListHeaderComponent, null);
+      cells.push(
+        /*#__PURE__*/ React.createElement(
+          _VirtualizedListContext.VirtualizedListCellContextProvider,
+          {
+            cellKey: this._getCellKey() + "-header",
+            key: "$header",
+          },
+          /*#__PURE__*/ React.createElement(
+            _View.default,
+            {
+              onLayout: this._onLayoutHeader,
+              style: _StyleSheet.default.compose(
+                inversionStyle,
+                this.props.ListHeaderComponentStyle
+              ),
+            }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
+            element
+          )
+        )
+      );
     }
 
     var itemCount = this.props.getItemCount(data);
 
     if (itemCount > 0) {
       _usedIndexForKey = false;
-      _keylessItemComponentName = '';
+      _keylessItemComponentName = "";
 
       var spacerKey = this._getSpacerKey(!horizontal);
 
-      var lastInitialIndex = this.props.initialScrollIndex ? -1 : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
+      var lastInitialIndex = this.props.initialScrollIndex
+        ? -1
+        : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
       var _this$state = this.state,
-          first = _this$state.first,
-          last = _this$state.last;
-
-      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
+        first = _this$state.first,
+        last = _this$state.last;
+
+      this._pushCells(
+        cells,
+        stickyHeaderIndices,
+        stickyIndicesFromProps,
+        0,
+        lastInitialIndex,
+        inversionStyle
+      );
 
       var firstAfterInitial = Math.max(lastInitialIndex + 1, first);
 
@@ -1085,23 +1326,39 @@ class VirtualizedList extends React.PureComponent {
 
               var stickyBlock = this._getFrameMetricsApprox(ii);
 
-              var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
-              cells.push( /*#__PURE__*/React.createElement(_View.default, {
-                key: "$sticky_lead",
-                style: {
-                  [spacerKey]: leadSpace
-                }
-              }));
+              var leadSpace =
+                stickyBlock.offset -
+                initBlock.offset -
+                (this.props.initialScrollIndex ? 0 : initBlock.length);
+              cells.push(
+                /*#__PURE__*/ React.createElement(_View.default, {
+                  key: "$sticky_lead",
+                  style: {
+                    [spacerKey]: leadSpace,
+                  },
+                })
+              );
 
-              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
+              this._pushCells(
+                cells,
+                stickyHeaderIndices,
+                stickyIndicesFromProps,
+                ii,
+                ii,
+                inversionStyle
+              );
 
-              var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
-              cells.push( /*#__PURE__*/React.createElement(_View.default, {
-                key: "$sticky_trail",
-                style: {
-                  [spacerKey]: trailSpace
-                }
-              }));
+              var trailSpace =
+                this._getFrameMetricsApprox(first).offset -
+                (stickyBlock.offset + stickyBlock.length);
+              cells.push(
+                /*#__PURE__*/ React.createElement(_View.default, {
+                  key: "$sticky_trail",
+                  style: {
+                    [spacerKey]: trailSpace,
+                  },
+                })
+              );
               insertedStickySpacer = true;
               break;
             }
@@ -1111,21 +1368,36 @@ class VirtualizedList extends React.PureComponent {
         if (!insertedStickySpacer) {
           var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
 
-          var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);
-
-          cells.push( /*#__PURE__*/React.createElement(_View.default, {
-            key: "$lead_spacer",
-            style: {
-              [spacerKey]: firstSpace
-            }
-          }));
+          var firstSpace =
+            this._getFrameMetricsApprox(first).offset -
+            (_initBlock.offset + _initBlock.length);
+
+          cells.push(
+            /*#__PURE__*/ React.createElement(_View.default, {
+              key: "$lead_spacer",
+              style: {
+                [spacerKey]: firstSpace,
+              },
+            })
+          );
         }
       }
 
-      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);
+      this._pushCells(
+        cells,
+        stickyHeaderIndices,
+        stickyIndicesFromProps,
+        firstAfterInitial,
+        last,
+        inversionStyle
+      );
 
       if (!this._hasWarned.keys && _usedIndexForKey) {
-        console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
+        console.warn(
+          "VirtualizedList: missing keys for items, make sure to specify a key or id property on each " +
+            "item or provide a custom keyExtractor.",
+          _keylessItemComponentName
+        );
         this._hasWarned.keys = true;
       }
 
@@ -1134,85 +1406,154 @@ class VirtualizedList extends React.PureComponent {
         // prevent the user for hyperscrolling into un-measured area because otherwise content will
         // likely jump around as it renders in above the viewport.
 
-
-        var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
+        var end = this.props.getItemLayout
+          ? itemCount - 1
+          : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
 
         var endFrame = this._getFrameMetricsApprox(end);
 
-        var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
-        cells.push( /*#__PURE__*/React.createElement(_View.default, {
-          key: "$tail_spacer",
-          style: {
-            [spacerKey]: tailSpacerLength
-          }
-        }));
+        var tailSpacerLength =
+          endFrame.offset +
+          endFrame.length -
+          (lastFrame.offset + lastFrame.length);
+        cells.push(
+          /*#__PURE__*/ React.createElement(_View.default, {
+            key: "$tail_spacer",
+            style: {
+              [spacerKey]: tailSpacerLength,
+            },
+          })
+        );
       }
     } else if (ListEmptyComponent) {
-      var _element = /*#__PURE__*/React.isValidElement(ListEmptyComponent) ? ListEmptyComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListEmptyComponent, null);
-
-      cells.push( /*#__PURE__*/React.cloneElement(_element, {
-        key: '$empty',
-        onLayout: event => {
-          this._onLayoutEmpty(event);
-
-          if (_element.props.onLayout) {
-            _element.props.onLayout(event);
-          }
-        },
-        style: _StyleSheet.default.compose(inversionStyle, _element.props.style)
-      }));
+      var _element = /*#__PURE__*/ React.isValidElement(ListEmptyComponent)
+        ? ListEmptyComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListEmptyComponent, null);
+
+      cells.push(
+        /*#__PURE__*/ React.cloneElement(_element, {
+          key: "$empty",
+          onLayout: (event) => {
+            this._onLayoutEmpty(event);
+
+            if (_element.props.onLayout) {
+              _element.props.onLayout(event);
+            }
+          },
+          style: _StyleSheet.default.compose(
+            inversionStyle,
+            _element.props.style
+          ),
+        })
+      );
     }
 
     if (ListFooterComponent) {
-      var _element2 = /*#__PURE__*/React.isValidElement(ListFooterComponent) ? ListFooterComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListFooterComponent, null);
-
-      cells.push( /*#__PURE__*/React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
-        cellKey: this._getFooterCellKey(),
-        key: "$footer"
-      }, /*#__PURE__*/React.createElement(_View.default, {
-        onLayout: this._onLayoutFooter,
-        style: _StyleSheet.default.compose(inversionStyle, this.props.ListFooterComponentStyle)
-      }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
-      _element2)));
+      var _element2 = /*#__PURE__*/ React.isValidElement(ListFooterComponent)
+        ? ListFooterComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListFooterComponent, null);
+
+      cells.push(
+        /*#__PURE__*/ React.createElement(
+          _VirtualizedListContext.VirtualizedListCellContextProvider,
+          {
+            cellKey: this._getFooterCellKey(),
+            key: "$footer",
+          },
+          /*#__PURE__*/ React.createElement(
+            _View.default,
+            {
+              onLayout: this._onLayoutFooter,
+              style: _StyleSheet.default.compose(
+                inversionStyle,
+                this.props.ListFooterComponentStyle
+              ),
+            }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
+            _element2
+          )
+        )
+      );
     }
 
-    var scrollProps = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, this.props), {}, {
-      onContentSizeChange: this._onContentSizeChange,
-      onLayout: this._onLayout,
-      onScroll: this._onScroll,
-      onScrollBeginDrag: this._onScrollBeginDrag,
-      onScrollEndDrag: this._onScrollEndDrag,
-      onMomentumScrollBegin: this._onMomentumScrollBegin,
-      onMomentumScrollEnd: this._onMomentumScrollEnd,
-      scrollEventThrottle: scrollEventThrottleOrDefault(this.props.scrollEventThrottle),
-      // TODO: Android support
-      invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
-      stickyHeaderIndices,
-      style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
-    });
-    this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
-    var innerRet = /*#__PURE__*/React.createElement(_VirtualizedListContext.VirtualizedListContextProvider, {
-      value: {
-        cellKey: null,
-        getScrollMetrics: this._getScrollMetrics,
-        horizontal: horizontalOrDefault(this.props.horizontal),
-        getOutermostParentListRef: this._getOutermostParentListRef,
-        getNestedChildState: this._getNestedChildState,
-        registerAsNestedChild: this._registerAsNestedChild,
-        unregisterAsNestedChild: this._unregisterAsNestedChild,
-        debugInfo: this._getDebugInfo()
+    var scrollProps = (0, _objectSpread2.default)(
+      (0, _objectSpread2.default)({}, this.props),
+      {},
+      {
+        onContentSizeChange: this._onContentSizeChange,
+        onLayout: this._onLayout,
+        onScroll: this._onScroll,
+        onScrollBeginDrag: this._onScrollBeginDrag,
+        onScrollEndDrag: this._onScrollEndDrag,
+        onMomentumScrollBegin: this._onMomentumScrollBegin,
+        onMomentumScrollEnd: this._onMomentumScrollEnd,
+        scrollEventThrottle: scrollEventThrottleOrDefault(
+          this.props.scrollEventThrottle
+        ),
+        // TODO: Android support
+        invertStickyHeaders:
+          this.props.invertStickyHeaders !== undefined
+            ? this.props.invertStickyHeaders
+            : this.props.inverted,
+        stickyHeaderIndices,
+        style: inversionStyle
+          ? [inversionStyle, this.props.style]
+          : this.props.style,
       }
-    }, /*#__PURE__*/React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
-      ref: this._captureScrollRef
-    }, cells));
+    );
+    this._hasMore =
+      this.state.last < this.props.getItemCount(this.props.data) - 1;
+
+    const headerIdx = cells.findIndex((cell) => cell.key === "$header");
+    const footerIdx = cells.findIndex((cell) => cell.key === "$footer");
+    const emptyComponentIdx = cells.findIndex((cell) => cell.key === "$empty");
+    const cellsWithoutHeaderAndFooter = cells.filter(
+      (_, idx) => ![headerIdx, footerIdx].includes(idx)
+    );
+    const isListWithNonNullItems =
+      cellsWithoutHeaderAndFooter &&
+      this.props.listAs &&
+      emptyComponentIdx === -1;
+    const cellsAsListItem = isListWithNonNullItems
+      ? React.createElement(
+          this.props.listAs,
+          { key: "listCells" },
+          cellsWithoutHeaderAndFooter
+        )
+      : null;
+    const cellsToDisplay = isListWithNonNullItems
+      ? [cells[headerIdx], cellsAsListItem, cells[footerIdx]]
+      : cells;
+
+    var innerRet = /*#__PURE__*/ React.createElement(
+      _VirtualizedListContext.VirtualizedListContextProvider,
+      {
+        value: {
+          cellKey: null,
+          getScrollMetrics: this._getScrollMetrics,
+          horizontal: horizontalOrDefault(this.props.horizontal),
+          getOutermostParentListRef: this._getOutermostParentListRef,
+          getNestedChildState: this._getNestedChildState,
+          registerAsNestedChild: this._registerAsNestedChild,
+          unregisterAsNestedChild: this._unregisterAsNestedChild,
+          debugInfo: this._getDebugInfo(),
+        },
+      },
+      /*#__PURE__*/ React.cloneElement(
+        (
+          this.props.renderScrollComponent || this._defaultRenderScrollComponent
+        )(scrollProps),
+        {
+          ref: this._captureScrollRef,
+        },
+        cellsToDisplay
+      )
+    );
     var ret = innerRet;
     /* https://github.com/necolas/react-native-web/issues/2239: Re-enable when ScrollView.Context.Consumer is available.
     if (__DEV__) {
@@ -1241,9 +1582,14 @@ class VirtualizedList extends React.PureComponent {
     }*/
 
     if (this.props.debug) {
-      return /*#__PURE__*/React.createElement(_View.default, {
-        style: styles.debug
-      }, ret, this._renderDebugOverlay());
+      return /*#__PURE__*/ React.createElement(
+        _View.default,
+        {
+          style: styles.debug,
+        },
+        ret,
+        this._renderDebugOverlay()
+      );
     } else {
       return ret;
     }
@@ -1251,13 +1597,13 @@ class VirtualizedList extends React.PureComponent {
 
   componentDidUpdate(prevProps) {
     var _this$props9 = this.props,
-        data = _this$props9.data,
-        extraData = _this$props9.extraData;
+      data = _this$props9.data,
+      extraData = _this$props9.extraData;
 
     if (data !== prevProps.data || extraData !== prevProps.extraData) {
       // clear the viewableIndices cache to also trigger
       // the onViewableItemsChanged callback with the new data
-      this._viewabilityTuples.forEach(tuple => {
+      this._viewabilityTuples.forEach((tuple) => {
         tuple.viewabilityHelper.resetViewableIndices();
       });
     } // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen
@@ -1267,20 +1613,22 @@ class VirtualizedList extends React.PureComponent {
     // `_scheduleCellsToRenderUpdate` will check this condition and not perform
     // another hiPri update.
 
-
     var hiPriInProgress = this._hiPriInProgress;
 
     this._scheduleCellsToRenderUpdate(); // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`
     // is triggered with `this._hiPriInProgress = true`
 
-
     if (hiPriInProgress) {
       this._hiPriInProgress = false;
     }
   }
 
   _computeBlankness() {
-    this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
+    this._fillRateHelper.computeBlankness(
+      this.props,
+      this.state,
+      this._scrollMetrics
+    );
   }
 
   _onCellLayout(e, cellKey, index) {
@@ -1289,16 +1637,25 @@ class VirtualizedList extends React.PureComponent {
       offset: this._selectOffset(layout),
       length: this._selectLength(layout),
       index,
-      inLayout: true
+      inLayout: true,
     };
     var curr = this._frames[cellKey];
 
-    if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
+    if (
+      !curr ||
+      next.offset !== curr.offset ||
+      next.length !== curr.length ||
+      index !== curr.index
+    ) {
       this._totalCellLength += next.length - (curr ? curr.length : 0);
       this._totalCellsMeasured += curr ? 0 : 1;
-      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
+      this._averageCellLength =
+        this._totalCellLength / this._totalCellsMeasured;
       this._frames[cellKey] = next;
-      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
+      this._highestMeasuredFrameIndex = Math.max(
+        this._highestMeasuredFrameIndex,
+        index
+      );
 
       this._scheduleCellsToRenderUpdate();
     } else {
@@ -1316,12 +1673,21 @@ class VirtualizedList extends React.PureComponent {
     var childListKeys = this._cellKeysToChildListKeys.get(cellKey);
 
     if (childListKeys) {
-      for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(childListKeys), _step2; !(_step2 = _iterator2()).done;) {
+      for (
+        var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(
+            childListKeys
+          ),
+          _step2;
+        !(_step2 = _iterator2()).done;
+
+      ) {
         var childKey = _step2.value;
 
         var childList = this._nestedChildLists.get(childKey);
 
-        childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
+        childList &&
+          childList.ref &&
+          childList.ref.measureLayoutRelativeToContainingList();
       }
     }
   }
@@ -1335,52 +1701,75 @@ class VirtualizedList extends React.PureComponent {
       } // We are assuming that getOutermostParentListRef().getScrollRef()
       // is a non-null reference to a ScrollView
 
+      this._scrollRef.measureLayout(
+        this.context.getOutermostParentListRef().getScrollRef(),
+        (x, y, width, height) => {
+          this._offsetFromParentVirtualizedList = this._selectOffset({
+            x,
+            y,
+          });
+          this._scrollMetrics.contentLength = this._selectLength({
+            width,
+            height,
+          });
 
-      this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), (x, y, width, height) => {
-        this._offsetFromParentVirtualizedList = this._selectOffset({
-          x,
-          y
-        });
-        this._scrollMetrics.contentLength = this._selectLength({
-          width,
-          height
-        });
+          var scrollMetrics = this._convertParentScrollMetrics(
+            this.context.getScrollMetrics()
+          );
 
-        var scrollMetrics = this._convertParentScrollMetrics(this.context.getScrollMetrics());
+          var metricsChanged =
+            this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength ||
+            this._scrollMetrics.offset !== scrollMetrics.offset;
 
-        var metricsChanged = this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || this._scrollMetrics.offset !== scrollMetrics.offset;
+          if (metricsChanged) {
+            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
+            this._scrollMetrics.offset = scrollMetrics.offset; // If metrics of the scrollView changed, then we triggered remeasure for child list
+            // to ensure VirtualizedList has the right information.
 
-        if (metricsChanged) {
-          this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
-          this._scrollMetrics.offset = scrollMetrics.offset; // If metrics of the scrollView changed, then we triggered remeasure for child list
-          // to ensure VirtualizedList has the right information.
+            this._cellKeysToChildListKeys.forEach((childListKeys) => {
+              if (childListKeys) {
+                for (
+                  var _iterator3 = (0,
+                    _createForOfIteratorHelperLoose2.default)(childListKeys),
+                    _step3;
+                  !(_step3 = _iterator3()).done;
 
-          this._cellKeysToChildListKeys.forEach(childListKeys => {
-            if (childListKeys) {
-              for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(childListKeys), _step3; !(_step3 = _iterator3()).done;) {
-                var childKey = _step3.value;
+                ) {
+                  var childKey = _step3.value;
 
-                var childList = this._nestedChildLists.get(childKey);
+                  var childList = this._nestedChildLists.get(childKey);
 
-                childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
+                  childList &&
+                    childList.ref &&
+                    childList.ref.measureLayoutRelativeToContainingList();
+                }
               }
-            }
-          });
+            });
+          }
+        },
+        (error) => {
+          console.warn(
+            "VirtualizedList: Encountered an error while measuring a list's" +
+              " offset from its containing VirtualizedList."
+          );
         }
-      }, error => {
-        console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
-      });
+      );
     } catch (error) {
-      console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
+      console.warn(
+        "measureLayoutRelativeToContainingList threw an error",
+        error.stack
+      );
     }
   }
 
   _getFooterCellKey() {
-    return this._getCellKey() + '-footer';
+    return this._getCellKey() + "-footer";
   }
 
   _renderDebugOverlay() {
-    var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
+    var normalize =
+      this._scrollMetrics.visibleLength /
+      (this._scrollMetrics.contentLength || 1);
     var framesInLayout = [];
     var itemCount = this.props.getItemCount(this.props.data);
 
@@ -1390,7 +1779,6 @@ class VirtualizedList extends React.PureComponent {
        * suppresses an error found when Flow v0.68 was deployed. To see the
        * error delete this comment and run Flow. */
 
-
       if (frame.inLayout) {
         framesInLayout.push(frame);
       }
@@ -1403,29 +1791,51 @@ class VirtualizedList extends React.PureComponent {
     var windowLen = frameLast.offset + frameLast.length - windowTop;
     var visTop = this._scrollMetrics.offset;
     var visLen = this._scrollMetrics.visibleLength;
-    return /*#__PURE__*/React.createElement(_View.default, {
-      style: [styles.debugOverlayBase, styles.debugOverlay]
-    }, framesInLayout.map((f, ii) => /*#__PURE__*/React.createElement(_View.default, {
-      key: 'f' + ii,
-      style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
-        top: f.offset * normalize,
-        height: f.length * normalize
-      }]
-    })), /*#__PURE__*/React.createElement(_View.default, {
-      style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
-        top: windowTop * normalize,
-        height: windowLen * normalize
-      }]
-    }), /*#__PURE__*/React.createElement(_View.default, {
-      style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
-        top: visTop * normalize,
-        height: visLen * normalize
-      }]
-    }));
+    return /*#__PURE__*/ React.createElement(
+      _View.default,
+      {
+        style: [styles.debugOverlayBase, styles.debugOverlay],
+      },
+      framesInLayout.map((f, ii) =>
+        /*#__PURE__*/ React.createElement(_View.default, {
+          key: "f" + ii,
+          style: [
+            styles.debugOverlayBase,
+            styles.debugOverlayFrame,
+            {
+              top: f.offset * normalize,
+              height: f.length * normalize,
+            },
+          ],
+        })
+      ),
+      /*#__PURE__*/ React.createElement(_View.default, {
+        style: [
+          styles.debugOverlayBase,
+          styles.debugOverlayFrameLast,
+          {
+            top: windowTop * normalize,
+            height: windowLen * normalize,
+          },
+        ],
+      }),
+      /*#__PURE__*/ React.createElement(_View.default, {
+        style: [
+          styles.debugOverlayBase,
+          styles.debugOverlayFrameVis,
+          {
+            top: visTop * normalize,
+            height: visLen * normalize,
+          },
+        ],
+      })
+    );
   }
 
   _selectLength(metrics) {
-    return !horizontalOrDefault(this.props.horizontal) ? metrics.height : metrics.width;
+    return !horizontalOrDefault(this.props.horizontal)
+      ? metrics.height
+      : metrics.width;
   }
 
   _selectOffset(metrics) {
@@ -1434,22 +1844,28 @@ class VirtualizedList extends React.PureComponent {
 
   _maybeCallOnEndReached() {
     var _this$props10 = this.props,
-        data = _this$props10.data,
-        getItemCount = _this$props10.getItemCount,
-        onEndReached = _this$props10.onEndReached,
-        onEndReachedThreshold = _this$props10.onEndReachedThreshold;
+      data = _this$props10.data,
+      getItemCount = _this$props10.getItemCount,
+      onEndReached = _this$props10.onEndReached,
+      onEndReachedThreshold = _this$props10.onEndReachedThreshold;
     var _this$_scrollMetrics2 = this._scrollMetrics,
-        contentLength = _this$_scrollMetrics2.contentLength,
-        visibleLength = _this$_scrollMetrics2.visibleLength,
-        offset = _this$_scrollMetrics2.offset;
+      contentLength = _this$_scrollMetrics2.contentLength,
+      visibleLength = _this$_scrollMetrics2.visibleLength,
+      offset = _this$_scrollMetrics2.offset;
     var distanceFromEnd = contentLength - visibleLength - offset;
-    var threshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
-
-    if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
+    var threshold =
+      onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
+
+    if (
+      onEndReached &&
+      this.state.last === getItemCount(data) - 1 &&
+      distanceFromEnd < threshold &&
+      this._scrollMetrics.contentLength !== this._sentEndForContentLength
+    ) {
       // Only call onEndReached once for a given content length
       this._sentEndForContentLength = this._scrollMetrics.contentLength;
       onEndReached({
-        distanceFromEnd
+        distanceFromEnd,
       });
     } else if (distanceFromEnd > threshold) {
       // If the user scrolls away from the end and back again cause
@@ -1460,29 +1876,35 @@ class VirtualizedList extends React.PureComponent {
 
   _scheduleCellsToRenderUpdate() {
     var _this$state2 = this.state,
-        first = _this$state2.first,
-        last = _this$state2.last;
+      first = _this$state2.first,
+      last = _this$state2.last;
     var _this$_scrollMetrics3 = this._scrollMetrics,
-        offset = _this$_scrollMetrics3.offset,
-        visibleLength = _this$_scrollMetrics3.visibleLength,
-        velocity = _this$_scrollMetrics3.velocity;
+      offset = _this$_scrollMetrics3.offset,
+      visibleLength = _this$_scrollMetrics3.visibleLength,
+      velocity = _this$_scrollMetrics3.velocity;
     var itemCount = this.props.getItemCount(this.props.data);
     var hiPri = false;
-    var onEndReachedThreshold = onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold);
-    var scrollingThreshold = onEndReachedThreshold * visibleLength / 2; // Mark as high priority if we're close to the start of the first item
+    var onEndReachedThreshold = onEndReachedThresholdOrDefault(
+      this.props.onEndReachedThreshold
+    );
+    var scrollingThreshold = (onEndReachedThreshold * visibleLength) / 2; // Mark as high priority if we're close to the start of the first item
     // But only if there are items before the first rendered item
 
     if (first > 0) {
       var distTop = offset - this._getFrameMetricsApprox(first).offset;
 
-      hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
+      hiPri =
+        hiPri || distTop < 0 || (velocity < -2 && distTop < scrollingThreshold);
     } // Mark as high priority if we're close to the end of the last item
     // But only if there are items after the last rendered item
 
-
     if (last < itemCount - 1) {
-      var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
-      hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
+      var distBottom =
+        this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
+      hiPri =
+        hiPri ||
+        distBottom < 0 ||
+        (velocity > 2 && distBottom < scrollingThreshold);
     } // Only trigger high-priority updates if we've actually rendered cells,
     // and with that size estimate, accurately compute how many cells we should render.
     // Otherwise, it would just render as many cells as it can (of zero dimension),
@@ -1491,13 +1913,16 @@ class VirtualizedList extends React.PureComponent {
     // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate
     // We shouldn't do another hipri cellToRenderUpdate
 
-
-    if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
+    if (
+      hiPri &&
+      (this._averageCellLength || this.props.getItemLayout) &&
+      !this._hiPriInProgress
+    ) {
       this._hiPriInProgress = true; // Don't worry about interactions when scrolling quickly; focus on filling content as fast
       // as possible.
 
       this._updateCellsToRenderBatcher.dispose({
-        abort: true
+        abort: true,
       });
 
       this._updateCellsToRender();
@@ -1511,11 +1936,18 @@ class VirtualizedList extends React.PureComponent {
   _updateViewableItems(data) {
     var getItemCount = this.props.getItemCount;
 
-    this._viewabilityTuples.forEach(tuple => {
-      tuple.viewabilityHelper.onUpdate(getItemCount(data), this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._getFrameMetrics, this._createViewToken, tuple.onViewableItemsChanged, this.state);
+    this._viewabilityTuples.forEach((tuple) => {
+      tuple.viewabilityHelper.onUpdate(
+        getItemCount(data),
+        this._scrollMetrics.offset,
+        this._scrollMetrics.visibleLength,
+        this._getFrameMetrics,
+        this._createViewToken,
+        tuple.onViewableItemsChanged,
+        this.state
+      );
     });
   }
-
 }
 
 VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;
@@ -1526,48 +1958,57 @@ class CellRenderer extends React.Component {
     this.state = {
       separatorProps: {
         highlighted: false,
-        leadingItem: this.props.item
-      }
+        leadingItem: this.props.item,
+      },
     };
     this._separators = {
       highlight: () => {
         var _this$props11 = this.props,
-            cellKey = _this$props11.cellKey,
-            prevCellKey = _this$props11.prevCellKey;
+          cellKey = _this$props11.cellKey,
+          prevCellKey = _this$props11.prevCellKey;
         this.props.onUpdateSeparators([cellKey, prevCellKey], {
-          highlighted: true
+          highlighted: true,
         });
       },
       unhighlight: () => {
         var _this$props12 = this.props,
-            cellKey = _this$props12.cellKey,
-            prevCellKey = _this$props12.prevCellKey;
+          cellKey = _this$props12.cellKey,
+          prevCellKey = _this$props12.prevCellKey;
         this.props.onUpdateSeparators([cellKey, prevCellKey], {
-          highlighted: false
+          highlighted: false,
         });
       },
       updateProps: (select, newProps) => {
         var _this$props13 = this.props,
-            cellKey = _this$props13.cellKey,
-            prevCellKey = _this$props13.prevCellKey;
-        this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
-      }
+          cellKey = _this$props13.cellKey,
+          prevCellKey = _this$props13.prevCellKey;
+        this.props.onUpdateSeparators(
+          [select === "leading" ? prevCellKey : cellKey],
+          newProps
+        );
+      },
     };
   }
 
   static getDerivedStateFromProps(props, prevState) {
     return {
-      separatorProps: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, prevState.separatorProps), {}, {
-        leadingItem: props.item
-      })
+      separatorProps: (0, _objectSpread2.default)(
+        (0, _objectSpread2.default)({}, prevState.separatorProps),
+        {},
+        {
+          leadingItem: props.item,
+        }
+      ),
     };
   } // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not
   // reused by SectionList and we can keep VirtualizedList simpler.
 
-
   updateSeparatorProps(newProps) {
-    this.setState(state => ({
-      separatorProps: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, state.separatorProps), newProps)
+    this.setState((state) => ({
+      separatorProps: (0, _objectSpread2.default)(
+        (0, _objectSpread2.default)({}, state.separatorProps),
+        newProps
+      ),
     }));
   }
 
@@ -1577,7 +2018,10 @@ class CellRenderer extends React.Component {
 
   _renderElement(renderItem, ListItemComponent, item, index) {
     if (renderItem && ListItemComponent) {
-      console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
+      console.warn(
+        "VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take" +
+          " precedence over renderItem."
+      );
     }
 
     if (ListItemComponent) {
@@ -1588,10 +2032,10 @@ class CellRenderer extends React.Component {
       /* $FlowFixMe[incompatible-type-arg] (>=0.108.0 site=react_native_fb)
        * This comment suppresses an error found when Flow v0.108 was deployed.
        * To see the error, delete this comment and run Flow. */
-      return /*#__PURE__*/React.createElement(ListItemComponent, {
+      return /*#__PURE__*/ React.createElement(ListItemComponent, {
         item,
         index,
-        separators: this._separators
+        separators: this._separators,
       });
     }
 
@@ -1599,64 +2043,112 @@ class CellRenderer extends React.Component {
       return renderItem({
         item,
         index,
-        separators: this._separators
+        separators: this._separators,
       });
     }
 
-    (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
+    (0, _invariant.default)(
+      false,
+      "VirtualizedList: Either ListItemComponent or renderItem props are required but none were found."
+    );
   }
 
   render() {
     var _this$props14 = this.props,
-        CellRendererComponent = _this$props14.CellRendererComponent,
-        ItemSeparatorComponent = _this$props14.ItemSeparatorComponent,
-        fillRateHelper = _this$props14.fillRateHelper,
-        horizontal = _this$props14.horizontal,
-        item = _this$props14.item,
-        index = _this$props14.index,
-        inversionStyle = _this$props14.inversionStyle,
-        parentProps = _this$props14.parentProps;
+      CellRendererComponent = _this$props14.CellRendererComponent,
+      ItemSeparatorComponent = _this$props14.ItemSeparatorComponent,
+      fillRateHelper = _this$props14.fillRateHelper,
+      horizontal = _this$props14.horizontal,
+      item = _this$props14.item,
+      index = _this$props14.index,
+      inversionStyle = _this$props14.inversionStyle,
+      parentProps = _this$props14.parentProps;
     var renderItem = parentProps.renderItem,
-        getItemLayout = parentProps.getItemLayout,
-        ListItemComponent = parentProps.ListItemComponent;
+      getItemLayout = parentProps.getItemLayout,
+      ListItemComponent = parentProps.ListItemComponent;
 
-    var element = this._renderElement(renderItem, ListItemComponent, item, index);
+    var element = this._renderElement(
+      renderItem,
+      ListItemComponent,
+      item,
+      index
+    );
 
     var onLayout =
-    /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment
-     * suppresses an error found when Flow v0.68 was deployed. To see the
-     * error delete this comment and run Flow. */
-    getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout; // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
+      /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment
+       * suppresses an error found when Flow v0.68 was deployed. To see the
+       * error delete this comment and run Flow. */
+      getItemLayout && !parentProps.debug && !fillRateHelper.enabled()
+        ? undefined
+        : this.props.onLayout; // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
     // called explicitly by `ScrollViewStickyHeader`.
 
-    var itemSeparator = ItemSeparatorComponent && /*#__PURE__*/React.createElement(ItemSeparatorComponent, this.state.separatorProps);
-    var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
-    var result = !CellRendererComponent ?
-    /*#__PURE__*/
-
-    /* $FlowFixMe[incompatible-type-arg] (>=0.89.0 site=react_native_fb) *
+    var itemSeparator =
+      ItemSeparatorComponent &&
+      /*#__PURE__*/ React.createElement(
+        ItemSeparatorComponent,
+        this.state.separatorProps
+      );
+    var cellStyle = inversionStyle
+      ? horizontal
+        ? [styles.rowReverse, inversionStyle]
+        : [styles.columnReverse, inversionStyle]
+      : horizontal
+      ? [styles.row, inversionStyle]
+      : inversionStyle;
+    var result = !CellRendererComponent
+      ? /*#__PURE__*/
+
+        /* $FlowFixMe[incompatible-type-arg] (>=0.89.0 site=react_native_fb) *
       This comment suppresses an error found when Flow v0.89 was deployed. *
       To see the error, delete this comment and run Flow. */
-    React.createElement(_View.default, {
-      style: cellStyle,
-      onLayout: onLayout
-    }, element, itemSeparator) : /*#__PURE__*/React.createElement(CellRendererComponent, (0, _extends2.default)({}, this.props, {
-      style: cellStyle,
-      onLayout: onLayout
-    }), element, itemSeparator);
-    return /*#__PURE__*/React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
-      cellKey: this.props.cellKey
-    }, result);
+        React.createElement(
+          _View.default,
+          {
+            style: cellStyle,
+            onLayout: onLayout,
+          },
+          element,
+          itemSeparator
+        )
+      : /*#__PURE__*/ React.createElement(
+          CellRendererComponent,
+          (0, _extends2.default)({}, this.props, {
+            style: cellStyle,
+            onLayout: onLayout,
+          }),
+          element,
+          itemSeparator
+        );
+    return /*#__PURE__*/ React.createElement(
+      _VirtualizedListContext.VirtualizedListCellContextProvider,
+      {
+        cellKey: this.props.cellKey,
+      },
+      this.props.parentProps.itemAs
+        ? React.createElement(this.props.parentProps.itemAs, {}, result)
+        : result
+    );
   }
-
 }
 
 function describeNestedLists(childList) {
-  var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
+  var trace =
+    "VirtualizedList trace:\n" +
+    ("  Child (" +
+      (childList.horizontal ? "horizontal" : "vertical") +
+      "):\n") +
+    ("    listKey: " + childList.key + "\n") +
+    ("    cellKey: " + childList.cellKey);
   var debugInfo = childList.parentDebugInfo;
 
   while (debugInfo) {
-    trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
+    trace +=
+      "\n  Parent (" +
+      (debugInfo.horizontal ? "horizontal" : "vertical") +
+      "):\n" +
+      ("    listKey: " + debugInfo.listKey + "\n") +
+      ("    cellKey: " + debugInfo.cellKey);
     debugInfo = debugInfo.parent;
   }
 
@@ -1665,52 +2157,56 @@ function describeNestedLists(childList) {
 
 var styles = _StyleSheet.default.create({
   verticallyInverted: {
-    transform: [{
-      scaleY: -1
-    }]
+    transform: [
+      {
+        scaleY: -1,
+      },
+    ],
   },
   horizontallyInverted: {
-    transform: [{
-      scaleX: -1
-    }]
+    transform: [
+      {
+        scaleX: -1,
+      },
+    ],
   },
   row: {
-    flexDirection: 'row'
+    flexDirection: "row",
   },
   rowReverse: {
-    flexDirection: 'row-reverse'
+    flexDirection: "row-reverse",
   },
   columnReverse: {
-    flexDirection: 'column-reverse'
+    flexDirection: "column-reverse",
   },
   debug: {
-    flex: 1
+    flex: 1,
   },
   debugOverlayBase: {
-    position: 'absolute',
+    position: "absolute",
     top: 0,
-    right: 0
+    right: 0,
   },
   debugOverlay: {
     bottom: 0,
     width: 20,
-    borderColor: 'blue',
-    borderWidth: 1
+    borderColor: "blue",
+    borderWidth: 1,
   },
   debugOverlayFrame: {
     left: 0,
-    backgroundColor: 'orange'
+    backgroundColor: "orange",
   },
   debugOverlayFrameLast: {
     left: 0,
-    borderColor: 'green',
-    borderWidth: 2
+    borderColor: "green",
+    borderWidth: 2,
   },
   debugOverlayFrameVis: {
     left: 0,
-    borderColor: 'red',
-    borderWidth: 2
-  }
+    borderColor: "red",
+    borderWidth: 2,
+  },
 });
 
 var _default = VirtualizedList;
diff --git a/dist/exports/Image/index.js b/dist/exports/Image/index.js
index 93c5f22f3b5c7625f3d428302033aae287a576f8..e48c8f30b1862b1108191d083eccf9914e68361b 100644
--- a/dist/exports/Image/index.js
+++ b/dist/exports/Image/index.js
@@ -1,7 +1,20 @@
 import _objectSpread from "@babel/runtime/helpers/objectSpread2";
 import _extends from "@babel/runtime/helpers/extends";
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
-var _excluded = ["accessibilityLabel", "blurRadius", "defaultSource", "draggable", "onError", "onLayout", "onLoad", "onLoadEnd", "onLoadStart", "pointerEvents", "source", "style"];
+var _excluded = [
+  "accessibilityLabel",
+  "blurRadius",
+  "defaultSource",
+  "draggable",
+  "onError",
+  "onLayout",
+  "onLoad",
+  "onLoadEnd",
+  "onLoadStart",
+  "pointerEvents",
+  "source",
+  "style",
+];
 
 /**
  * Copyright (c) Nicolas Gallagher.
@@ -10,50 +23,65 @@ var _excluded = ["accessibilityLabel", "blurRadius", "defaultSource", "draggable
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  */
-import * as React from 'react';
-import createElement from '../createElement';
-import { getAssetByID } from '../../modules/AssetRegistry';
-import { createBoxShadowValue } from '../StyleSheet/preprocess';
-import ImageLoader from '../../modules/ImageLoader';
-import PixelRatio from '../PixelRatio';
-import StyleSheet from '../StyleSheet';
-import TextAncestorContext from '../Text/TextAncestorContext';
-import View from '../View';
-var ERRORED = 'ERRORED';
-var LOADED = 'LOADED';
-var LOADING = 'LOADING';
-var IDLE = 'IDLE';
+import * as React from "react";
+import createElement from "../createElement";
+import { getAssetByID } from "../../modules/AssetRegistry";
+import { createBoxShadowValue } from "../StyleSheet/preprocess";
+import ImageLoader from "../../modules/ImageLoader";
+import PixelRatio from "../PixelRatio";
+import StyleSheet from "../StyleSheet";
+import TextAncestorContext from "../Text/TextAncestorContext";
+import View from "../View";
+var ERRORED = "ERRORED";
+var LOADED = "LOADED";
+var LOADING = "LOADING";
+var IDLE = "IDLE";
 var _filterId = 0;
 var svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
 
 function createTintColorSVG(tintColor, id) {
-  return tintColor && id != null ? /*#__PURE__*/React.createElement("svg", {
-    style: {
-      position: 'absolute',
-      height: 0,
-      visibility: 'hidden',
-      width: 0
-    }
-  }, /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("filter", {
-    id: "tint-" + id,
-    suppressHydrationWarning: true
-  }, /*#__PURE__*/React.createElement("feFlood", {
-    floodColor: "" + tintColor,
-    key: tintColor
-  }), /*#__PURE__*/React.createElement("feComposite", {
-    in2: "SourceAlpha",
-    operator: "atop"
-  })))) : null;
+  return tintColor && id != null
+    ? /*#__PURE__*/ React.createElement(
+        "svg",
+        {
+          style: {
+            position: "absolute",
+            height: 0,
+            visibility: "hidden",
+            width: 0,
+          },
+        },
+        /*#__PURE__*/ React.createElement(
+          "defs",
+          null,
+          /*#__PURE__*/ React.createElement(
+            "filter",
+            {
+              id: "tint-" + id,
+              suppressHydrationWarning: true,
+            },
+            /*#__PURE__*/ React.createElement("feFlood", {
+              floodColor: "" + tintColor,
+              key: tintColor,
+            }),
+            /*#__PURE__*/ React.createElement("feComposite", {
+              in2: "SourceAlpha",
+              operator: "atop",
+            })
+          )
+        )
+      )
+    : null;
 }
 
 function getFlatStyle(style, blurRadius, filterId) {
   var flatStyle = StyleSheet.flatten(style);
   var filter = flatStyle.filter,
-      resizeMode = flatStyle.resizeMode,
-      shadowOffset = flatStyle.shadowOffset,
-      tintColor = flatStyle.tintColor; // Add CSS filters
+    resizeMode = flatStyle.resizeMode,
+    shadowOffset = flatStyle.shadowOffset,
+    tintColor = flatStyle.tintColor; // Add CSS filters
   // React Native exposes these features as props and proprietary styles
 
   var filters = [];
@@ -80,11 +108,10 @@ function getFlatStyle(style, blurRadius, filterId) {
   }
 
   if (filters.length > 0) {
-    _filter = filters.join(' ');
+    _filter = filters.join(" ");
   } // These styles are converted to CSS filters applied to the
   // element displaying the background image.
 
-
   delete flatStyle.blurRadius;
   delete flatStyle.shadowColor;
   delete flatStyle.shadowOpacity;
@@ -98,21 +125,25 @@ function getFlatStyle(style, blurRadius, filterId) {
 }
 
 function resolveAssetDimensions(source) {
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     var _getAssetByID = getAssetByID(source),
-        _height = _getAssetByID.height,
-        _width = _getAssetByID.width;
+      _height = _getAssetByID.height,
+      _width = _getAssetByID.width;
 
     return {
       height: _height,
-      width: _width
+      width: _width,
     };
-  } else if (source != null && !Array.isArray(source) && typeof source === 'object') {
+  } else if (
+    source != null &&
+    !Array.isArray(source) &&
+    typeof source === "object"
+  ) {
     var _height2 = source.height,
-        _width2 = source.width;
+      _width2 = source.width;
     return {
       height: _height2,
-      width: _width2
+      width: _width2,
     };
   }
 }
@@ -120,12 +151,16 @@ function resolveAssetDimensions(source) {
 function resolveAssetUri(source) {
   var uri = null;
 
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     // get the URI from the packager
     var asset = getAssetByID(source);
 
     if (asset == null) {
-      throw new Error("Image: asset with ID \"" + source + "\" could not be found. Please check the image source or packager.");
+      throw new Error(
+        'Image: asset with ID "' +
+          source +
+          '" could not be found. Please check the image source or packager.'
+      );
     }
 
     var scale = asset.scales[0];
@@ -133,14 +168,25 @@ function resolveAssetUri(source) {
     if (asset.scales.length > 1) {
       var preferredScale = PixelRatio.get(); // Get the scale which is closest to the preferred scale
 
-      scale = asset.scales.reduce((prev, curr) => Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale) ? curr : prev);
+      scale = asset.scales.reduce((prev, curr) =>
+        Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale)
+          ? curr
+          : prev
+      );
     }
 
-    var scaleSuffix = scale !== 1 ? "@" + scale + "x" : '';
-    uri = asset ? asset.httpServerLocation + "/" + asset.name + scaleSuffix + "." + asset.type : '';
-  } else if (typeof source === 'string') {
+    var scaleSuffix = scale !== 1 ? "@" + scale + "x" : "";
+    uri = asset
+      ? asset.httpServerLocation +
+        "/" +
+        asset.name +
+        scaleSuffix +
+        "." +
+        asset.type
+      : "";
+  } else if (typeof source === "string") {
     uri = source;
-  } else if (source && typeof source.uri === 'string') {
+  } else if (source && typeof source.uri === "string") {
     uri = source.uri;
   }
 
@@ -149,7 +195,7 @@ function resolveAssetUri(source) {
 
     if (match) {
       var prefix = match[1],
-          svg = match[2];
+        svg = match[2];
       var encodedSvg = encodeURIComponent(svg);
       return "" + prefix + encodedSvg;
     }
@@ -158,84 +204,99 @@ function resolveAssetUri(source) {
   return uri;
 }
 
-var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
+var Image = /*#__PURE__*/ React.forwardRef((props, ref) => {
   var accessibilityLabel = props.accessibilityLabel,
-      blurRadius = props.blurRadius,
-      defaultSource = props.defaultSource,
-      draggable = props.draggable,
-      onError = props.onError,
-      onLayout = props.onLayout,
-      onLoad = props.onLoad,
-      onLoadEnd = props.onLoadEnd,
-      onLoadStart = props.onLoadStart,
-      pointerEvents = props.pointerEvents,
-      source = props.source,
-      style = props.style,
-      rest = _objectWithoutPropertiesLoose(props, _excluded);
-
-  if (process.env.NODE_ENV !== 'production') {
+    blurRadius = props.blurRadius,
+    defaultSource = props.defaultSource,
+    draggable = props.draggable,
+    onError = props.onError,
+    onLayout = props.onLayout,
+    onLoad = props.onLoad,
+    onLoadEnd = props.onLoadEnd,
+    onLoadStart = props.onLoadStart,
+    pointerEvents = props.pointerEvents,
+    source = props.source,
+    style = props.style,
+    transform = props.transform;
+  rest = _objectWithoutPropertiesLoose(props, _excluded);
+
+  if (process.env.NODE_ENV !== "production") {
     if (props.children) {
-      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
+      throw new Error(
+        "The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning."
+      );
     }
   }
 
   var _React$useState = React.useState(() => {
-    var uri = resolveAssetUri(source);
+      var uri = resolveAssetUri(source);
 
-    if (uri != null) {
-      var isLoaded = ImageLoader.has(uri);
+      if (uri != null) {
+        var isLoaded = ImageLoader.has(uri);
 
-      if (isLoaded) {
-        return LOADED;
+        if (isLoaded) {
+          return LOADED;
+        }
       }
-    }
 
-    return IDLE;
-  }),
-      state = _React$useState[0],
-      updateState = _React$useState[1];
+      return IDLE;
+    }),
+    state = _React$useState[0],
+    updateState = _React$useState[1];
 
   var _React$useState2 = React.useState({}),
-      layout = _React$useState2[0],
-      updateLayout = _React$useState2[1];
+    layout = _React$useState2[0],
+    updateLayout = _React$useState2[1];
 
   var hasTextAncestor = React.useContext(TextAncestorContext);
   var hiddenImageRef = React.useRef(null);
   var filterRef = React.useRef(_filterId++);
   var requestRef = React.useRef(null);
-  var shouldDisplaySource = state === LOADED || state === LOADING && defaultSource == null;
+  var shouldDisplaySource =
+    state === LOADED || (state === LOADING && defaultSource == null);
 
   var _getFlatStyle = getFlatStyle(style, blurRadius, filterRef.current),
-      flatStyle = _getFlatStyle[0],
-      _resizeMode = _getFlatStyle[1],
-      filter = _getFlatStyle[2],
-      tintColor = _getFlatStyle[3];
+    flatStyle = _getFlatStyle[0],
+    _resizeMode = _getFlatStyle[1],
+    filter = _getFlatStyle[2],
+    tintColor = _getFlatStyle[3];
 
-  var resizeMode = props.resizeMode || _resizeMode || 'cover';
+  var resizeMode = props.resizeMode || _resizeMode || "cover";
   var selectedSource = shouldDisplaySource ? source : defaultSource;
   var displayImageUri = resolveAssetUri(selectedSource);
   var imageSizeStyle = resolveAssetDimensions(selectedSource);
-  var backgroundImage = displayImageUri ? "url(\"" + displayImageUri + "\")" : null;
+  var backgroundImage = displayImageUri
+    ? 'url("' + displayImageUri + '")'
+    : null;
   var backgroundSize = getBackgroundSize(); // Accessibility image allows users to trigger the browser's image context menu
 
-  var hiddenImage = displayImageUri ? createElement('img', {
-    alt: accessibilityLabel || '',
-    style: styles.accessibilityImage$raw,
-    draggable: draggable || false,
-    ref: hiddenImageRef,
-    src: displayImageUri
-  }) : null;
+  var hiddenImage = displayImageUri
+    ? createElement("img", {
+        alt: accessibilityLabel || "",
+        style: styles.accessibilityImage$raw,
+        draggable: draggable || false,
+        ref: hiddenImageRef,
+        src: displayImageUri,
+      })
+    : null;
 
   function getBackgroundSize() {
-    if (hiddenImageRef.current != null && (resizeMode === 'center' || resizeMode === 'repeat')) {
+    if (
+      hiddenImageRef.current != null &&
+      (resizeMode === "center" || resizeMode === "repeat")
+    ) {
       var _hiddenImageRef$curre = hiddenImageRef.current,
-          naturalHeight = _hiddenImageRef$curre.naturalHeight,
-          naturalWidth = _hiddenImageRef$curre.naturalWidth;
+        naturalHeight = _hiddenImageRef$curre.naturalHeight,
+        naturalWidth = _hiddenImageRef$curre.naturalWidth;
       var _height3 = layout.height,
-          _width3 = layout.width;
+        _width3 = layout.width;
 
       if (naturalHeight && naturalWidth && _height3 && _width3) {
-        var scaleFactor = Math.min(1, _width3 / naturalWidth, _height3 / naturalHeight);
+        var scaleFactor = Math.min(
+          1,
+          _width3 / naturalWidth,
+          _height3 / naturalHeight
+        );
         var x = Math.ceil(scaleFactor * naturalWidth);
         var y = Math.ceil(scaleFactor * naturalHeight);
         return x + "px " + y + "px";
@@ -244,14 +305,13 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
   }
 
   function handleLayout(e) {
-    if (resizeMode === 'center' || resizeMode === 'repeat' || onLayout) {
+    if (resizeMode === "center" || resizeMode === "repeat" || onLayout) {
       var _layout = e.nativeEvent.layout;
       onLayout && onLayout(e);
       updateLayout(_layout);
     }
   } // Image loading
 
-
   var uri = resolveAssetUri(source);
   React.useEffect(() => {
     abortPendingRequest();
@@ -263,31 +323,35 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
         onLoadStart();
       }
 
-      requestRef.current = ImageLoader.load(uri, function load(e) {
-        updateState(LOADED);
-
-        if (onLoad) {
-          onLoad(e);
+      requestRef.current = ImageLoader.load(
+        uri,
+        function load(e) {
+          updateState(LOADED);
+
+          if (onLoad) {
+            onLoad(e);
+          }
+
+          if (onLoadEnd) {
+            onLoadEnd();
+          }
+        },
+        function error() {
+          updateState(ERRORED);
+
+          if (onError) {
+            onError({
+              nativeEvent: {
+                error: "Failed to load resource " + uri + " (404)",
+              },
+            });
+          }
+
+          if (onLoadEnd) {
+            onLoadEnd();
+          }
         }
-
-        if (onLoadEnd) {
-          onLoadEnd();
-        }
-      }, function error() {
-        updateState(ERRORED);
-
-        if (onError) {
-          onError({
-            nativeEvent: {
-              error: "Failed to load resource " + uri + " (404)"
-            }
-          });
-        }
-
-        if (onLoadEnd) {
-          onLoadEnd();
-        }
-      });
+      );
     }
 
     function abortPendingRequest() {
@@ -299,23 +363,40 @@ var Image = /*#__PURE__*/React.forwardRef((props, ref) => {
 
     return abortPendingRequest;
   }, [uri, requestRef, updateState, onError, onLoad, onLoadEnd, onLoadStart]);
-  return /*#__PURE__*/React.createElement(View, _extends({}, rest, {
-    accessibilityLabel: accessibilityLabel,
-    onLayout: handleLayout,
-    pointerEvents: pointerEvents,
-    ref: ref,
-    style: [styles.root, hasTextAncestor && styles.inline, imageSizeStyle, flatStyle]
-  }), /*#__PURE__*/React.createElement(View, {
-    style: [styles.image, resizeModeStyles[resizeMode], {
-      backgroundImage,
-      filter
-    }, backgroundSize != null && {
-      backgroundSize
-    }],
-    suppressHydrationWarning: true
-  }), hiddenImage, createTintColorSVG(tintColor, filterRef.current));
+  return /*#__PURE__*/ React.createElement(
+    View,
+    _extends({}, rest, {
+      accessibilityLabel: accessibilityLabel,
+      onLayout: handleLayout,
+      pointerEvents: pointerEvents,
+      ref: ref,
+      style: [
+        styles.root,
+        hasTextAncestor && styles.inline,
+        imageSizeStyle,
+        flatStyle,
+      ],
+    }),
+    /*#__PURE__*/ React.createElement(View, {
+      style: [
+        styles.image,
+        resizeModeStyles[resizeMode],
+        {
+          backgroundImage,
+          filter,
+          transform,
+        },
+        backgroundSize != null && {
+          backgroundSize,
+        },
+      ],
+      suppressHydrationWarning: true,
+    }),
+    hiddenImage,
+    createTintColorSVG(tintColor, filterRef.current)
+  );
 });
-Image.displayName = 'Image'; // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
+Image.displayName = "Image"; // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 
 var ImageWithStatics = Image;
 
@@ -333,50 +414,58 @@ ImageWithStatics.queryCache = function (uris) {
 
 var styles = StyleSheet.create({
   root: {
-    flexBasis: 'auto',
-    overflow: 'hidden',
-    zIndex: 0
+    flexBasis: "auto",
+    overflow: "hidden",
+    zIndex: 0,
   },
   inline: {
-    display: 'inline-flex'
+    display: "inline-flex",
   },
-  image: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {
-    backgroundColor: 'transparent',
-    backgroundPosition: 'center',
-    backgroundRepeat: 'no-repeat',
-    backgroundSize: 'cover',
-    height: '100%',
-    width: '100%',
-    zIndex: -1
-  }),
-  accessibilityImage$raw: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {
-    height: '100%',
-    opacity: 0,
-    width: '100%',
-    zIndex: -1
-  })
+  image: _objectSpread(
+    _objectSpread({}, StyleSheet.absoluteFillObject),
+    {},
+    {
+      backgroundColor: "transparent",
+      backgroundPosition: "center",
+      backgroundRepeat: "no-repeat",
+      backgroundSize: "cover",
+      height: "100%",
+      width: "100%",
+      zIndex: -1,
+    }
+  ),
+  accessibilityImage$raw: _objectSpread(
+    _objectSpread({}, StyleSheet.absoluteFillObject),
+    {},
+    {
+      height: "100%",
+      opacity: 0,
+      width: "100%",
+      zIndex: -1,
+    }
+  ),
 });
 var resizeModeStyles = StyleSheet.create({
   center: {
-    backgroundSize: 'auto'
+    backgroundSize: "auto",
   },
   contain: {
-    backgroundSize: 'contain'
+    backgroundSize: "contain",
   },
   cover: {
-    backgroundSize: 'cover'
+    backgroundSize: "cover",
   },
   none: {
-    backgroundPosition: '0',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundSize: "auto",
   },
   repeat: {
-    backgroundPosition: '0',
-    backgroundRepeat: 'repeat',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundRepeat: "repeat",
+    backgroundSize: "auto",
   },
   stretch: {
-    backgroundSize: '100% 100%'
-  }
+    backgroundSize: "100% 100%",
+  },
 });
 export default ImageWithStatics;
diff --git a/dist/exports/Text/index.js b/dist/exports/Text/index.js
index 2f997182e4e944ef362624cacb2cc96b7ed5ccfd..bcaa19c3ce95e8fc414996aef418ac249554c3f9 100644
--- a/dist/exports/Text/index.js
+++ b/dist/exports/Text/index.js
@@ -1,6 +1,29 @@
 import _objectSpread from "@babel/runtime/helpers/objectSpread2";
 import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
-var _excluded = ["hrefAttrs", "numberOfLines", "onClick", "onLayout", "onPress", "onMoveShouldSetResponder", "onMoveShouldSetResponderCapture", "onResponderEnd", "onResponderGrant", "onResponderMove", "onResponderReject", "onResponderRelease", "onResponderStart", "onResponderTerminate", "onResponderTerminationRequest", "onScrollShouldSetResponder", "onScrollShouldSetResponderCapture", "onSelectionChangeShouldSetResponder", "onSelectionChangeShouldSetResponderCapture", "onStartShouldSetResponder", "onStartShouldSetResponderCapture", "selectable"];
+var _excluded = [
+  "hrefAttrs",
+  "numberOfLines",
+  "onClick",
+  "onLayout",
+  "onPress",
+  "onMoveShouldSetResponder",
+  "onMoveShouldSetResponderCapture",
+  "onResponderEnd",
+  "onResponderGrant",
+  "onResponderMove",
+  "onResponderReject",
+  "onResponderRelease",
+  "onResponderStart",
+  "onResponderTerminate",
+  "onResponderTerminationRequest",
+  "onScrollShouldSetResponder",
+  "onScrollShouldSetResponderCapture",
+  "onSelectionChangeShouldSetResponder",
+  "onSelectionChangeShouldSetResponderCapture",
+  "onStartShouldSetResponder",
+  "onStartShouldSetResponderCapture",
+  "selectable",
+];
 
 /**
  * Copyright (c) Nicolas Gallagher.
@@ -9,57 +32,70 @@ var _excluded = ["hrefAttrs", "numberOfLines", "onClick", "onLayout", "onPress",
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  */
-import * as React from 'react';
-import createElement from '../createElement';
-import * as forwardedProps from '../../modules/forwardedProps';
-import pick from '../../modules/pick';
-import useElementLayout from '../../modules/useElementLayout';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import useResponderEvents from '../../modules/useResponderEvents';
-import StyleSheet from '../StyleSheet';
-import TextAncestorContext from './TextAncestorContext';
-import { useLocaleContext, getLocaleDirection } from '../../modules/useLocale';
-var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {
-  href: true,
-  lang: true,
-  pointerEvents: true
-});
+import * as React from "react";
+import createElement from "../createElement";
+import * as forwardedProps from "../../modules/forwardedProps";
+import pick from "../../modules/pick";
+import useElementLayout from "../../modules/useElementLayout";
+import useMergeRefs from "../../modules/useMergeRefs";
+import usePlatformMethods from "../../modules/usePlatformMethods";
+import useResponderEvents from "../../modules/useResponderEvents";
+import StyleSheet from "../StyleSheet";
+import TextAncestorContext from "./TextAncestorContext";
+import { useLocaleContext, getLocaleDirection } from "../../modules/useLocale";
+var forwardPropsList = Object.assign(
+  {},
+  forwardedProps.defaultProps,
+  forwardedProps.accessibilityProps,
+  forwardedProps.clickProps,
+  forwardedProps.focusProps,
+  forwardedProps.keyboardProps,
+  forwardedProps.mouseProps,
+  forwardedProps.touchProps,
+  forwardedProps.styleProps,
+  {
+    href: true,
+    lang: true,
+    pointerEvents: true,
+  }
+);
 
-var pickProps = props => pick(props, forwardPropsList);
+var pickProps = (props) => pick(props, forwardPropsList);
 
-var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
+var Text = /*#__PURE__*/ React.forwardRef((props, forwardedRef) => {
   var hrefAttrs = props.hrefAttrs,
-      numberOfLines = props.numberOfLines,
-      onClick = props.onClick,
-      onLayout = props.onLayout,
-      onPress = props.onPress,
-      onMoveShouldSetResponder = props.onMoveShouldSetResponder,
-      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
-      onResponderEnd = props.onResponderEnd,
-      onResponderGrant = props.onResponderGrant,
-      onResponderMove = props.onResponderMove,
-      onResponderReject = props.onResponderReject,
-      onResponderRelease = props.onResponderRelease,
-      onResponderStart = props.onResponderStart,
-      onResponderTerminate = props.onResponderTerminate,
-      onResponderTerminationRequest = props.onResponderTerminationRequest,
-      onScrollShouldSetResponder = props.onScrollShouldSetResponder,
-      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
-      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,
-      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,
-      onStartShouldSetResponder = props.onStartShouldSetResponder,
-      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
-      selectable = props.selectable,
-      rest = _objectWithoutPropertiesLoose(props, _excluded);
+    numberOfLines = props.numberOfLines,
+    onClick = props.onClick,
+    onLayout = props.onLayout,
+    onPress = props.onPress,
+    onMoveShouldSetResponder = props.onMoveShouldSetResponder,
+    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
+    onResponderEnd = props.onResponderEnd,
+    onResponderGrant = props.onResponderGrant,
+    onResponderMove = props.onResponderMove,
+    onResponderReject = props.onResponderReject,
+    onResponderRelease = props.onResponderRelease,
+    onResponderStart = props.onResponderStart,
+    onResponderTerminate = props.onResponderTerminate,
+    onResponderTerminationRequest = props.onResponderTerminationRequest,
+    onScrollShouldSetResponder = props.onScrollShouldSetResponder,
+    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
+    onSelectionChangeShouldSetResponder =
+      props.onSelectionChangeShouldSetResponder,
+    onSelectionChangeShouldSetResponderCapture =
+      props.onSelectionChangeShouldSetResponderCapture,
+    onStartShouldSetResponder = props.onStartShouldSetResponder,
+    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
+    selectable = props.selectable,
+    rest = _objectWithoutPropertiesLoose(props, _excluded);
 
   var hasTextAncestor = React.useContext(TextAncestorContext);
   var hostRef = React.useRef(null);
 
   var _useLocaleContext = useLocaleContext(),
-      contextDirection = _useLocaleContext.direction;
+    contextDirection = _useLocaleContext.direction;
 
   useElementLayout(hostRef, onLayout);
   useResponderEvents(hostRef, {
@@ -78,42 +114,57 @@ var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
     onSelectionChangeShouldSetResponder,
     onSelectionChangeShouldSetResponderCapture,
     onStartShouldSetResponder,
-    onStartShouldSetResponderCapture
+    onStartShouldSetResponderCapture,
   });
-  var handleClick = React.useCallback(e => {
-    if (onClick != null) {
-      onClick(e);
-    } else if (onPress != null) {
-      e.stopPropagation();
-      onPress(e);
-    }
-  }, [onClick, onPress]);
-  var component = hasTextAncestor ? 'span' : 'div';
-  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;
+  var handleClick = React.useCallback(
+    (e) => {
+      if (onClick != null) {
+        onClick(e);
+      } else if (onPress != null) {
+        e.stopPropagation();
+        onPress(e);
+      }
+    },
+    [onClick, onPress]
+  );
+  var component = hasTextAncestor ? "span" : "div";
+  var langDirection =
+    props.lang != null ? getLocaleDirection(props.lang) : null;
   var componentDirection = props.dir || langDirection;
   var writingDirection = componentDirection || contextDirection;
   var supportedProps = pickProps(rest);
-  supportedProps.dir = componentDirection; // 'auto' by default allows browsers to infer writing direction (root elements only)
+  supportedProps.dir = componentDirection; // 'ltr' by default allows browsers to infer writing direction (root elements only)
 
   if (!hasTextAncestor) {
-    supportedProps.dir = componentDirection != null ? componentDirection : 'auto';
+    supportedProps.dir =
+      componentDirection != null ? componentDirection : "ltr";
   }
 
   if (onClick || onPress) {
     supportedProps.onClick = handleClick;
   }
 
-  supportedProps.style = [numberOfLines != null && numberOfLines > 1 && {
-    WebkitLineClamp: numberOfLines
-  }, hasTextAncestor === true ? styles.textHasAncestor$raw : styles.text$raw, numberOfLines === 1 && styles.textOneLine, numberOfLines != null && numberOfLines > 1 && styles.textMultiLine, props.style, selectable === true && styles.selectable, selectable === false && styles.notSelectable, onPress && styles.pressable];
+  supportedProps.style = [
+    numberOfLines != null &&
+      numberOfLines > 1 && {
+        WebkitLineClamp: numberOfLines,
+      },
+    hasTextAncestor === true ? styles.textHasAncestor$raw : styles.text$raw,
+    numberOfLines === 1 && styles.textOneLine,
+    numberOfLines != null && numberOfLines > 1 && styles.textMultiLine,
+    props.style,
+    selectable === true && styles.selectable,
+    selectable === false && styles.notSelectable,
+    onPress && styles.pressable,
+  ];
 
   if (props.href != null) {
-    component = 'a';
+    component = "a";
 
     if (hrefAttrs != null) {
       var download = hrefAttrs.download,
-          rel = hrefAttrs.rel,
-          target = hrefAttrs.target;
+        rel = hrefAttrs.rel,
+        target = hrefAttrs.target;
 
       if (download != null) {
         supportedProps.download = download;
@@ -123,8 +174,9 @@ var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
         supportedProps.rel = rel;
       }
 
-      if (typeof target === 'string') {
-        supportedProps.target = target.charAt(0) !== '_' ? '_' + target : target;
+      if (typeof target === "string") {
+        supportedProps.target =
+          target.charAt(0) !== "_" ? "_" + target : target;
       }
     }
   }
@@ -133,58 +185,68 @@ var Text = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
   var setRef = useMergeRefs(hostRef, platformMethodsRef, forwardedRef);
   supportedProps.ref = setRef;
   var element = createElement(component, supportedProps, {
-    writingDirection
+    writingDirection,
   });
-  return hasTextAncestor ? element : /*#__PURE__*/React.createElement(TextAncestorContext.Provider, {
-    value: true
-  }, element);
+  return hasTextAncestor
+    ? element
+    : /*#__PURE__*/ React.createElement(
+        TextAncestorContext.Provider,
+        {
+          value: true,
+        },
+        element
+      );
 });
-Text.displayName = 'Text';
+Text.displayName = "Text";
 var textStyle = {
-  backgroundColor: 'transparent',
-  border: '0 solid black',
-  boxSizing: 'border-box',
-  color: 'black',
-  display: 'inline',
-  font: '14px System',
-  listStyle: 'none',
+  backgroundColor: "transparent",
+  border: "0 solid black",
+  boxSizing: "border-box",
+  color: "black",
+  display: "inline",
+  font: "14px System",
+  listStyle: "none",
   margin: 0,
   padding: 0,
-  textAlign: 'inherit',
-  textDecoration: 'none',
-  whiteSpace: 'pre-wrap',
-  wordWrap: 'break-word'
+  textAlign: "inherit",
+  textDecoration: "none",
+  whiteSpace: "pre-wrap",
+  wordWrap: "break-word",
 };
 var styles = StyleSheet.create({
   text$raw: textStyle,
-  textHasAncestor$raw: _objectSpread(_objectSpread({}, textStyle), {}, {
-    color: 'inherit',
-    font: 'inherit',
-    whiteSpace: 'inherit'
-  }),
+  textHasAncestor$raw: _objectSpread(
+    _objectSpread({}, textStyle),
+    {},
+    {
+      color: "inherit",
+      font: "inherit",
+      whiteSpace: "inherit",
+    }
+  ),
   textOneLine: {
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    whiteSpace: 'nowrap',
-    wordWrap: 'normal'
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    whiteSpace: "nowrap",
+    wordWrap: "normal",
   },
   // See #13
   textMultiLine: {
-    display: '-webkit-box',
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    WebkitBoxOrient: 'vertical'
+    display: "-webkit-box",
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    WebkitBoxOrient: "vertical",
   },
   notSelectable: {
-    userSelect: 'none'
+    userSelect: "none",
   },
   selectable: {
-    userSelect: 'text'
+    userSelect: "text",
   },
   pressable: {
-    cursor: 'pointer'
-  }
+    cursor: "pointer",
+  },
 });
 export default Text;
diff --git a/dist/exports/TextInput/index.js b/dist/exports/TextInput/index.js
index f57d4bdcfdc5843de2252f62d694f5158fb0a441..c0fe3b4f8323a2eb08252c21a45485dd216f25b9 100644
--- a/dist/exports/TextInput/index.js
+++ b/dist/exports/TextInput/index.js
@@ -5,20 +5,20 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  */
-import * as React from 'react';
-import createElement from '../createElement';
-import * as forwardedProps from '../../modules/forwardedProps';
-import pick from '../../modules/pick';
-import useElementLayout from '../../modules/useElementLayout';
-import useLayoutEffect from '../../modules/useLayoutEffect';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import useResponderEvents from '../../modules/useResponderEvents';
-import { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';
-import StyleSheet from '../StyleSheet';
-import TextInputState from '../../modules/TextInputState';
+import * as React from "react";
+import createElement from "../createElement";
+import * as forwardedProps from "../../modules/forwardedProps";
+import pick from "../../modules/pick";
+import useElementLayout from "../../modules/useElementLayout";
+import useLayoutEffect from "../../modules/useLayoutEffect";
+import useMergeRefs from "../../modules/useMergeRefs";
+import usePlatformMethods from "../../modules/usePlatformMethods";
+import useResponderEvents from "../../modules/useResponderEvents";
+import { getLocaleDirection, useLocaleContext } from "../../modules/useLocale";
+import StyleSheet from "../StyleSheet";
+import TextInputState from "../../modules/TextInputState";
 /**
  * Determines whether a 'selection' prop differs from a node's existing
  * selection state.
@@ -26,9 +26,9 @@ import TextInputState from '../../modules/TextInputState';
 
 var isSelectionStale = (node, selection) => {
   var selectionEnd = node.selectionEnd,
-      selectionStart = node.selectionStart;
+    selectionStart = node.selectionStart;
   var start = selection.start,
-      end = selection.end;
+    end = selection.end;
   return start !== selectionStart || end !== selectionEnd;
 };
 /**
@@ -36,11 +36,10 @@ var isSelectionStale = (node, selection) => {
  * error.
  */
 
-
 var setSelection = (node, selection) => {
   if (isSelectionStale(node, selection)) {
     var start = selection.start,
-        end = selection.end;
+      end = selection.end;
 
     try {
       node.setSelectionRange(start, end || start);
@@ -48,165 +47,192 @@ var setSelection = (node, selection) => {
   }
 };
 
-var forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {
-  autoCapitalize: true,
-  autoComplete: true,
-  autoCorrect: true,
-  autoFocus: true,
-  defaultValue: true,
-  disabled: true,
-  lang: true,
-  maxLength: true,
-  onChange: true,
-  onScroll: true,
-  placeholder: true,
-  pointerEvents: true,
-  readOnly: true,
-  rows: true,
-  spellCheck: true,
-  value: true,
-  type: true
-});
+var forwardPropsList = Object.assign(
+  {},
+  forwardedProps.defaultProps,
+  forwardedProps.accessibilityProps,
+  forwardedProps.clickProps,
+  forwardedProps.focusProps,
+  forwardedProps.keyboardProps,
+  forwardedProps.mouseProps,
+  forwardedProps.touchProps,
+  forwardedProps.styleProps,
+  {
+    autoCapitalize: true,
+    autoComplete: true,
+    autoCorrect: true,
+    autoFocus: true,
+    defaultValue: true,
+    disabled: true,
+    lang: true,
+    maxLength: true,
+    onChange: true,
+    onScroll: true,
+    placeholder: true,
+    pointerEvents: true,
+    readOnly: true,
+    rows: true,
+    spellCheck: true,
+    value: true,
+    type: true,
+  }
+);
 
-var pickProps = props => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.
+var pickProps = (props) => pick(props, forwardPropsList); // If an Input Method Editor is processing key input, the 'keyCode' is 229.
 // https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
 
-
 function isEventComposing(nativeEvent) {
   return nativeEvent.isComposing || nativeEvent.keyCode === 229;
 }
 
 var focusTimeout = null;
-var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
+var TextInput = /*#__PURE__*/ React.forwardRef((props, forwardedRef) => {
   var _props$autoCapitalize = props.autoCapitalize,
-      autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,
-      autoComplete = props.autoComplete,
-      autoCompleteType = props.autoCompleteType,
-      _props$autoCorrect = props.autoCorrect,
-      autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,
-      blurOnSubmit = props.blurOnSubmit,
-      clearTextOnFocus = props.clearTextOnFocus,
-      dir = props.dir,
-      _props$editable = props.editable,
-      editable = _props$editable === void 0 ? true : _props$editable,
-      _props$keyboardType = props.keyboardType,
-      keyboardType = _props$keyboardType === void 0 ? 'default' : _props$keyboardType,
-      _props$multiline = props.multiline,
-      multiline = _props$multiline === void 0 ? false : _props$multiline,
-      _props$numberOfLines = props.numberOfLines,
-      numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,
-      onBlur = props.onBlur,
-      onChange = props.onChange,
-      onChangeText = props.onChangeText,
-      onContentSizeChange = props.onContentSizeChange,
-      onFocus = props.onFocus,
-      onKeyPress = props.onKeyPress,
-      onLayout = props.onLayout,
-      onMoveShouldSetResponder = props.onMoveShouldSetResponder,
-      onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
-      onResponderEnd = props.onResponderEnd,
-      onResponderGrant = props.onResponderGrant,
-      onResponderMove = props.onResponderMove,
-      onResponderReject = props.onResponderReject,
-      onResponderRelease = props.onResponderRelease,
-      onResponderStart = props.onResponderStart,
-      onResponderTerminate = props.onResponderTerminate,
-      onResponderTerminationRequest = props.onResponderTerminationRequest,
-      onScrollShouldSetResponder = props.onScrollShouldSetResponder,
-      onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
-      onSelectionChange = props.onSelectionChange,
-      onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,
-      onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,
-      onStartShouldSetResponder = props.onStartShouldSetResponder,
-      onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
-      onSubmitEditing = props.onSubmitEditing,
-      placeholderTextColor = props.placeholderTextColor,
-      returnKeyType = props.returnKeyType,
-      _props$secureTextEntr = props.secureTextEntry,
-      secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,
-      selection = props.selection,
-      selectTextOnFocus = props.selectTextOnFocus,
-      spellCheck = props.spellCheck;
+    autoCapitalize =
+      _props$autoCapitalize === void 0 ? "sentences" : _props$autoCapitalize,
+    autoComplete = props.autoComplete,
+    autoCompleteType = props.autoCompleteType,
+    _props$autoCorrect = props.autoCorrect,
+    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,
+    blurOnSubmit = props.blurOnSubmit,
+    clearTextOnFocus = props.clearTextOnFocus,
+    dir = props.dir,
+    _props$editable = props.editable,
+    editable = _props$editable === void 0 ? true : _props$editable,
+    _props$keyboardType = props.keyboardType,
+    keyboardType =
+      _props$keyboardType === void 0 ? "default" : _props$keyboardType,
+    _props$multiline = props.multiline,
+    multiline = _props$multiline === void 0 ? false : _props$multiline,
+    _props$numberOfLines = props.numberOfLines,
+    numberOfLines = _props$numberOfLines === void 0 ? 1 : _props$numberOfLines,
+    onBlur = props.onBlur,
+    onChange = props.onChange,
+    onChangeText = props.onChangeText,
+    onContentSizeChange = props.onContentSizeChange,
+    onFocus = props.onFocus,
+    onKeyPress = props.onKeyPress,
+    onLayout = props.onLayout,
+    onMoveShouldSetResponder = props.onMoveShouldSetResponder,
+    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,
+    onResponderEnd = props.onResponderEnd,
+    onResponderGrant = props.onResponderGrant,
+    onResponderMove = props.onResponderMove,
+    onResponderReject = props.onResponderReject,
+    onResponderRelease = props.onResponderRelease,
+    onResponderStart = props.onResponderStart,
+    onResponderTerminate = props.onResponderTerminate,
+    onResponderTerminationRequest = props.onResponderTerminationRequest,
+    onScrollShouldSetResponder = props.onScrollShouldSetResponder,
+    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,
+    onSelectionChange = props.onSelectionChange,
+    onSelectionChangeShouldSetResponder =
+      props.onSelectionChangeShouldSetResponder,
+    onSelectionChangeShouldSetResponderCapture =
+      props.onSelectionChangeShouldSetResponderCapture,
+    onStartShouldSetResponder = props.onStartShouldSetResponder,
+    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,
+    onSubmitEditing = props.onSubmitEditing,
+    placeholderTextColor = props.placeholderTextColor,
+    returnKeyType = props.returnKeyType,
+    _props$secureTextEntr = props.secureTextEntry,
+    secureTextEntry =
+      _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,
+    selection = props.selection,
+    selectTextOnFocus = props.selectTextOnFocus,
+    spellCheck = props.spellCheck;
   var type;
   var inputMode;
 
   switch (keyboardType) {
-    case 'email-address':
-      type = 'email';
+    case "email-address":
+      type = "email";
       break;
 
-    case 'number-pad':
-    case 'numeric':
-      inputMode = 'numeric';
+    case "number-pad":
+    case "numeric":
+      inputMode = "numeric";
       break;
 
-    case 'decimal-pad':
-      inputMode = 'decimal';
+    case "decimal-pad":
+      inputMode = "decimal";
       break;
 
-    case 'phone-pad':
-      type = 'tel';
+    case "phone-pad":
+      type = "tel";
       break;
 
-    case 'search':
-    case 'web-search':
-      type = 'search';
+    case "search":
+    case "web-search":
+      type = "search";
       break;
 
-    case 'url':
-      type = 'url';
+    case "url":
+      type = "url";
       break;
 
     default:
-      type = 'text';
+      type = "text";
   }
 
   if (secureTextEntry) {
-    type = 'password';
+    type = "password";
   }
 
   var dimensions = React.useRef({
     height: null,
-    width: null
+    width: null,
   });
   var hostRef = React.useRef(null);
-  var handleContentSizeChange = React.useCallback(hostNode => {
-    if (multiline && onContentSizeChange && hostNode != null) {
-      var newHeight = hostNode.scrollHeight;
-      var newWidth = hostNode.scrollWidth;
-
-      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {
-        dimensions.current.height = newHeight;
-        dimensions.current.width = newWidth;
-        onContentSizeChange({
-          nativeEvent: {
-            contentSize: {
-              height: dimensions.current.height,
-              width: dimensions.current.width
-            }
-          }
-        });
-      }
-    }
-  }, [multiline, onContentSizeChange]);
-  var imperativeRef = React.useMemo(() => hostNode => {
-    // TextInput needs to add more methods to the hostNode in addition to those
-    // added by `usePlatformMethods`. This is temporarily until an API like
-    // `TextInput.clear(hostRef)` is added to React Native.
-    if (hostNode != null) {
-      hostNode.clear = function () {
-        if (hostNode != null) {
-          hostNode.value = '';
+  var handleContentSizeChange = React.useCallback(
+    (hostNode) => {
+      if (multiline && onContentSizeChange && hostNode != null) {
+        var newHeight = hostNode.scrollHeight;
+        var newWidth = hostNode.scrollWidth;
+
+        if (
+          newHeight !== dimensions.current.height ||
+          newWidth !== dimensions.current.width
+        ) {
+          dimensions.current.height = newHeight;
+          dimensions.current.width = newWidth;
+          onContentSizeChange({
+            nativeEvent: {
+              contentSize: {
+                height: dimensions.current.height,
+                width: dimensions.current.width,
+              },
+            },
+          });
         }
-      };
+      }
+    },
+    [multiline, onContentSizeChange]
+  );
+  var imperativeRef = React.useMemo(
+    () => (hostNode) => {
+      // TextInput needs to add more methods to the hostNode in addition to those
+      // added by `usePlatformMethods`. This is temporarily until an API like
+      // `TextInput.clear(hostRef)` is added to React Native.
+      if (hostNode != null) {
+        hostNode.clear = function () {
+          if (hostNode != null) {
+            hostNode.value = "";
+          }
+        };
 
-      hostNode.isFocused = function () {
-        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;
-      };
+        hostNode.isFocused = function () {
+          return (
+            hostNode != null &&
+            TextInputState.currentlyFocusedField() === hostNode
+          );
+        };
 
-      handleContentSizeChange(hostNode);
-    }
-  }, [handleContentSizeChange]);
+        handleContentSizeChange(hostNode);
+      }
+    },
+    [handleContentSizeChange]
+  );
 
   function handleBlur(e) {
     TextInputState._currentlyFocusedNode = null;
@@ -244,7 +270,7 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       TextInputState._currentlyFocusedNode = hostNode;
 
       if (clearTextOnFocus) {
-        hostNode.value = '';
+        hostNode.value = "";
       }
 
       if (selectTextOnFocus) {
@@ -267,7 +293,8 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
 
     e.stopPropagation();
     var blurOnSubmitDefault = !multiline;
-    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;
+    var shouldBlurOnSubmit =
+      blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;
     var nativeEvent = e.nativeEvent;
     var isComposing = isEventComposing(nativeEvent);
 
@@ -275,8 +302,12 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       onKeyPress(e);
     }
 
-    if (e.key === 'Enter' && !e.shiftKey && // Do not call submit if composition is occuring.
-    !isComposing && !e.isDefaultPrevented()) {
+    if (
+      e.key === "Enter" &&
+      !e.shiftKey && // Do not call submit if composition is occuring.
+      !isComposing &&
+      !e.isDefaultPrevented()
+    ) {
       if ((blurOnSubmit || !multiline) && onSubmitEditing) {
         // prevent "Enter" from inserting a newline or submitting a form
         e.preventDefault();
@@ -295,10 +326,10 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       try {
         var node = e.target;
         var selectionStart = node.selectionStart,
-            selectionEnd = node.selectionEnd;
+          selectionEnd = node.selectionEnd;
         e.nativeEvent.selection = {
           start: selectionStart,
-          end: selectionEnd
+          end: selectionEnd,
         };
         e.nativeEvent.text = e.target.value;
         onSelectionChange(e);
@@ -317,7 +348,7 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
       TextInputState._currentlyFocusedNode = node;
     }
   }, [hostRef, selection]);
-  var component = multiline ? 'textarea' : 'input';
+  var component = multiline ? "textarea" : "input";
   useElementLayout(hostRef, onLayout);
   useResponderEvents(hostRef, {
     onMoveShouldSetResponder,
@@ -335,18 +366,18 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
     onSelectionChangeShouldSetResponder,
     onSelectionChangeShouldSetResponderCapture,
     onStartShouldSetResponder,
-    onStartShouldSetResponderCapture
+    onStartShouldSetResponderCapture,
   });
 
   var _useLocaleContext = useLocaleContext(),
-      contextDirection = _useLocaleContext.direction;
+    contextDirection = _useLocaleContext.direction;
 
   var supportedProps = pickProps(props);
   supportedProps.autoCapitalize = autoCapitalize;
-  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';
-  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off'; // 'auto' by default allows browsers to infer writing direction
+  supportedProps.autoComplete = autoComplete || autoCompleteType || "on";
+  supportedProps.autoCorrect = autoCorrect ? "on" : "off"; // 'auto' by default allows browsers to infer writing direction
 
-  supportedProps.dir = dir !== undefined ? dir : 'auto';
+  supportedProps.dir = dir !== undefined ? dir : "ltr";
   supportedProps.enterKeyHint = returnKeyType;
   supportedProps.inputMode = inputMode;
   supportedProps.onBlur = handleBlur;
@@ -357,39 +388,50 @@ var TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
   supportedProps.readOnly = !editable;
   supportedProps.rows = multiline ? numberOfLines : undefined;
   supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;
-  supportedProps.style = [{
-    '--placeholderTextColor': placeholderTextColor
-  }, styles.textinput$raw, styles.placeholder, props.style];
+  supportedProps.style = [
+    {
+      "--placeholderTextColor": placeholderTextColor,
+    },
+    styles.textinput$raw,
+    styles.placeholder,
+    props.style,
+  ];
   supportedProps.type = multiline ? undefined : type;
   var platformMethodsRef = usePlatformMethods(supportedProps);
-  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);
+  var setRef = useMergeRefs(
+    hostRef,
+    platformMethodsRef,
+    imperativeRef,
+    forwardedRef
+  );
   supportedProps.ref = setRef;
-  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;
+  var langDirection =
+    props.lang != null ? getLocaleDirection(props.lang) : null;
   var componentDirection = props.dir || langDirection;
   var writingDirection = componentDirection || contextDirection;
   var element = createElement(component, supportedProps, {
-    writingDirection
+    writingDirection,
   });
   return element;
 });
-TextInput.displayName = 'TextInput'; // $FlowFixMe
+TextInput.displayName = "TextInput"; // $FlowFixMe
 
 TextInput.State = TextInputState;
 var styles = StyleSheet.create({
   textinput$raw: {
-    MozAppearance: 'textfield',
-    WebkitAppearance: 'none',
-    backgroundColor: 'transparent',
-    border: '0 solid black',
+    MozAppearance: "textfield",
+    WebkitAppearance: "none",
+    backgroundColor: "transparent",
+    border: "0 solid black",
     borderRadius: 0,
-    boxSizing: 'border-box',
-    font: '14px System',
+    boxSizing: "border-box",
+    font: "14px System",
     margin: 0,
     padding: 0,
-    resize: 'none'
+    resize: "none",
   },
   placeholder: {
-    placeholderTextColor: 'var(--placeholderTextColor)'
-  }
+    placeholderTextColor: "var(--placeholderTextColor)",
+  },
 });
 export default TextInput;
diff --git a/dist/vendor/react-native/VirtualizedList/index.js b/dist/vendor/react-native/VirtualizedList/index.js
index 801cc86c00539a8989670df44daa0f97158ac59a..4f987f250cc043a283f8ce2479ee1eb7941e9dcb 100644
--- a/dist/vendor/react-native/VirtualizedList/index.js
+++ b/dist/vendor/react-native/VirtualizedList/index.js
@@ -8,28 +8,35 @@ import _objectSpread from "@babel/runtime/helpers/objectSpread2";
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * 
+ *
  * @format
  */
-import Batchinator from '../Batchinator';
-import FillRateHelper from '../FillRateHelper';
-import findNodeHandle from '../../../exports/findNodeHandle';
-import RefreshControl from '../../../exports/RefreshControl';
-import ScrollView from '../../../exports/ScrollView';
-import StyleSheet from '../../../exports/StyleSheet';
-import View from '../../../exports/View';
-import ViewabilityHelper from '../ViewabilityHelper';
+import Batchinator from "../Batchinator";
+import FillRateHelper from "../FillRateHelper";
+import findNodeHandle from "../../../exports/findNodeHandle";
+import RefreshControl from "../../../exports/RefreshControl";
+import ScrollView from "../../../exports/ScrollView";
+import StyleSheet from "../../../exports/StyleSheet";
+import View from "../../../exports/View";
+import ViewabilityHelper from "../ViewabilityHelper";
 var flattenStyle = StyleSheet.flatten;
-import infoLog from '../infoLog';
-import invariant from 'fbjs/lib/invariant';
-import { keyExtractor as defaultKeyExtractor, computeWindowedRenderLimits } from '../VirtualizeUtils';
-import * as React from 'react';
-import { VirtualizedListCellContextProvider, VirtualizedListContext, VirtualizedListContextProvider } from './VirtualizedListContext.js';
-
-var __DEV__ = process.env.NODE_ENV !== 'production';
+import infoLog from "../infoLog";
+import invariant from "fbjs/lib/invariant";
+import {
+  keyExtractor as defaultKeyExtractor,
+  computeWindowedRenderLimits,
+} from "../VirtualizeUtils";
+import * as React from "react";
+import {
+  VirtualizedListCellContextProvider,
+  VirtualizedListContext,
+  VirtualizedListContextProvider,
+} from "./VirtualizedListContext.js";
+
+var __DEV__ = process.env.NODE_ENV !== "production";
 
 var _usedIndexForKey = false;
-var _keylessItemComponentName = '';
+var _keylessItemComponentName = "";
 
 /**
  * Default Props Helper Functions
@@ -40,27 +47,30 @@ function horizontalOrDefault(horizontal) {
   return horizontal !== null && horizontal !== void 0 ? horizontal : false;
 } // initialNumToRenderOrDefault(this.props.initialNumToRenderOrDefault)
 
-
 function initialNumToRenderOrDefault(initialNumToRender) {
-  return initialNumToRender !== null && initialNumToRender !== void 0 ? initialNumToRender : 10;
+  return initialNumToRender !== null && initialNumToRender !== void 0
+    ? initialNumToRender
+    : 10;
 } // maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)
 
-
 function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
-  return maxToRenderPerBatch !== null && maxToRenderPerBatch !== void 0 ? maxToRenderPerBatch : 10;
+  return maxToRenderPerBatch !== null && maxToRenderPerBatch !== void 0
+    ? maxToRenderPerBatch
+    : 10;
 } // onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold)
 
-
 function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
-  return onEndReachedThreshold !== null && onEndReachedThreshold !== void 0 ? onEndReachedThreshold : 2;
+  return onEndReachedThreshold !== null && onEndReachedThreshold !== void 0
+    ? onEndReachedThreshold
+    : 2;
 } // scrollEventThrottleOrDefault(this.props.scrollEventThrottle)
 
-
 function scrollEventThrottleOrDefault(scrollEventThrottle) {
-  return scrollEventThrottle !== null && scrollEventThrottle !== void 0 ? scrollEventThrottle : 50;
+  return scrollEventThrottle !== null && scrollEventThrottle !== void 0
+    ? scrollEventThrottle
+    : 50;
 } // windowSizeOrDefault(this.props.windowSize)
 
-
 function windowSizeOrDefault(windowSize) {
   return windowSize !== null && windowSize !== void 0 ? windowSize : 21;
 }
@@ -94,7 +104,6 @@ function windowSizeOrDefault(windowSize) {
  *
  */
 
-
 class VirtualizedList extends React.PureComponent {
   // scrollToEnd may be janky without getItemLayout prop
   scrollToEnd(params) {
@@ -103,89 +112,141 @@ class VirtualizedList extends React.PureComponent {
 
     var frame = this._getFrameMetricsApprox(veryLast);
 
-    var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
+    var offset = Math.max(
+      0,
+      frame.offset +
+        frame.length +
+        this._footerLength -
+        this._scrollMetrics.visibleLength
+    );
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontalOrDefault(this.props.horizontal)
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   } // scrollToIndex may be janky without getItemLayout prop
 
-
   scrollToIndex(params) {
     var _this$props = this.props,
-        data = _this$props.data,
-        horizontal = _this$props.horizontal,
-        getItemCount = _this$props.getItemCount,
-        getItemLayout = _this$props.getItemLayout,
-        onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
+      data = _this$props.data,
+      horizontal = _this$props.horizontal,
+      getItemCount = _this$props.getItemCount,
+      getItemLayout = _this$props.getItemLayout,
+      onScrollToIndexFailed = _this$props.onScrollToIndexFailed;
     var animated = params.animated,
-        index = params.index,
-        viewOffset = params.viewOffset,
-        viewPosition = params.viewPosition;
-    invariant(index >= 0, "scrollToIndex out of range: requested index " + index + " but minimum is 0");
-    invariant(getItemCount(data) >= 1, "scrollToIndex out of range: item length " + getItemCount(data) + " but minimum is 1");
-    invariant(index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " is out of 0 to " + (getItemCount(data) - 1));
+      index = params.index,
+      viewOffset = params.viewOffset,
+      viewPosition = params.viewPosition;
+    invariant(
+      index >= 0,
+      "scrollToIndex out of range: requested index " +
+        index +
+        " but minimum is 0"
+    );
+    invariant(
+      getItemCount(data) >= 1,
+      "scrollToIndex out of range: item length " +
+        getItemCount(data) +
+        " but minimum is 1"
+    );
+    invariant(
+      index < getItemCount(data),
+      "scrollToIndex out of range: requested index " +
+        index +
+        " is out of 0 to " +
+        (getItemCount(data) - 1)
+    );
 
     if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
-      invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
+      invariant(
+        !!onScrollToIndexFailed,
+        "scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, " +
+          "otherwise there is no way to know the location of offscreen indices or handle failures."
+      );
       onScrollToIndexFailed({
         averageItemLength: this._averageCellLength,
         highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
-        index
+        index,
       });
       return;
     }
 
     var frame = this._getFrameMetricsApprox(index);
 
-    var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
+    var offset =
+      Math.max(
+        0,
+        frame.offset -
+          (viewPosition || 0) *
+            (this._scrollMetrics.visibleLength - frame.length)
+      ) - (viewOffset || 0);
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontal ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontal
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   } // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -
   // use scrollToIndex instead if possible.
 
-
   scrollToItem(params) {
     var item = params.item;
     var _this$props2 = this.props,
-        data = _this$props2.data,
-        getItem = _this$props2.getItem,
-        getItemCount = _this$props2.getItemCount;
+      data = _this$props2.data,
+      getItem = _this$props2.getItem,
+      getItemCount = _this$props2.getItemCount;
     var itemCount = getItemCount(data);
 
     for (var _index = 0; _index < itemCount; _index++) {
       if (getItem(data, _index) === item) {
-        this.scrollToIndex(_objectSpread(_objectSpread({}, params), {}, {
-          index: _index
-        }));
+        this.scrollToIndex(
+          _objectSpread(
+            _objectSpread({}, params),
+            {},
+            {
+              index: _index,
+            }
+          )
+        );
         break;
       }
     }
@@ -201,35 +262,42 @@ class VirtualizedList extends React.PureComponent {
    * should do an animation while scrolling.
    */
 
-
   scrollToOffset(params) {
     var animated = params.animated,
-        offset = params.offset;
+      offset = params.offset;
 
     if (this._scrollRef == null) {
       return;
     }
 
     if (this._scrollRef.scrollTo == null) {
-      console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
+      console.warn(
+        "No scrollTo method provided. This may be because you have two nested " +
+          "VirtualizedLists with the same orientation, or because you are " +
+          "using a custom component that does not implement scrollTo."
+      );
       return;
     }
 
-    this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
-      x: offset,
-      animated
-    } : {
-      y: offset,
-      animated
-    });
+    this._scrollRef.scrollTo(
+      horizontalOrDefault(this.props.horizontal)
+        ? {
+            x: offset,
+            animated,
+          }
+        : {
+            y: offset,
+            animated,
+          }
+    );
   }
 
   recordInteraction() {
-    this._nestedChildLists.forEach(childList => {
+    this._nestedChildLists.forEach((childList) => {
       childList.ref && childList.ref.recordInteraction();
     });
 
-    this._viewabilityTuples.forEach(t => {
+    this._viewabilityTuples.forEach((t) => {
       t.viewabilityHelper.recordInteraction();
     });
 
@@ -249,7 +317,6 @@ class VirtualizedList extends React.PureComponent {
    * need to check that it responds to `getScrollResponder` before calling it.
    */
 
-
   getScrollResponder() {
     if (this._scrollRef && this._scrollRef.getScrollResponder) {
       return this._scrollRef.getScrollResponder();
@@ -281,7 +348,11 @@ class VirtualizedList extends React.PureComponent {
   _getCellKey() {
     var _this$context;
 
-    return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
+    return (
+      ((_this$context = this.context) == null
+        ? void 0
+        : _this$context.cellKey) || "rootList"
+    );
   }
 
   _getListKey() {
@@ -295,7 +366,10 @@ class VirtualizedList extends React.PureComponent {
       listKey: this._getListKey(),
       cellKey: this._getCellKey(),
       horizontal: horizontalOrDefault(this.props.horizontal),
-      parent: (_this$context2 = this.context) == null ? void 0 : _this$context2.debugInfo
+      parent:
+        (_this$context2 = this.context) == null
+          ? void 0
+          : _this$context2.debugInfo,
     };
   }
 
@@ -320,15 +394,16 @@ class VirtualizedList extends React.PureComponent {
       }
     };
 
-    this._getNestedChildState = key => {
+    this._getNestedChildState = (key) => {
       var existingChildData = this._nestedChildLists.get(key);
 
       return existingChildData && existingChildData.state;
     };
 
-    this._registerAsNestedChild = childList => {
+    this._registerAsNestedChild = (childList) => {
       // Register the mapping between this child key and the cellKey for its cell
-      var childListsInCell = this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
+      var childListsInCell =
+        this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
       childListsInCell.add(childList.key);
 
       this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);
@@ -336,16 +411,27 @@ class VirtualizedList extends React.PureComponent {
       var existingChildData = this._nestedChildLists.get(childList.key);
 
       if (existingChildData && existingChildData.ref !== null) {
-        console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists(_objectSpread(_objectSpread({}, childList), {}, {
-          // We're called from the child's componentDidMount, so it's safe to
-          // read the child's props here (albeit weird).
-          horizontal: !!childList.ref.props.horizontal
-        })));
+        console.error(
+          "A VirtualizedList contains a cell which itself contains " +
+            "more than one VirtualizedList of the same orientation as the parent " +
+            "list. You must pass a unique listKey prop to each sibling list.\n\n" +
+            describeNestedLists(
+              _objectSpread(
+                _objectSpread({}, childList),
+                {},
+                {
+                  // We're called from the child's componentDidMount, so it's safe to
+                  // read the child's props here (albeit weird).
+                  horizontal: !!childList.ref.props.horizontal,
+                }
+              )
+            )
+        );
       }
 
       this._nestedChildLists.set(childList.key, {
         ref: childList.ref,
-        state: null
+        state: null,
       });
 
       if (this._hasInteracted) {
@@ -353,21 +439,21 @@ class VirtualizedList extends React.PureComponent {
       }
     };
 
-    this._unregisterAsNestedChild = childList => {
+    this._unregisterAsNestedChild = (childList) => {
       this._nestedChildLists.set(childList.key, {
         ref: null,
-        state: childList.state
+        state: childList.state,
       });
     };
 
     this._onUpdateSeparators = (keys, newProps) => {
-      keys.forEach(key => {
+      keys.forEach((key) => {
         var ref = key != null && this._cellRefs[key];
         ref && ref.updateSeparatorProps(newProps);
       });
     };
 
-    this._getSpacerKey = isVertical => isVertical ? 'height' : 'width';
+    this._getSpacerKey = (isVertical) => (isVertical ? "height" : "width");
 
     this._averageCellLength = 0;
     this._cellKeysToChildListKeys = new Map();
@@ -392,7 +478,7 @@ class VirtualizedList extends React.PureComponent {
       offset: 0,
       timestamp: 0,
       velocity: 0,
-      visibleLength: 0
+      visibleLength: 0,
     };
     this._scrollRef = null;
     this._sentEndForContentLength = 0;
@@ -400,54 +486,76 @@ class VirtualizedList extends React.PureComponent {
     this._totalCellsMeasured = 0;
     this._viewabilityTuples = [];
 
-    this._captureScrollRef = ref => {
+    this._captureScrollRef = (ref) => {
       this._scrollRef = ref;
     };
 
-    this._defaultRenderScrollComponent = props => {
+    this._defaultRenderScrollComponent = (props) => {
       var onRefresh = props.onRefresh;
 
       if (this._isNestedWithSameOrientation()) {
         // $FlowFixMe[prop-missing] - Typing ReactNativeComponent revealed errors
-        return /*#__PURE__*/React.createElement(View, props);
+        return /*#__PURE__*/ React.createElement(View, props);
       } else if (onRefresh) {
         var _props$refreshing;
 
-        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) !== null && _props$refreshing !== void 0 ? _props$refreshing : 'undefined') + '`');
+        invariant(
+          typeof props.refreshing === "boolean",
+          "`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `" +
+            JSON.stringify(
+              (_props$refreshing = props.refreshing) !== null &&
+                _props$refreshing !== void 0
+                ? _props$refreshing
+                : "undefined"
+            ) +
+            "`"
+        );
         return (
           /*#__PURE__*/
           // $FlowFixMe[prop-missing] Invalid prop usage
-          React.createElement(ScrollView, _extends({}, props, {
-            refreshControl: props.refreshControl == null ? /*#__PURE__*/React.createElement(RefreshControl, {
-              refreshing: props.refreshing,
-              onRefresh: onRefresh,
-              progressViewOffset: props.progressViewOffset
-            }) : props.refreshControl
-          }))
+          React.createElement(
+            ScrollView,
+            _extends({}, props, {
+              refreshControl:
+                props.refreshControl == null
+                  ? /*#__PURE__*/ React.createElement(RefreshControl, {
+                      refreshing: props.refreshing,
+                      onRefresh: onRefresh,
+                      progressViewOffset: props.progressViewOffset,
+                    })
+                  : props.refreshControl,
+            })
+          )
         );
       } else {
         // $FlowFixMe[prop-missing] Invalid prop usage
-        return /*#__PURE__*/React.createElement(ScrollView, props);
+        return /*#__PURE__*/ React.createElement(ScrollView, props);
       }
     };
 
-    this._onCellUnmount = cellKey => {
+    this._onCellUnmount = (cellKey) => {
       var curr = this._frames[cellKey];
 
       if (curr) {
-        this._frames[cellKey] = _objectSpread(_objectSpread({}, curr), {}, {
-          inLayout: false
-        });
+        this._frames[cellKey] = _objectSpread(
+          _objectSpread({}, curr),
+          {},
+          {
+            inLayout: false,
+          }
+        );
       }
     };
 
-    this._onLayout = e => {
+    this._onLayout = (e) => {
       if (this._isNestedWithSameOrientation()) {
         // Need to adjust our scroll metrics to be relative to our containing
         // VirtualizedList before we can make claims about list item viewability
         this.measureLayoutRelativeToContainingList();
       } else {
-        this._scrollMetrics.visibleLength = this._selectLength(e.nativeEvent.layout);
+        this._scrollMetrics.visibleLength = this._selectLength(
+          e.nativeEvent.layout
+        );
       }
 
       this.props.onLayout && this.props.onLayout(e);
@@ -457,26 +565,32 @@ class VirtualizedList extends React.PureComponent {
       this._maybeCallOnEndReached();
     };
 
-    this._onLayoutEmpty = e => {
+    this._onLayoutEmpty = (e) => {
       this.props.onLayout && this.props.onLayout(e);
     };
 
-    this._onLayoutFooter = e => {
+    this._onLayoutFooter = (e) => {
       this._triggerRemeasureForChildListsInCell(this._getFooterCellKey());
 
       this._footerLength = this._selectLength(e.nativeEvent.layout);
     };
 
-    this._onLayoutHeader = e => {
+    this._onLayoutHeader = (e) => {
       this._headerLength = this._selectLength(e.nativeEvent.layout);
     };
 
     this._onContentSizeChange = (width, height) => {
-      if (width > 0 && height > 0 && this.props.initialScrollIndex != null && this.props.initialScrollIndex > 0 && !this._hasDoneInitialScroll) {
+      if (
+        width > 0 &&
+        height > 0 &&
+        this.props.initialScrollIndex != null &&
+        this.props.initialScrollIndex > 0 &&
+        !this._hasDoneInitialScroll
+      ) {
         if (this.props.contentOffset == null) {
           this.scrollToIndex({
             animated: false,
-            index: this.props.initialScrollIndex
+            index: this.props.initialScrollIndex,
           });
         }
 
@@ -489,7 +603,7 @@ class VirtualizedList extends React.PureComponent {
 
       this._scrollMetrics.contentLength = this._selectLength({
         height,
-        width
+        width,
       });
 
       this._scheduleCellsToRenderUpdate();
@@ -497,7 +611,7 @@ class VirtualizedList extends React.PureComponent {
       this._maybeCallOnEndReached();
     };
 
-    this._convertParentScrollMetrics = metrics => {
+    this._convertParentScrollMetrics = (metrics) => {
       // Offset of the top of the nested list relative to the top of its parent's viewport
       var offset = metrics.offset - this._offsetFromParentVirtualizedList; // Child's visible length is the same as its parent's
 
@@ -508,12 +622,12 @@ class VirtualizedList extends React.PureComponent {
         visibleLength,
         contentLength,
         offset,
-        dOffset
+        dOffset,
       };
     };
 
-    this._onScroll = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScroll = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScroll(e);
       });
 
@@ -540,7 +654,7 @@ class VirtualizedList extends React.PureComponent {
 
         var _this$_convertParentS = this._convertParentScrollMetrics({
           visibleLength,
-          offset
+          offset,
         });
 
         visibleLength = _this$_convertParentS.visibleLength;
@@ -549,15 +663,27 @@ class VirtualizedList extends React.PureComponent {
         dOffset = _this$_convertParentS.dOffset;
       }
 
-      var dt = this._scrollMetrics.timestamp ? Math.max(1, timestamp - this._scrollMetrics.timestamp) : 1;
+      var dt = this._scrollMetrics.timestamp
+        ? Math.max(1, timestamp - this._scrollMetrics.timestamp)
+        : 1;
       var velocity = dOffset / dt;
 
-      if (dt > 500 && this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !this._hasWarned.perf) {
-        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
-          dt,
-          prevDt: this._scrollMetrics.dt,
-          contentLength
-        });
+      if (
+        dt > 500 &&
+        this._scrollMetrics.dt > 500 &&
+        contentLength > 5 * visibleLength &&
+        !this._hasWarned.perf
+      ) {
+        infoLog(
+          "VirtualizedList: You have a large list that is slow to update - make sure your " +
+            "renderItem function renders components that follow React performance best practices " +
+            "like PureComponent, shouldComponentUpdate, etc.",
+          {
+            dt,
+            prevDt: this._scrollMetrics.dt,
+            contentLength,
+          }
+        );
         this._hasWarned.perf = true;
       }
 
@@ -568,7 +694,7 @@ class VirtualizedList extends React.PureComponent {
         offset,
         timestamp,
         velocity,
-        visibleLength
+        visibleLength,
       };
 
       this._updateViewableItems(this.props.data);
@@ -588,12 +714,12 @@ class VirtualizedList extends React.PureComponent {
       this._scheduleCellsToRenderUpdate();
     };
 
-    this._onScrollBeginDrag = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScrollBeginDrag = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScrollBeginDrag(e);
       });
 
-      this._viewabilityTuples.forEach(tuple => {
+      this._viewabilityTuples.forEach((tuple) => {
         tuple.viewabilityHelper.recordInteraction();
       });
 
@@ -601,8 +727,8 @@ class VirtualizedList extends React.PureComponent {
       this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
     };
 
-    this._onScrollEndDrag = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onScrollEndDrag = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onScrollEndDrag(e);
       });
 
@@ -617,16 +743,16 @@ class VirtualizedList extends React.PureComponent {
       this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
     };
 
-    this._onMomentumScrollBegin = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onMomentumScrollBegin = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onMomentumScrollBegin(e);
       });
 
       this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
     };
 
-    this._onMomentumScrollEnd = e => {
-      this._nestedChildLists.forEach(childList => {
+    this._onMomentumScrollEnd = (e) => {
+      this._nestedChildLists.forEach((childList) => {
         childList.ref && childList.ref._onMomentumScrollEnd(e);
       });
 
@@ -639,10 +765,12 @@ class VirtualizedList extends React.PureComponent {
 
     this._updateCellsToRender = () => {
       var _this$props3 = this.props,
-          data = _this$props3.data,
-          getItemCount = _this$props3.getItemCount,
-          _onEndReachedThreshold = _this$props3.onEndReachedThreshold;
-      var onEndReachedThreshold = onEndReachedThresholdOrDefault(_onEndReachedThreshold);
+        data = _this$props3.data,
+        getItemCount = _this$props3.getItemCount,
+        _onEndReachedThreshold = _this$props3.onEndReachedThreshold;
+      var onEndReachedThreshold = onEndReachedThresholdOrDefault(
+        _onEndReachedThreshold
+      );
 
       var isVirtualizationDisabled = this._isVirtualizationDisabled();
 
@@ -652,12 +780,12 @@ class VirtualizedList extends React.PureComponent {
         return;
       }
 
-      this.setState(state => {
+      this.setState((state) => {
         var newState;
         var _this$_scrollMetrics = this._scrollMetrics,
-            contentLength = _this$_scrollMetrics.contentLength,
-            offset = _this$_scrollMetrics.offset,
-            visibleLength = _this$_scrollMetrics.visibleLength;
+          contentLength = _this$_scrollMetrics.contentLength,
+          offset = _this$_scrollMetrics.offset,
+          visibleLength = _this$_scrollMetrics.visibleLength;
 
         if (!isVirtualizationDisabled) {
           // If we run this with bogus data, we'll force-render window {first: 0, last: 0},
@@ -670,15 +798,26 @@ class VirtualizedList extends React.PureComponent {
             // So let's wait until we've scrolled the view to the right place. And until then,
             // we will trust the initialScrollIndex suggestion.
             if (!this.props.initialScrollIndex || this._scrollMetrics.offset) {
-              newState = computeWindowedRenderLimits(this.props.data, this.props.getItemCount, maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch), windowSizeOrDefault(this.props.windowSize), state, this._getFrameMetricsApprox, this._scrollMetrics);
+              newState = computeWindowedRenderLimits(
+                this.props.data,
+                this.props.getItemCount,
+                maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch),
+                windowSizeOrDefault(this.props.windowSize),
+                state,
+                this._getFrameMetricsApprox,
+                this._scrollMetrics
+              );
             }
           }
         } else {
           var distanceFromEnd = contentLength - visibleLength - offset;
-          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch) : 0;
+          var renderAhead =
+            distanceFromEnd < onEndReachedThreshold * visibleLength
+              ? maxToRenderPerBatchOrDefault(this.props.maxToRenderPerBatch)
+              : 0;
           newState = {
             first: 0,
-            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
+            last: Math.min(state.last + renderAhead, getItemCount(data) - 1),
           };
         }
 
@@ -692,7 +831,9 @@ class VirtualizedList extends React.PureComponent {
           for (var ii = newFirst; ii <= newLast; ii++) {
             var cellKeyForIndex = this._indicesToKeys.get(ii);
 
-            var childListKeys = cellKeyForIndex && this._cellKeysToChildListKeys.get(cellKeyForIndex);
+            var childListKeys =
+              cellKeyForIndex &&
+              this._cellKeysToChildListKeys.get(cellKeyForIndex);
 
             if (!childListKeys) {
               continue;
@@ -700,7 +841,12 @@ class VirtualizedList extends React.PureComponent {
 
             var someChildHasMore = false; // For each cell, need to check whether any child list in it has more elements to render
 
-            for (var _iterator = _createForOfIteratorHelperLoose(childListKeys), _step; !(_step = _iterator()).done;) {
+            for (
+              var _iterator = _createForOfIteratorHelperLoose(childListKeys),
+                _step;
+              !(_step = _iterator()).done;
+
+            ) {
               var childKey = _step.value;
 
               var childList = this._nestedChildLists.get(childKey);
@@ -719,7 +865,11 @@ class VirtualizedList extends React.PureComponent {
           }
         }
 
-        if (newState != null && newState.first === state.first && newState.last === state.last) {
+        if (
+          newState != null &&
+          newState.first === state.first &&
+          newState.last === state.last
+        ) {
           newState = null;
         }
 
@@ -729,18 +879,18 @@ class VirtualizedList extends React.PureComponent {
 
     this._createViewToken = (index, isViewable) => {
       var _this$props4 = this.props,
-          data = _this$props4.data,
-          getItem = _this$props4.getItem;
+        data = _this$props4.data,
+        getItem = _this$props4.getItem;
       var item = getItem(data, index);
       return {
         index,
         item,
         key: this._keyExtractor(item, index),
-        isViewable
+        isViewable,
       };
     };
 
-    this._getFrameMetricsApprox = index => {
+    this._getFrameMetricsApprox = (index) => {
       var frame = this._getFrameMetrics(index);
 
       if (frame && frame.index === index) {
@@ -748,21 +898,27 @@ class VirtualizedList extends React.PureComponent {
         return frame;
       } else {
         var getItemLayout = this.props.getItemLayout;
-        invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
+        invariant(
+          !getItemLayout,
+          "Should not have to estimate frames when a measurement metrics function is provided"
+        );
         return {
           length: this._averageCellLength,
-          offset: this._averageCellLength * index
+          offset: this._averageCellLength * index,
         };
       }
     };
 
-    this._getFrameMetrics = index => {
+    this._getFrameMetrics = (index) => {
       var _this$props5 = this.props,
-          data = _this$props5.data,
-          getItem = _this$props5.getItem,
-          getItemCount = _this$props5.getItemCount,
-          getItemLayout = _this$props5.getItemLayout;
-      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
+        data = _this$props5.data,
+        getItem = _this$props5.getItem,
+        getItemCount = _this$props5.getItemCount,
+        getItemLayout = _this$props5.getItemLayout;
+      invariant(
+        getItemCount(data) > index,
+        "Tried to get frame for out of range index " + index
+      );
       var item = getItem(data, index);
 
       var frame = item && this._frames[this._keyExtractor(item, index)];
@@ -776,32 +932,51 @@ class VirtualizedList extends React.PureComponent {
        * suppresses an error found when Flow v0.63 was deployed. To see the error
        * delete this comment and run Flow. */
 
-
       return frame;
     };
 
-    invariant( // $FlowFixMe[prop-missing]
-    !_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
-    invariant(windowSizeOrDefault(_props.windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
+    invariant(
+      // $FlowFixMe[prop-missing]
+      !_props.onScroll || !_props.onScroll.__isNative,
+      "Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent " +
+        "to support native onScroll events with useNativeDriver"
+    );
+    invariant(
+      windowSizeOrDefault(_props.windowSize) > 0,
+      "VirtualizedList: The windowSize prop must be present and set to a value greater than 0."
+    );
     this._fillRateHelper = new FillRateHelper(this._getFrameMetrics);
-    this._updateCellsToRenderBatcher = new Batchinator(this._updateCellsToRender, (_this$props$updateCel = this.props.updateCellsBatchingPeriod) !== null && _this$props$updateCel !== void 0 ? _this$props$updateCel : 50);
+    this._updateCellsToRenderBatcher = new Batchinator(
+      this._updateCellsToRender,
+      (_this$props$updateCel = this.props.updateCellsBatchingPeriod) !== null &&
+      _this$props$updateCel !== void 0
+        ? _this$props$updateCel
+        : 50
+    );
 
     if (this.props.viewabilityConfigCallbackPairs) {
-      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(pair => ({
-        viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
-        onViewableItemsChanged: pair.onViewableItemsChanged
-      }));
+      this._viewabilityTuples = this.props.viewabilityConfigCallbackPairs.map(
+        (pair) => ({
+          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
+          onViewableItemsChanged: pair.onViewableItemsChanged,
+        })
+      );
     } else if (this.props.onViewableItemsChanged) {
       this._viewabilityTuples.push({
         viewabilityHelper: new ViewabilityHelper(this.props.viewabilityConfig),
         // $FlowFixMe[incompatible-call]
-        onViewableItemsChanged: this.props.onViewableItemsChanged
+        onViewableItemsChanged: this.props.onViewableItemsChanged,
       });
     }
 
     var initialState = {
       first: this.props.initialScrollIndex || 0,
-      last: Math.min(this.props.getItemCount(this.props.data), (this.props.initialScrollIndex || 0) + initialNumToRenderOrDefault(this.props.initialNumToRender)) - 1
+      last:
+        Math.min(
+          this.props.getItemCount(this.props.data),
+          (this.props.initialScrollIndex || 0) +
+            initialNumToRenderOrDefault(this.props.initialNumToRender)
+        ) - 1,
     };
 
     if (this._isNestedWithSameOrientation()) {
@@ -815,9 +990,12 @@ class VirtualizedList extends React.PureComponent {
     } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
     // For issue https://github.com/necolas/react-native-web/issues/995
 
-
-    this.invertedWheelEventHandler = ev => {
-      if (this.props.inverted && this._scrollRef && this._scrollRef.getScrollableNode) {
+    this.invertedWheelEventHandler = (ev) => {
+      if (
+        this.props.inverted &&
+        this._scrollRef &&
+        this._scrollRef.getScrollableNode
+      ) {
         var node = this._scrollRef.getScrollableNode();
 
         if (this.props.horizontal) {
@@ -843,11 +1021,10 @@ class VirtualizedList extends React.PureComponent {
         // the parent's props. This is why we explicitly propagate debugInfo
         // "down" via context and "up" again via this method call on the
         // parent.
-        parentDebugInfo: this.context.debugInfo
+        parentDebugInfo: this.context.debugInfo,
       });
     } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
     this.setupWebWheelHandler();
   }
 
@@ -858,66 +1035,79 @@ class VirtualizedList extends React.PureComponent {
         state: {
           first: this.state.first,
           last: this.state.last,
-          frames: this._frames
-        }
+          frames: this._frames,
+        },
       });
     }
 
     this._updateViewableItems(null);
 
     this._updateCellsToRenderBatcher.dispose({
-      abort: true
+      abort: true,
     });
 
-    this._viewabilityTuples.forEach(tuple => {
+    this._viewabilityTuples.forEach((tuple) => {
       tuple.viewabilityHelper.dispose();
     });
 
     this._fillRateHelper.deactivateAndFlush(); // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
     this.teardownWebWheelHandler();
   } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
   setupWebWheelHandler() {
     if (this._scrollRef && this._scrollRef.getScrollableNode) {
-      this._scrollRef.getScrollableNode().addEventListener('wheel', this.invertedWheelEventHandler);
+      this._scrollRef
+        .getScrollableNode()
+        .addEventListener("wheel", this.invertedWheelEventHandler);
     } else {
       setTimeout(() => this.setupWebWheelHandler(), 50);
       return;
     }
   } // REACT-NATIVE-WEB patch to preserve during future RN merges: Support inverted wheel scroller.
 
-
   teardownWebWheelHandler() {
     if (this._scrollRef && this._scrollRef.getScrollableNode) {
-      this._scrollRef.getScrollableNode().removeEventListener('wheel', this.invertedWheelEventHandler);
+      this._scrollRef
+        .getScrollableNode()
+        .removeEventListener("wheel", this.invertedWheelEventHandler);
     }
   }
 
   static getDerivedStateFromProps(newProps, prevState) {
     var data = newProps.data,
-        getItemCount = newProps.getItemCount;
-    var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(newProps.maxToRenderPerBatch); // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
+      getItemCount = newProps.getItemCount;
+    var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(
+      newProps.maxToRenderPerBatch
+    ); // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make
     // sure we're rendering a reasonable range here.
 
     return {
-      first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
-      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
+      first: Math.max(
+        0,
+        Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)
+      ),
+      last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1)),
     };
   }
 
-  _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
+  _pushCells(
+    cells,
+    stickyHeaderIndices,
+    stickyIndicesFromProps,
+    first,
+    last,
+    inversionStyle
+  ) {
     var _this = this;
 
     var _this$props6 = this.props,
-        CellRendererComponent = _this$props6.CellRendererComponent,
-        ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
-        data = _this$props6.data,
-        getItem = _this$props6.getItem,
-        getItemCount = _this$props6.getItemCount,
-        horizontal = _this$props6.horizontal;
+      CellRendererComponent = _this$props6.CellRendererComponent,
+      ItemSeparatorComponent = _this$props6.ItemSeparatorComponent,
+      data = _this$props6.data,
+      getItem = _this$props6.getItem,
+      getItemCount = _this$props6.getItemCount,
+      horizontal = _this$props6.horizontal;
     var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
     var end = getItemCount(data) - 1;
     var prevCellKey;
@@ -934,25 +1124,27 @@ class VirtualizedList extends React.PureComponent {
         stickyHeaderIndices.push(cells.length);
       }
 
-      cells.push( /*#__PURE__*/React.createElement(CellRenderer, {
-        CellRendererComponent: CellRendererComponent,
-        ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
-        cellKey: key,
-        fillRateHelper: _this._fillRateHelper,
-        horizontal: horizontal,
-        index: ii,
-        inversionStyle: inversionStyle,
-        item: item,
-        key: key,
-        prevCellKey: prevCellKey,
-        onUpdateSeparators: _this._onUpdateSeparators,
-        onLayout: e => _this._onCellLayout(e, key, ii),
-        onUnmount: _this._onCellUnmount,
-        parentProps: _this.props,
-        ref: _ref => {
-          _this._cellRefs[key] = _ref;
-        }
-      }));
+      cells.push(
+        /*#__PURE__*/ React.createElement(CellRenderer, {
+          CellRendererComponent: CellRendererComponent,
+          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
+          cellKey: key,
+          fillRateHelper: _this._fillRateHelper,
+          horizontal: horizontal,
+          index: ii,
+          inversionStyle: inversionStyle,
+          item: item,
+          key: key,
+          prevCellKey: prevCellKey,
+          onUpdateSeparators: _this._onUpdateSeparators,
+          onLayout: (e) => _this._onCellLayout(e, key, ii),
+          onUnmount: _this._onCellUnmount,
+          parentProps: _this.props,
+          ref: (_ref) => {
+            _this._cellRefs[key] = _ref;
+          },
+        })
+      );
       prevCellKey = key;
     };
 
@@ -967,7 +1159,10 @@ class VirtualizedList extends React.PureComponent {
 
   _isNestedWithSameOrientation() {
     var nestedContext = this.context;
-    return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
+    return !!(
+      nestedContext &&
+      !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal)
+    );
   }
 
   _keyExtractor(item, index) {
@@ -992,22 +1187,29 @@ class VirtualizedList extends React.PureComponent {
     if (__DEV__) {
       var flatStyles = flattenStyle(this.props.contentContainerStyle);
 
-      if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
-        console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
+      if (flatStyles != null && flatStyles.flexWrap === "wrap") {
+        console.warn(
+          "`flexWrap: `wrap`` is not supported with the `VirtualizedList` components." +
+            "Consider using `numColumns` with `FlatList` instead."
+        );
       }
     }
 
     var _this$props7 = this.props,
-        ListEmptyComponent = _this$props7.ListEmptyComponent,
-        ListFooterComponent = _this$props7.ListFooterComponent,
-        ListHeaderComponent = _this$props7.ListHeaderComponent;
+      ListEmptyComponent = _this$props7.ListEmptyComponent,
+      ListFooterComponent = _this$props7.ListFooterComponent,
+      ListHeaderComponent = _this$props7.ListHeaderComponent;
     var _this$props8 = this.props,
-        data = _this$props8.data,
-        horizontal = _this$props8.horizontal;
+      data = _this$props8.data,
+      horizontal = _this$props8.horizontal;
 
     var isVirtualizationDisabled = this._isVirtualizationDisabled();
 
-    var inversionStyle = this.props.inverted ? horizontalOrDefault(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
+    var inversionStyle = this.props.inverted
+      ? horizontalOrDefault(this.props.horizontal)
+        ? styles.horizontallyInverted
+        : styles.verticallyInverted
+      : null;
     var cells = [];
     var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
     var stickyHeaderIndices = [];
@@ -1017,35 +1219,57 @@ class VirtualizedList extends React.PureComponent {
         stickyHeaderIndices.push(0);
       }
 
-      var element = /*#__PURE__*/React.isValidElement(ListHeaderComponent) ? ListHeaderComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListHeaderComponent, null);
-      cells.push( /*#__PURE__*/React.createElement(VirtualizedListCellContextProvider, {
-        cellKey: this._getCellKey() + '-header',
-        key: "$header"
-      }, /*#__PURE__*/React.createElement(View, {
-        onLayout: this._onLayoutHeader,
-        style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle)
-      }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
-      element)));
+      var element = /*#__PURE__*/ React.isValidElement(ListHeaderComponent)
+        ? ListHeaderComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListHeaderComponent, null);
+      cells.push(
+        /*#__PURE__*/ React.createElement(
+          VirtualizedListCellContextProvider,
+          {
+            cellKey: this._getCellKey() + "-header",
+            key: "$header",
+          },
+          /*#__PURE__*/ React.createElement(
+            View,
+            {
+              onLayout: this._onLayoutHeader,
+              style: StyleSheet.compose(
+                inversionStyle,
+                this.props.ListHeaderComponentStyle
+              ),
+            }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
+            element
+          )
+        )
+      );
     }
 
     var itemCount = this.props.getItemCount(data);
 
     if (itemCount > 0) {
       _usedIndexForKey = false;
-      _keylessItemComponentName = '';
+      _keylessItemComponentName = "";
 
       var spacerKey = this._getSpacerKey(!horizontal);
 
-      var lastInitialIndex = this.props.initialScrollIndex ? -1 : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
+      var lastInitialIndex = this.props.initialScrollIndex
+        ? -1
+        : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
       var _this$state = this.state,
-          first = _this$state.first,
-          last = _this$state.last;
-
-      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
+        first = _this$state.first,
+        last = _this$state.last;
+
+      this._pushCells(
+        cells,
+        stickyHeaderIndices,
+        stickyIndicesFromProps,
+        0,
+        lastInitialIndex,
+        inversionStyle
+      );
 
       var firstAfterInitial = Math.max(lastInitialIndex + 1, first);
 
@@ -1061,23 +1285,39 @@ class VirtualizedList extends React.PureComponent {
 
               var stickyBlock = this._getFrameMetricsApprox(ii);
 
-              var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
-              cells.push( /*#__PURE__*/React.createElement(View, {
-                key: "$sticky_lead",
-                style: {
-                  [spacerKey]: leadSpace
-                }
-              }));
+              var leadSpace =
+                stickyBlock.offset -
+                initBlock.offset -
+                (this.props.initialScrollIndex ? 0 : initBlock.length);
+              cells.push(
+                /*#__PURE__*/ React.createElement(View, {
+                  key: "$sticky_lead",
+                  style: {
+                    [spacerKey]: leadSpace,
+                  },
+                })
+              );
 
-              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
+              this._pushCells(
+                cells,
+                stickyHeaderIndices,
+                stickyIndicesFromProps,
+                ii,
+                ii,
+                inversionStyle
+              );
 
-              var trailSpace = this._getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
-              cells.push( /*#__PURE__*/React.createElement(View, {
-                key: "$sticky_trail",
-                style: {
-                  [spacerKey]: trailSpace
-                }
-              }));
+              var trailSpace =
+                this._getFrameMetricsApprox(first).offset -
+                (stickyBlock.offset + stickyBlock.length);
+              cells.push(
+                /*#__PURE__*/ React.createElement(View, {
+                  key: "$sticky_trail",
+                  style: {
+                    [spacerKey]: trailSpace,
+                  },
+                })
+              );
               insertedStickySpacer = true;
               break;
             }
@@ -1087,21 +1327,36 @@ class VirtualizedList extends React.PureComponent {
         if (!insertedStickySpacer) {
           var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
 
-          var firstSpace = this._getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);
-
-          cells.push( /*#__PURE__*/React.createElement(View, {
-            key: "$lead_spacer",
-            style: {
-              [spacerKey]: firstSpace
-            }
-          }));
+          var firstSpace =
+            this._getFrameMetricsApprox(first).offset -
+            (_initBlock.offset + _initBlock.length);
+
+          cells.push(
+            /*#__PURE__*/ React.createElement(View, {
+              key: "$lead_spacer",
+              style: {
+                [spacerKey]: firstSpace,
+              },
+            })
+          );
         }
       }
 
-      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);
+      this._pushCells(
+        cells,
+        stickyHeaderIndices,
+        stickyIndicesFromProps,
+        firstAfterInitial,
+        last,
+        inversionStyle
+      );
 
       if (!this._hasWarned.keys && _usedIndexForKey) {
-        console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
+        console.warn(
+          "VirtualizedList: missing keys for items, make sure to specify a key or id property on each " +
+            "item or provide a custom keyExtractor.",
+          _keylessItemComponentName
+        );
         this._hasWarned.keys = true;
       }
 
@@ -1110,86 +1365,152 @@ class VirtualizedList extends React.PureComponent {
         // prevent the user for hyperscrolling into un-measured area because otherwise content will
         // likely jump around as it renders in above the viewport.
 
-
-        var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
+        var end = this.props.getItemLayout
+          ? itemCount - 1
+          : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
 
         var endFrame = this._getFrameMetricsApprox(end);
 
-        var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
-        cells.push( /*#__PURE__*/React.createElement(View, {
-          key: "$tail_spacer",
-          style: {
-            [spacerKey]: tailSpacerLength
-          }
-        }));
+        var tailSpacerLength =
+          endFrame.offset +
+          endFrame.length -
+          (lastFrame.offset + lastFrame.length);
+        cells.push(
+          /*#__PURE__*/ React.createElement(View, {
+            key: "$tail_spacer",
+            style: {
+              [spacerKey]: tailSpacerLength,
+            },
+          })
+        );
       }
     } else if (ListEmptyComponent) {
-      var _element = /*#__PURE__*/React.isValidElement(ListEmptyComponent) ? ListEmptyComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListEmptyComponent, null);
-
-      cells.push( /*#__PURE__*/React.cloneElement(_element, {
-        key: '$empty',
-        onLayout: event => {
-          this._onLayoutEmpty(event);
-
-          if (_element.props.onLayout) {
-            _element.props.onLayout(event);
-          }
-        },
-        style: StyleSheet.compose(inversionStyle, _element.props.style)
-      }));
+      var _element = /*#__PURE__*/ React.isValidElement(ListEmptyComponent)
+        ? ListEmptyComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListEmptyComponent, null);
+
+      cells.push(
+        /*#__PURE__*/ React.cloneElement(_element, {
+          key: "$empty",
+          onLayout: (event) => {
+            this._onLayoutEmpty(event);
+
+            if (_element.props.onLayout) {
+              _element.props.onLayout(event);
+            }
+          },
+          style: StyleSheet.compose(inversionStyle, _element.props.style),
+        })
+      );
     }
 
     if (ListFooterComponent) {
-      var _element2 = /*#__PURE__*/React.isValidElement(ListFooterComponent) ? ListFooterComponent :
-      /*#__PURE__*/
-      // $FlowFixMe[not-a-component]
-      // $FlowFixMe[incompatible-type-arg]
-      React.createElement(ListFooterComponent, null);
-
-      cells.push( /*#__PURE__*/React.createElement(VirtualizedListCellContextProvider, {
-        cellKey: this._getFooterCellKey(),
-        key: "$footer"
-      }, /*#__PURE__*/React.createElement(View, {
-        onLayout: this._onLayoutFooter,
-        style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle)
-      }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
-      _element2)));
+      var _element2 = /*#__PURE__*/ React.isValidElement(ListFooterComponent)
+        ? ListFooterComponent
+        : /*#__PURE__*/
+          // $FlowFixMe[not-a-component]
+          // $FlowFixMe[incompatible-type-arg]
+          React.createElement(ListFooterComponent, null);
+
+      cells.push(
+        /*#__PURE__*/ React.createElement(
+          VirtualizedListCellContextProvider,
+          {
+            cellKey: this._getFooterCellKey(),
+            key: "$footer",
+          },
+          /*#__PURE__*/ React.createElement(
+            View,
+            {
+              onLayout: this._onLayoutFooter,
+              style: StyleSheet.compose(
+                inversionStyle,
+                this.props.ListFooterComponentStyle
+              ),
+            }, // $FlowFixMe[incompatible-type] - Typing ReactNativeComponent revealed errors
+            _element2
+          )
+        )
+      );
     }
 
-    var scrollProps = _objectSpread(_objectSpread({}, this.props), {}, {
-      onContentSizeChange: this._onContentSizeChange,
-      onLayout: this._onLayout,
-      onScroll: this._onScroll,
-      onScrollBeginDrag: this._onScrollBeginDrag,
-      onScrollEndDrag: this._onScrollEndDrag,
-      onMomentumScrollBegin: this._onMomentumScrollBegin,
-      onMomentumScrollEnd: this._onMomentumScrollEnd,
-      scrollEventThrottle: scrollEventThrottleOrDefault(this.props.scrollEventThrottle),
-      // TODO: Android support
-      invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
-      stickyHeaderIndices,
-      style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
-    });
-
-    this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
-    var innerRet = /*#__PURE__*/React.createElement(VirtualizedListContextProvider, {
-      value: {
-        cellKey: null,
-        getScrollMetrics: this._getScrollMetrics,
-        horizontal: horizontalOrDefault(this.props.horizontal),
-        getOutermostParentListRef: this._getOutermostParentListRef,
-        getNestedChildState: this._getNestedChildState,
-        registerAsNestedChild: this._registerAsNestedChild,
-        unregisterAsNestedChild: this._unregisterAsNestedChild,
-        debugInfo: this._getDebugInfo()
+    var scrollProps = _objectSpread(
+      _objectSpread({}, this.props),
+      {},
+      {
+        onContentSizeChange: this._onContentSizeChange,
+        onLayout: this._onLayout,
+        onScroll: this._onScroll,
+        onScrollBeginDrag: this._onScrollBeginDrag,
+        onScrollEndDrag: this._onScrollEndDrag,
+        onMomentumScrollBegin: this._onMomentumScrollBegin,
+        onMomentumScrollEnd: this._onMomentumScrollEnd,
+        scrollEventThrottle: scrollEventThrottleOrDefault(
+          this.props.scrollEventThrottle
+        ),
+        // TODO: Android support
+        invertStickyHeaders:
+          this.props.invertStickyHeaders !== undefined
+            ? this.props.invertStickyHeaders
+            : this.props.inverted,
+        stickyHeaderIndices,
+        style: inversionStyle
+          ? [inversionStyle, this.props.style]
+          : this.props.style,
       }
-    }, /*#__PURE__*/React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
-      ref: this._captureScrollRef
-    }, cells));
+    );
+
+    this._hasMore =
+      this.state.last < this.props.getItemCount(this.props.data) - 1;
+
+    const headerIdx = cells.findIndex((cell) => cell.key === "$header");
+    const footerIdx = cells.findIndex((cell) => cell.key === "$footer");
+    const emptyComponentIdx = cells.findIndex((cell) => cell.key === "$empty");
+    const cellsWithoutHeaderAndFooter = cells.filter(
+      (_, idx) => ![headerIdx, footerIdx].includes(idx)
+    );
+    const isListWithNonNullItems =
+      cellsWithoutHeaderAndFooter &&
+      this.props.listAs &&
+      emptyComponentIdx === -1;
+    const cellsAsListItem = isListWithNonNullItems
+      ? React.createElement(
+          this.props.listAs,
+          { key: "listCells" },
+          cellsWithoutHeaderAndFooter
+        )
+      : null;
+    const cellsToDisplay = isListWithNonNullItems
+      ? [cells[headerIdx], cellsAsListItem, cells[footerIdx]]
+      : cells;
+
+    var innerRet = /*#__PURE__*/ React.createElement(
+      VirtualizedListContextProvider,
+      {
+        value: {
+          cellKey: null,
+          getScrollMetrics: this._getScrollMetrics,
+          horizontal: horizontalOrDefault(this.props.horizontal),
+          getOutermostParentListRef: this._getOutermostParentListRef,
+          getNestedChildState: this._getNestedChildState,
+          registerAsNestedChild: this._registerAsNestedChild,
+          unregisterAsNestedChild: this._unregisterAsNestedChild,
+          debugInfo: this._getDebugInfo(),
+        },
+      },
+      /*#__PURE__*/ React.cloneElement(
+        (
+          this.props.renderScrollComponent || this._defaultRenderScrollComponent
+        )(scrollProps),
+        {
+          ref: this._captureScrollRef,
+        },
+        cellsToDisplay
+      )
+    );
     var ret = innerRet;
     /* https://github.com/necolas/react-native-web/issues/2239: Re-enable when ScrollView.Context.Consumer is available.
     if (__DEV__) {
@@ -1218,9 +1539,14 @@ class VirtualizedList extends React.PureComponent {
     }*/
 
     if (this.props.debug) {
-      return /*#__PURE__*/React.createElement(View, {
-        style: styles.debug
-      }, ret, this._renderDebugOverlay());
+      return /*#__PURE__*/ React.createElement(
+        View,
+        {
+          style: styles.debug,
+        },
+        ret,
+        this._renderDebugOverlay()
+      );
     } else {
       return ret;
     }
@@ -1228,13 +1554,13 @@ class VirtualizedList extends React.PureComponent {
 
   componentDidUpdate(prevProps) {
     var _this$props9 = this.props,
-        data = _this$props9.data,
-        extraData = _this$props9.extraData;
+      data = _this$props9.data,
+      extraData = _this$props9.extraData;
 
     if (data !== prevProps.data || extraData !== prevProps.extraData) {
       // clear the viewableIndices cache to also trigger
       // the onViewableItemsChanged callback with the new data
-      this._viewabilityTuples.forEach(tuple => {
+      this._viewabilityTuples.forEach((tuple) => {
         tuple.viewabilityHelper.resetViewableIndices();
       });
     } // The `this._hiPriInProgress` is guaranteeing a hiPri cell update will only happen
@@ -1244,20 +1570,22 @@ class VirtualizedList extends React.PureComponent {
     // `_scheduleCellsToRenderUpdate` will check this condition and not perform
     // another hiPri update.
 
-
     var hiPriInProgress = this._hiPriInProgress;
 
     this._scheduleCellsToRenderUpdate(); // Make sure setting `this._hiPriInProgress` back to false after `componentDidUpdate`
     // is triggered with `this._hiPriInProgress = true`
 
-
     if (hiPriInProgress) {
       this._hiPriInProgress = false;
     }
   }
 
   _computeBlankness() {
-    this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
+    this._fillRateHelper.computeBlankness(
+      this.props,
+      this.state,
+      this._scrollMetrics
+    );
   }
 
   _onCellLayout(e, cellKey, index) {
@@ -1266,16 +1594,25 @@ class VirtualizedList extends React.PureComponent {
       offset: this._selectOffset(layout),
       length: this._selectLength(layout),
       index,
-      inLayout: true
+      inLayout: true,
     };
     var curr = this._frames[cellKey];
 
-    if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
+    if (
+      !curr ||
+      next.offset !== curr.offset ||
+      next.length !== curr.length ||
+      index !== curr.index
+    ) {
       this._totalCellLength += next.length - (curr ? curr.length : 0);
       this._totalCellsMeasured += curr ? 0 : 1;
-      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
+      this._averageCellLength =
+        this._totalCellLength / this._totalCellsMeasured;
       this._frames[cellKey] = next;
-      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
+      this._highestMeasuredFrameIndex = Math.max(
+        this._highestMeasuredFrameIndex,
+        index
+      );
 
       this._scheduleCellsToRenderUpdate();
     } else {
@@ -1293,12 +1630,18 @@ class VirtualizedList extends React.PureComponent {
     var childListKeys = this._cellKeysToChildListKeys.get(cellKey);
 
     if (childListKeys) {
-      for (var _iterator2 = _createForOfIteratorHelperLoose(childListKeys), _step2; !(_step2 = _iterator2()).done;) {
+      for (
+        var _iterator2 = _createForOfIteratorHelperLoose(childListKeys), _step2;
+        !(_step2 = _iterator2()).done;
+
+      ) {
         var childKey = _step2.value;
 
         var childList = this._nestedChildLists.get(childKey);
 
-        childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
+        childList &&
+          childList.ref &&
+          childList.ref.measureLayoutRelativeToContainingList();
       }
     }
   }
@@ -1312,52 +1655,75 @@ class VirtualizedList extends React.PureComponent {
       } // We are assuming that getOutermostParentListRef().getScrollRef()
       // is a non-null reference to a ScrollView
 
+      this._scrollRef.measureLayout(
+        this.context.getOutermostParentListRef().getScrollRef(),
+        (x, y, width, height) => {
+          this._offsetFromParentVirtualizedList = this._selectOffset({
+            x,
+            y,
+          });
+          this._scrollMetrics.contentLength = this._selectLength({
+            width,
+            height,
+          });
 
-      this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), (x, y, width, height) => {
-        this._offsetFromParentVirtualizedList = this._selectOffset({
-          x,
-          y
-        });
-        this._scrollMetrics.contentLength = this._selectLength({
-          width,
-          height
-        });
+          var scrollMetrics = this._convertParentScrollMetrics(
+            this.context.getScrollMetrics()
+          );
 
-        var scrollMetrics = this._convertParentScrollMetrics(this.context.getScrollMetrics());
+          var metricsChanged =
+            this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength ||
+            this._scrollMetrics.offset !== scrollMetrics.offset;
 
-        var metricsChanged = this._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || this._scrollMetrics.offset !== scrollMetrics.offset;
+          if (metricsChanged) {
+            this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
+            this._scrollMetrics.offset = scrollMetrics.offset; // If metrics of the scrollView changed, then we triggered remeasure for child list
+            // to ensure VirtualizedList has the right information.
 
-        if (metricsChanged) {
-          this._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
-          this._scrollMetrics.offset = scrollMetrics.offset; // If metrics of the scrollView changed, then we triggered remeasure for child list
-          // to ensure VirtualizedList has the right information.
+            this._cellKeysToChildListKeys.forEach((childListKeys) => {
+              if (childListKeys) {
+                for (
+                  var _iterator3 =
+                      _createForOfIteratorHelperLoose(childListKeys),
+                    _step3;
+                  !(_step3 = _iterator3()).done;
 
-          this._cellKeysToChildListKeys.forEach(childListKeys => {
-            if (childListKeys) {
-              for (var _iterator3 = _createForOfIteratorHelperLoose(childListKeys), _step3; !(_step3 = _iterator3()).done;) {
-                var childKey = _step3.value;
+                ) {
+                  var childKey = _step3.value;
 
-                var childList = this._nestedChildLists.get(childKey);
+                  var childList = this._nestedChildLists.get(childKey);
 
-                childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
+                  childList &&
+                    childList.ref &&
+                    childList.ref.measureLayoutRelativeToContainingList();
+                }
               }
-            }
-          });
+            });
+          }
+        },
+        (error) => {
+          console.warn(
+            "VirtualizedList: Encountered an error while measuring a list's" +
+              " offset from its containing VirtualizedList."
+          );
         }
-      }, error => {
-        console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
-      });
+      );
     } catch (error) {
-      console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
+      console.warn(
+        "measureLayoutRelativeToContainingList threw an error",
+        error.stack
+      );
     }
   }
 
   _getFooterCellKey() {
-    return this._getCellKey() + '-footer';
+    return this._getCellKey() + "-footer";
   }
 
   _renderDebugOverlay() {
-    var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
+    var normalize =
+      this._scrollMetrics.visibleLength /
+      (this._scrollMetrics.contentLength || 1);
     var framesInLayout = [];
     var itemCount = this.props.getItemCount(this.props.data);
 
@@ -1367,7 +1733,6 @@ class VirtualizedList extends React.PureComponent {
        * suppresses an error found when Flow v0.68 was deployed. To see the
        * error delete this comment and run Flow. */
 
-
       if (frame.inLayout) {
         framesInLayout.push(frame);
       }
@@ -1380,29 +1745,51 @@ class VirtualizedList extends React.PureComponent {
     var windowLen = frameLast.offset + frameLast.length - windowTop;
     var visTop = this._scrollMetrics.offset;
     var visLen = this._scrollMetrics.visibleLength;
-    return /*#__PURE__*/React.createElement(View, {
-      style: [styles.debugOverlayBase, styles.debugOverlay]
-    }, framesInLayout.map((f, ii) => /*#__PURE__*/React.createElement(View, {
-      key: 'f' + ii,
-      style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
-        top: f.offset * normalize,
-        height: f.length * normalize
-      }]
-    })), /*#__PURE__*/React.createElement(View, {
-      style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
-        top: windowTop * normalize,
-        height: windowLen * normalize
-      }]
-    }), /*#__PURE__*/React.createElement(View, {
-      style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
-        top: visTop * normalize,
-        height: visLen * normalize
-      }]
-    }));
+    return /*#__PURE__*/ React.createElement(
+      View,
+      {
+        style: [styles.debugOverlayBase, styles.debugOverlay],
+      },
+      framesInLayout.map((f, ii) =>
+        /*#__PURE__*/ React.createElement(View, {
+          key: "f" + ii,
+          style: [
+            styles.debugOverlayBase,
+            styles.debugOverlayFrame,
+            {
+              top: f.offset * normalize,
+              height: f.length * normalize,
+            },
+          ],
+        })
+      ),
+      /*#__PURE__*/ React.createElement(View, {
+        style: [
+          styles.debugOverlayBase,
+          styles.debugOverlayFrameLast,
+          {
+            top: windowTop * normalize,
+            height: windowLen * normalize,
+          },
+        ],
+      }),
+      /*#__PURE__*/ React.createElement(View, {
+        style: [
+          styles.debugOverlayBase,
+          styles.debugOverlayFrameVis,
+          {
+            top: visTop * normalize,
+            height: visLen * normalize,
+          },
+        ],
+      })
+    );
   }
 
   _selectLength(metrics) {
-    return !horizontalOrDefault(this.props.horizontal) ? metrics.height : metrics.width;
+    return !horizontalOrDefault(this.props.horizontal)
+      ? metrics.height
+      : metrics.width;
   }
 
   _selectOffset(metrics) {
@@ -1411,22 +1798,28 @@ class VirtualizedList extends React.PureComponent {
 
   _maybeCallOnEndReached() {
     var _this$props10 = this.props,
-        data = _this$props10.data,
-        getItemCount = _this$props10.getItemCount,
-        onEndReached = _this$props10.onEndReached,
-        onEndReachedThreshold = _this$props10.onEndReachedThreshold;
+      data = _this$props10.data,
+      getItemCount = _this$props10.getItemCount,
+      onEndReached = _this$props10.onEndReached,
+      onEndReachedThreshold = _this$props10.onEndReachedThreshold;
     var _this$_scrollMetrics2 = this._scrollMetrics,
-        contentLength = _this$_scrollMetrics2.contentLength,
-        visibleLength = _this$_scrollMetrics2.visibleLength,
-        offset = _this$_scrollMetrics2.offset;
+      contentLength = _this$_scrollMetrics2.contentLength,
+      visibleLength = _this$_scrollMetrics2.visibleLength,
+      offset = _this$_scrollMetrics2.offset;
     var distanceFromEnd = contentLength - visibleLength - offset;
-    var threshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
-
-    if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
+    var threshold =
+      onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;
+
+    if (
+      onEndReached &&
+      this.state.last === getItemCount(data) - 1 &&
+      distanceFromEnd < threshold &&
+      this._scrollMetrics.contentLength !== this._sentEndForContentLength
+    ) {
       // Only call onEndReached once for a given content length
       this._sentEndForContentLength = this._scrollMetrics.contentLength;
       onEndReached({
-        distanceFromEnd
+        distanceFromEnd,
       });
     } else if (distanceFromEnd > threshold) {
       // If the user scrolls away from the end and back again cause
@@ -1437,29 +1830,35 @@ class VirtualizedList extends React.PureComponent {
 
   _scheduleCellsToRenderUpdate() {
     var _this$state2 = this.state,
-        first = _this$state2.first,
-        last = _this$state2.last;
+      first = _this$state2.first,
+      last = _this$state2.last;
     var _this$_scrollMetrics3 = this._scrollMetrics,
-        offset = _this$_scrollMetrics3.offset,
-        visibleLength = _this$_scrollMetrics3.visibleLength,
-        velocity = _this$_scrollMetrics3.velocity;
+      offset = _this$_scrollMetrics3.offset,
+      visibleLength = _this$_scrollMetrics3.visibleLength,
+      velocity = _this$_scrollMetrics3.velocity;
     var itemCount = this.props.getItemCount(this.props.data);
     var hiPri = false;
-    var onEndReachedThreshold = onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold);
-    var scrollingThreshold = onEndReachedThreshold * visibleLength / 2; // Mark as high priority if we're close to the start of the first item
+    var onEndReachedThreshold = onEndReachedThresholdOrDefault(
+      this.props.onEndReachedThreshold
+    );
+    var scrollingThreshold = (onEndReachedThreshold * visibleLength) / 2; // Mark as high priority if we're close to the start of the first item
     // But only if there are items before the first rendered item
 
     if (first > 0) {
       var distTop = offset - this._getFrameMetricsApprox(first).offset;
 
-      hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
+      hiPri =
+        hiPri || distTop < 0 || (velocity < -2 && distTop < scrollingThreshold);
     } // Mark as high priority if we're close to the end of the last item
     // But only if there are items after the last rendered item
 
-
     if (last < itemCount - 1) {
-      var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
-      hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
+      var distBottom =
+        this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
+      hiPri =
+        hiPri ||
+        distBottom < 0 ||
+        (velocity > 2 && distBottom < scrollingThreshold);
     } // Only trigger high-priority updates if we've actually rendered cells,
     // and with that size estimate, accurately compute how many cells we should render.
     // Otherwise, it would just render as many cells as it can (of zero dimension),
@@ -1468,13 +1867,16 @@ class VirtualizedList extends React.PureComponent {
     // If this is triggered in an `componentDidUpdate` followed by a hiPri cellToRenderUpdate
     // We shouldn't do another hipri cellToRenderUpdate
 
-
-    if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
+    if (
+      hiPri &&
+      (this._averageCellLength || this.props.getItemLayout) &&
+      !this._hiPriInProgress
+    ) {
       this._hiPriInProgress = true; // Don't worry about interactions when scrolling quickly; focus on filling content as fast
       // as possible.
 
       this._updateCellsToRenderBatcher.dispose({
-        abort: true
+        abort: true,
       });
 
       this._updateCellsToRender();
@@ -1488,11 +1890,18 @@ class VirtualizedList extends React.PureComponent {
   _updateViewableItems(data) {
     var getItemCount = this.props.getItemCount;
 
-    this._viewabilityTuples.forEach(tuple => {
-      tuple.viewabilityHelper.onUpdate(getItemCount(data), this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._getFrameMetrics, this._createViewToken, tuple.onViewableItemsChanged, this.state);
+    this._viewabilityTuples.forEach((tuple) => {
+      tuple.viewabilityHelper.onUpdate(
+        getItemCount(data),
+        this._scrollMetrics.offset,
+        this._scrollMetrics.visibleLength,
+        this._getFrameMetrics,
+        this._createViewToken,
+        tuple.onViewableItemsChanged,
+        this.state
+      );
     });
   }
-
 }
 
 VirtualizedList.contextType = VirtualizedListContext;
@@ -1503,48 +1912,57 @@ class CellRenderer extends React.Component {
     this.state = {
       separatorProps: {
         highlighted: false,
-        leadingItem: this.props.item
-      }
+        leadingItem: this.props.item,
+      },
     };
     this._separators = {
       highlight: () => {
         var _this$props11 = this.props,
-            cellKey = _this$props11.cellKey,
-            prevCellKey = _this$props11.prevCellKey;
+          cellKey = _this$props11.cellKey,
+          prevCellKey = _this$props11.prevCellKey;
         this.props.onUpdateSeparators([cellKey, prevCellKey], {
-          highlighted: true
+          highlighted: true,
         });
       },
       unhighlight: () => {
         var _this$props12 = this.props,
-            cellKey = _this$props12.cellKey,
-            prevCellKey = _this$props12.prevCellKey;
+          cellKey = _this$props12.cellKey,
+          prevCellKey = _this$props12.prevCellKey;
         this.props.onUpdateSeparators([cellKey, prevCellKey], {
-          highlighted: false
+          highlighted: false,
         });
       },
       updateProps: (select, newProps) => {
         var _this$props13 = this.props,
-            cellKey = _this$props13.cellKey,
-            prevCellKey = _this$props13.prevCellKey;
-        this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
-      }
+          cellKey = _this$props13.cellKey,
+          prevCellKey = _this$props13.prevCellKey;
+        this.props.onUpdateSeparators(
+          [select === "leading" ? prevCellKey : cellKey],
+          newProps
+        );
+      },
     };
   }
 
   static getDerivedStateFromProps(props, prevState) {
     return {
-      separatorProps: _objectSpread(_objectSpread({}, prevState.separatorProps), {}, {
-        leadingItem: props.item
-      })
+      separatorProps: _objectSpread(
+        _objectSpread({}, prevState.separatorProps),
+        {},
+        {
+          leadingItem: props.item,
+        }
+      ),
     };
   } // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not
   // reused by SectionList and we can keep VirtualizedList simpler.
 
-
   updateSeparatorProps(newProps) {
-    this.setState(state => ({
-      separatorProps: _objectSpread(_objectSpread({}, state.separatorProps), newProps)
+    this.setState((state) => ({
+      separatorProps: _objectSpread(
+        _objectSpread({}, state.separatorProps),
+        newProps
+      ),
     }));
   }
 
@@ -1554,7 +1972,10 @@ class CellRenderer extends React.Component {
 
   _renderElement(renderItem, ListItemComponent, item, index) {
     if (renderItem && ListItemComponent) {
-      console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
+      console.warn(
+        "VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take" +
+          " precedence over renderItem."
+      );
     }
 
     if (ListItemComponent) {
@@ -1565,10 +1986,10 @@ class CellRenderer extends React.Component {
       /* $FlowFixMe[incompatible-type-arg] (>=0.108.0 site=react_native_fb)
        * This comment suppresses an error found when Flow v0.108 was deployed.
        * To see the error, delete this comment and run Flow. */
-      return /*#__PURE__*/React.createElement(ListItemComponent, {
+      return /*#__PURE__*/ React.createElement(ListItemComponent, {
         item,
         index,
-        separators: this._separators
+        separators: this._separators,
       });
     }
 
@@ -1576,64 +1997,112 @@ class CellRenderer extends React.Component {
       return renderItem({
         item,
         index,
-        separators: this._separators
+        separators: this._separators,
       });
     }
 
-    invariant(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
+    invariant(
+      false,
+      "VirtualizedList: Either ListItemComponent or renderItem props are required but none were found."
+    );
   }
 
   render() {
     var _this$props14 = this.props,
-        CellRendererComponent = _this$props14.CellRendererComponent,
-        ItemSeparatorComponent = _this$props14.ItemSeparatorComponent,
-        fillRateHelper = _this$props14.fillRateHelper,
-        horizontal = _this$props14.horizontal,
-        item = _this$props14.item,
-        index = _this$props14.index,
-        inversionStyle = _this$props14.inversionStyle,
-        parentProps = _this$props14.parentProps;
+      CellRendererComponent = _this$props14.CellRendererComponent,
+      ItemSeparatorComponent = _this$props14.ItemSeparatorComponent,
+      fillRateHelper = _this$props14.fillRateHelper,
+      horizontal = _this$props14.horizontal,
+      item = _this$props14.item,
+      index = _this$props14.index,
+      inversionStyle = _this$props14.inversionStyle,
+      parentProps = _this$props14.parentProps;
     var renderItem = parentProps.renderItem,
-        getItemLayout = parentProps.getItemLayout,
-        ListItemComponent = parentProps.ListItemComponent;
+      getItemLayout = parentProps.getItemLayout,
+      ListItemComponent = parentProps.ListItemComponent;
 
-    var element = this._renderElement(renderItem, ListItemComponent, item, index);
+    var element = this._renderElement(
+      renderItem,
+      ListItemComponent,
+      item,
+      index
+    );
 
     var onLayout =
-    /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment
-     * suppresses an error found when Flow v0.68 was deployed. To see the
-     * error delete this comment and run Flow. */
-    getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout; // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
+      /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment
+       * suppresses an error found when Flow v0.68 was deployed. To see the
+       * error delete this comment and run Flow. */
+      getItemLayout && !parentProps.debug && !fillRateHelper.enabled()
+        ? undefined
+        : this.props.onLayout; // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and
     // called explicitly by `ScrollViewStickyHeader`.
 
-    var itemSeparator = ItemSeparatorComponent && /*#__PURE__*/React.createElement(ItemSeparatorComponent, this.state.separatorProps);
-    var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
-    var result = !CellRendererComponent ?
-    /*#__PURE__*/
-
-    /* $FlowFixMe[incompatible-type-arg] (>=0.89.0 site=react_native_fb) *
+    var itemSeparator =
+      ItemSeparatorComponent &&
+      /*#__PURE__*/ React.createElement(
+        ItemSeparatorComponent,
+        this.state.separatorProps
+      );
+    var cellStyle = inversionStyle
+      ? horizontal
+        ? [styles.rowReverse, inversionStyle]
+        : [styles.columnReverse, inversionStyle]
+      : horizontal
+      ? [styles.row, inversionStyle]
+      : inversionStyle;
+    var result = !CellRendererComponent
+      ? /*#__PURE__*/
+
+        /* $FlowFixMe[incompatible-type-arg] (>=0.89.0 site=react_native_fb) *
       This comment suppresses an error found when Flow v0.89 was deployed. *
       To see the error, delete this comment and run Flow. */
-    React.createElement(View, {
-      style: cellStyle,
-      onLayout: onLayout
-    }, element, itemSeparator) : /*#__PURE__*/React.createElement(CellRendererComponent, _extends({}, this.props, {
-      style: cellStyle,
-      onLayout: onLayout
-    }), element, itemSeparator);
-    return /*#__PURE__*/React.createElement(VirtualizedListCellContextProvider, {
-      cellKey: this.props.cellKey
-    }, result);
+        React.createElement(
+          View,
+          {
+            style: cellStyle,
+            onLayout: onLayout,
+          },
+          element,
+          itemSeparator
+        )
+      : /*#__PURE__*/ React.createElement(
+          CellRendererComponent,
+          _extends({}, this.props, {
+            style: cellStyle,
+            onLayout: onLayout,
+          }),
+          element,
+          itemSeparator
+        );
+    return /*#__PURE__*/ React.createElement(
+      VirtualizedListCellContextProvider,
+      {
+        cellKey: this.props.cellKey,
+      },
+      this.props.parentProps.itemAs
+        ? React.createElement(this.props.parentProps.itemAs, {}, result)
+        : result
+    );
   }
-
 }
 
 function describeNestedLists(childList) {
-  var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
+  var trace =
+    "VirtualizedList trace:\n" +
+    ("  Child (" +
+      (childList.horizontal ? "horizontal" : "vertical") +
+      "):\n") +
+    ("    listKey: " + childList.key + "\n") +
+    ("    cellKey: " + childList.cellKey);
   var debugInfo = childList.parentDebugInfo;
 
   while (debugInfo) {
-    trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
+    trace +=
+      "\n  Parent (" +
+      (debugInfo.horizontal ? "horizontal" : "vertical") +
+      "):\n" +
+      ("    listKey: " + debugInfo.listKey + "\n") +
+      ("    cellKey: " + debugInfo.cellKey);
     debugInfo = debugInfo.parent;
   }
 
@@ -1642,51 +2111,55 @@ function describeNestedLists(childList) {
 
 var styles = StyleSheet.create({
   verticallyInverted: {
-    transform: [{
-      scaleY: -1
-    }]
+    transform: [
+      {
+        scaleY: -1,
+      },
+    ],
   },
   horizontallyInverted: {
-    transform: [{
-      scaleX: -1
-    }]
+    transform: [
+      {
+        scaleX: -1,
+      },
+    ],
   },
   row: {
-    flexDirection: 'row'
+    flexDirection: "row",
   },
   rowReverse: {
-    flexDirection: 'row-reverse'
+    flexDirection: "row-reverse",
   },
   columnReverse: {
-    flexDirection: 'column-reverse'
+    flexDirection: "column-reverse",
   },
   debug: {
-    flex: 1
+    flex: 1,
   },
   debugOverlayBase: {
-    position: 'absolute',
+    position: "absolute",
     top: 0,
-    right: 0
+    right: 0,
   },
   debugOverlay: {
     bottom: 0,
     width: 20,
-    borderColor: 'blue',
-    borderWidth: 1
+    borderColor: "blue",
+    borderWidth: 1,
   },
   debugOverlayFrame: {
     left: 0,
-    backgroundColor: 'orange'
+    backgroundColor: "orange",
   },
   debugOverlayFrameLast: {
     left: 0,
-    borderColor: 'green',
-    borderWidth: 2
+    borderColor: "green",
+    borderWidth: 2,
   },
   debugOverlayFrameVis: {
     left: 0,
-    borderColor: 'red',
-    borderWidth: 2
-  }
+    borderColor: "red",
+    borderWidth: 2,
+  },
 });
 export default VirtualizedList;
diff --git a/src/exports/Image/index.js b/src/exports/Image/index.js
index 7f6a62fe1ecd7917bca51ceabe9777b6325c9e16..dc5d3723601924fddca747c61d26b8676a6abb60 100644
--- a/src/exports/Image/index.js
+++ b/src/exports/Image/index.js
@@ -8,24 +8,24 @@
  * @flow
  */
 
-import type { ImageProps } from './types';
-
-import * as React from 'react';
-import createElement from '../createElement';
-import { getAssetByID } from '../../modules/AssetRegistry';
-import { createBoxShadowValue } from '../StyleSheet/preprocess';
-import ImageLoader from '../../modules/ImageLoader';
-import PixelRatio from '../PixelRatio';
-import StyleSheet from '../StyleSheet';
-import TextAncestorContext from '../Text/TextAncestorContext';
-import View from '../View';
+import type { ImageProps } from "./types";
+
+import * as React from "react";
+import createElement from "../createElement";
+import { getAssetByID } from "../../modules/AssetRegistry";
+import { createBoxShadowValue } from "../StyleSheet/preprocess";
+import ImageLoader from "../../modules/ImageLoader";
+import PixelRatio from "../PixelRatio";
+import StyleSheet from "../StyleSheet";
+import TextAncestorContext from "../Text/TextAncestorContext";
+import View from "../View";
 
 export type { ImageProps };
 
-const ERRORED = 'ERRORED';
-const LOADED = 'LOADED';
-const LOADING = 'LOADING';
-const IDLE = 'IDLE';
+const ERRORED = "ERRORED";
+const LOADED = "LOADED";
+const LOADING = "LOADING";
+const IDLE = "IDLE";
 
 let _filterId = 0;
 const svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
@@ -34,10 +34,10 @@ function createTintColorSVG(tintColor, id) {
   return tintColor && id != null ? (
     <svg
       style={{
-        position: 'absolute',
+        position: "absolute",
         height: 0,
-        visibility: 'hidden',
-        width: 0
+        visibility: "hidden",
+        width: 0,
       }}
     >
       <defs>
@@ -76,7 +76,7 @@ function getFlatStyle(style, blurRadius, filterId) {
   }
 
   if (filters.length > 0) {
-    _filter = filters.join(' ');
+    _filter = filters.join(" ");
   }
 
   // These styles are converted to CSS filters applied to the
@@ -95,13 +95,13 @@ function getFlatStyle(style, blurRadius, filterId) {
 }
 
 function resolveAssetDimensions(source) {
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     const { height, width } = getAssetByID(source);
     return { height, width };
   } else if (
     source != null &&
     !Array.isArray(source) &&
-    typeof source === 'object'
+    typeof source === "object"
   ) {
     const { height, width } = source;
     return { height, width };
@@ -110,7 +110,7 @@ function resolveAssetDimensions(source) {
 
 function resolveAssetUri(source): ?string {
   let uri = null;
-  if (typeof source === 'number') {
+  if (typeof source === "number") {
     // get the URI from the packager
     const asset = getAssetByID(source);
     if (asset == null) {
@@ -128,13 +128,13 @@ function resolveAssetUri(source): ?string {
           : prev
       );
     }
-    const scaleSuffix = scale !== 1 ? `@${scale}x` : '';
+    const scaleSuffix = scale !== 1 ? `@${scale}x` : "";
     uri = asset
       ? `${asset.httpServerLocation}/${asset.name}${scaleSuffix}.${asset.type}`
-      : '';
-  } else if (typeof source === 'string') {
+      : "";
+  } else if (typeof source === "string") {
     uri = source;
-  } else if (source && typeof source.uri === 'string') {
+  } else if (source && typeof source.uri === "string") {
     uri = source.uri;
   }
 
@@ -160,7 +160,7 @@ interface ImageStatics {
   prefetch: (uri: string) => Promise<void>;
   queryCache: (
     uris: Array<string>
-  ) => Promise<{| [uri: string]: 'disk/memory' |}>;
+  ) => Promise<{| [uri: string]: "disk/memory" |}>;
 }
 
 const Image: React.AbstractComponent<
@@ -180,13 +180,14 @@ const Image: React.AbstractComponent<
     pointerEvents,
     source,
     style,
+    transform,
     ...rest
   } = props;
 
-  if (process.env.NODE_ENV !== 'production') {
+  if (process.env.NODE_ENV !== "production") {
     if (props.children) {
       throw new Error(
-        'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.'
+        "The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning."
       );
     }
   }
@@ -214,7 +215,7 @@ const Image: React.AbstractComponent<
     blurRadius,
     filterRef.current
   );
-  const resizeMode = props.resizeMode || _resizeMode || 'cover';
+  const resizeMode = props.resizeMode || _resizeMode || "cover";
   const selectedSource = shouldDisplaySource ? source : defaultSource;
   const displayImageUri = resolveAssetUri(selectedSource);
   const imageSizeStyle = resolveAssetDimensions(selectedSource);
@@ -223,19 +224,19 @@ const Image: React.AbstractComponent<
 
   // Accessibility image allows users to trigger the browser's image context menu
   const hiddenImage = displayImageUri
-    ? createElement('img', {
-        alt: accessibilityLabel || '',
+    ? createElement("img", {
+        alt: accessibilityLabel || "",
         style: styles.accessibilityImage$raw,
         draggable: draggable || false,
         ref: hiddenImageRef,
-        src: displayImageUri
+        src: displayImageUri,
       })
     : null;
 
   function getBackgroundSize(): ?string {
     if (
       hiddenImageRef.current != null &&
-      (resizeMode === 'center' || resizeMode === 'repeat')
+      (resizeMode === "center" || resizeMode === "repeat")
     ) {
       const { naturalHeight, naturalWidth } = hiddenImageRef.current;
       const { height, width } = layout;
@@ -253,7 +254,7 @@ const Image: React.AbstractComponent<
   }
 
   function handleLayout(e) {
-    if (resizeMode === 'center' || resizeMode === 'repeat' || onLayout) {
+    if (resizeMode === "center" || resizeMode === "repeat" || onLayout) {
       const { layout } = e.nativeEvent;
       onLayout && onLayout(e);
       updateLayout(layout);
@@ -287,8 +288,8 @@ const Image: React.AbstractComponent<
           if (onError) {
             onError({
               nativeEvent: {
-                error: `Failed to load resource ${uri} (404)`
-              }
+                error: `Failed to load resource ${uri} (404)`,
+              },
             });
           }
           if (onLoadEnd) {
@@ -319,15 +320,15 @@ const Image: React.AbstractComponent<
         styles.root,
         hasTextAncestor && styles.inline,
         imageSizeStyle,
-        flatStyle
+        flatStyle,
       ]}
     >
       <View
         style={[
           styles.image,
           resizeModeStyles[resizeMode],
-          { backgroundImage, filter },
-          backgroundSize != null && { backgroundSize }
+          { backgroundImage, filter, transform },
+          backgroundSize != null && { backgroundSize },
         ]}
         suppressHydrationWarning={true}
       />
@@ -337,7 +338,7 @@ const Image: React.AbstractComponent<
   );
 });
 
-Image.displayName = 'Image';
+Image.displayName = "Image";
 
 // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet
 const ImageWithStatics = (Image: React.AbstractComponent<
@@ -360,54 +361,54 @@ ImageWithStatics.queryCache = function (uris) {
 
 const styles = StyleSheet.create({
   root: {
-    flexBasis: 'auto',
-    overflow: 'hidden',
-    zIndex: 0
+    flexBasis: "auto",
+    overflow: "hidden",
+    zIndex: 0,
   },
   inline: {
-    display: 'inline-flex'
+    display: "inline-flex",
   },
   image: {
     ...StyleSheet.absoluteFillObject,
-    backgroundColor: 'transparent',
-    backgroundPosition: 'center',
-    backgroundRepeat: 'no-repeat',
-    backgroundSize: 'cover',
-    height: '100%',
-    width: '100%',
-    zIndex: -1
+    backgroundColor: "transparent",
+    backgroundPosition: "center",
+    backgroundRepeat: "no-repeat",
+    backgroundSize: "cover",
+    height: "100%",
+    width: "100%",
+    zIndex: -1,
   },
   accessibilityImage$raw: {
     ...StyleSheet.absoluteFillObject,
-    height: '100%',
+    height: "100%",
     opacity: 0,
-    width: '100%',
-    zIndex: -1
-  }
+    width: "100%",
+    zIndex: -1,
+  },
 });
 
 const resizeModeStyles = StyleSheet.create({
   center: {
-    backgroundSize: 'auto'
+    backgroundSize: "auto",
   },
   contain: {
-    backgroundSize: 'contain'
+    backgroundSize: "contain",
   },
   cover: {
-    backgroundSize: 'cover'
+    backgroundSize: "cover",
   },
   none: {
-    backgroundPosition: '0',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundSize: "auto",
   },
   repeat: {
-    backgroundPosition: '0',
-    backgroundRepeat: 'repeat',
-    backgroundSize: 'auto'
+    backgroundPosition: "0",
+    backgroundRepeat: "repeat",
+    backgroundSize: "auto",
   },
   stretch: {
-    backgroundSize: '100% 100%'
-  }
+    backgroundSize: "100% 100%",
+  },
 });
 
 export default ImageWithStatics;
diff --git a/src/exports/Text/index.js b/src/exports/Text/index.js
index d5b47c28bd77cdf6992103a38ae905f31aa56885..7e7504d216a23c6ded85cf7a80ae269ba0103f5a 100644
--- a/src/exports/Text/index.js
+++ b/src/exports/Text/index.js
@@ -8,20 +8,20 @@
  * @flow
  */
 
-import type { PlatformMethods } from '../../types';
-import type { TextProps } from './types';
-
-import * as React from 'react';
-import createElement from '../createElement';
-import * as forwardedProps from '../../modules/forwardedProps';
-import pick from '../../modules/pick';
-import useElementLayout from '../../modules/useElementLayout';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import useResponderEvents from '../../modules/useResponderEvents';
-import StyleSheet from '../StyleSheet';
-import TextAncestorContext from './TextAncestorContext';
-import { useLocaleContext, getLocaleDirection } from '../../modules/useLocale';
+import type { PlatformMethods } from "../../types";
+import type { TextProps } from "./types";
+
+import * as React from "react";
+import createElement from "../createElement";
+import * as forwardedProps from "../../modules/forwardedProps";
+import pick from "../../modules/pick";
+import useElementLayout from "../../modules/useElementLayout";
+import useMergeRefs from "../../modules/useMergeRefs";
+import usePlatformMethods from "../../modules/usePlatformMethods";
+import useResponderEvents from "../../modules/useResponderEvents";
+import StyleSheet from "../StyleSheet";
+import TextAncestorContext from "./TextAncestorContext";
+import { useLocaleContext, getLocaleDirection } from "../../modules/useLocale";
 
 const forwardPropsList = Object.assign(
   {},
@@ -36,7 +36,7 @@ const forwardPropsList = Object.assign(
   {
     href: true,
     lang: true,
-    pointerEvents: true
+    pointerEvents: true,
   }
 );
 
@@ -91,7 +91,7 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
       onSelectionChangeShouldSetResponder,
       onSelectionChangeShouldSetResponderCapture,
       onStartShouldSetResponder,
-      onStartShouldSetResponderCapture
+      onStartShouldSetResponderCapture,
     });
 
     const handleClick = React.useCallback(
@@ -106,7 +106,7 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
       [onClick, onPress]
     );
 
-    let component = hasTextAncestor ? 'span' : 'div';
+    let component = hasTextAncestor ? "span" : "div";
 
     const langDirection =
       props.lang != null ? getLocaleDirection(props.lang) : null;
@@ -115,10 +115,10 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
 
     const supportedProps = pickProps(rest);
     supportedProps.dir = componentDirection;
-    // 'auto' by default allows browsers to infer writing direction (root elements only)
+    // 'ltr' by default allows browsers to infer writing direction (root elements only)
     if (!hasTextAncestor) {
       supportedProps.dir =
-        componentDirection != null ? componentDirection : 'auto';
+        componentDirection != null ? componentDirection : "ltr";
     }
 
     if (onClick || onPress) {
@@ -134,11 +134,11 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
       props.style,
       selectable === true && styles.selectable,
       selectable === false && styles.notSelectable,
-      onPress && styles.pressable
+      onPress && styles.pressable,
     ];
 
     if (props.href != null) {
-      component = 'a';
+      component = "a";
       if (hrefAttrs != null) {
         const { download, rel, target } = hrefAttrs;
         if (download != null) {
@@ -147,9 +147,9 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
         if (rel != null) {
           supportedProps.rel = rel;
         }
-        if (typeof target === 'string') {
+        if (typeof target === "string") {
           supportedProps.target =
-            target.charAt(0) !== '_' ? '_' + target : target;
+            target.charAt(0) !== "_" ? "_" + target : target;
         }
       }
     }
@@ -160,7 +160,7 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
     supportedProps.ref = setRef;
 
     const element = createElement(component, supportedProps, {
-      writingDirection
+      writingDirection,
     });
 
     return hasTextAncestor ? (
@@ -172,56 +172,56 @@ const Text: React.AbstractComponent<TextProps, HTMLElement & PlatformMethods> =
     );
   });
 
-Text.displayName = 'Text';
+Text.displayName = "Text";
 
 const textStyle = {
-  backgroundColor: 'transparent',
-  border: '0 solid black',
-  boxSizing: 'border-box',
-  color: 'black',
-  display: 'inline',
-  font: '14px System',
-  listStyle: 'none',
+  backgroundColor: "transparent",
+  border: "0 solid black",
+  boxSizing: "border-box",
+  color: "black",
+  display: "inline",
+  font: "14px System",
+  listStyle: "none",
   margin: 0,
   padding: 0,
-  textAlign: 'inherit',
-  textDecoration: 'none',
-  whiteSpace: 'pre-wrap',
-  wordWrap: 'break-word'
+  textAlign: "inherit",
+  textDecoration: "none",
+  whiteSpace: "pre-wrap",
+  wordWrap: "break-word",
 };
 
 const styles = StyleSheet.create({
   text$raw: textStyle,
   textHasAncestor$raw: {
     ...textStyle,
-    color: 'inherit',
-    font: 'inherit',
-    whiteSpace: 'inherit'
+    color: "inherit",
+    font: "inherit",
+    whiteSpace: "inherit",
   },
   textOneLine: {
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    whiteSpace: 'nowrap',
-    wordWrap: 'normal'
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    whiteSpace: "nowrap",
+    wordWrap: "normal",
   },
   // See #13
   textMultiLine: {
-    display: '-webkit-box',
-    maxWidth: '100%',
-    overflow: 'hidden',
-    textOverflow: 'ellipsis',
-    WebkitBoxOrient: 'vertical'
+    display: "-webkit-box",
+    maxWidth: "100%",
+    overflow: "hidden",
+    textOverflow: "ellipsis",
+    WebkitBoxOrient: "vertical",
   },
   notSelectable: {
-    userSelect: 'none'
+    userSelect: "none",
   },
   selectable: {
-    userSelect: 'text'
+    userSelect: "text",
   },
   pressable: {
-    cursor: 'pointer'
-  }
+    cursor: "pointer",
+  },
 });
 
 export default Text;
diff --git a/src/exports/TextInput/index.js b/src/exports/TextInput/index.js
index 1a0cf24d06ed3e28046b9303515d93cd6bb2d5b5..92a112fe3a3a7b84a221e271d7176a8ad3c8a5a4 100644
--- a/src/exports/TextInput/index.js
+++ b/src/exports/TextInput/index.js
@@ -8,21 +8,21 @@
  * @flow
  */
 
-import type { PlatformMethods } from '../../types';
-import type { TextInputProps } from './types';
-
-import * as React from 'react';
-import createElement from '../createElement';
-import * as forwardedProps from '../../modules/forwardedProps';
-import pick from '../../modules/pick';
-import useElementLayout from '../../modules/useElementLayout';
-import useLayoutEffect from '../../modules/useLayoutEffect';
-import useMergeRefs from '../../modules/useMergeRefs';
-import usePlatformMethods from '../../modules/usePlatformMethods';
-import useResponderEvents from '../../modules/useResponderEvents';
-import { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';
-import StyleSheet from '../StyleSheet';
-import TextInputState from '../../modules/TextInputState';
+import type { PlatformMethods } from "../../types";
+import type { TextInputProps } from "./types";
+
+import * as React from "react";
+import createElement from "../createElement";
+import * as forwardedProps from "../../modules/forwardedProps";
+import pick from "../../modules/pick";
+import useElementLayout from "../../modules/useElementLayout";
+import useLayoutEffect from "../../modules/useLayoutEffect";
+import useMergeRefs from "../../modules/useMergeRefs";
+import usePlatformMethods from "../../modules/usePlatformMethods";
+import useResponderEvents from "../../modules/useResponderEvents";
+import { getLocaleDirection, useLocaleContext } from "../../modules/useLocale";
+import StyleSheet from "../StyleSheet";
+import TextInputState from "../../modules/TextInputState";
 
 /**
  * Determines whether a 'selection' prop differs from a node's existing
@@ -74,7 +74,7 @@ const forwardPropsList = Object.assign(
     rows: true,
     spellCheck: true,
     value: true,
-    type: true
+    type: true,
   }
 );
 
@@ -93,7 +93,7 @@ const TextInput: React.AbstractComponent<
   HTMLElement & PlatformMethods
 > = React.forwardRef((props, forwardedRef) => {
   const {
-    autoCapitalize = 'sentences',
+    autoCapitalize = "sentences",
     autoComplete,
     autoCompleteType,
     autoCorrect = true,
@@ -101,7 +101,7 @@ const TextInput: React.AbstractComponent<
     clearTextOnFocus,
     dir,
     editable = true,
-    keyboardType = 'default',
+    keyboardType = "default",
     multiline = false,
     numberOfLines = 1,
     onBlur,
@@ -134,39 +134,39 @@ const TextInput: React.AbstractComponent<
     secureTextEntry = false,
     selection,
     selectTextOnFocus,
-    spellCheck
+    spellCheck,
   } = props;
 
   let type;
   let inputMode;
 
   switch (keyboardType) {
-    case 'email-address':
-      type = 'email';
+    case "email-address":
+      type = "email";
       break;
-    case 'number-pad':
-    case 'numeric':
-      inputMode = 'numeric';
+    case "number-pad":
+    case "numeric":
+      inputMode = "numeric";
       break;
-    case 'decimal-pad':
-      inputMode = 'decimal';
+    case "decimal-pad":
+      inputMode = "decimal";
       break;
-    case 'phone-pad':
-      type = 'tel';
+    case "phone-pad":
+      type = "tel";
       break;
-    case 'search':
-    case 'web-search':
-      type = 'search';
+    case "search":
+    case "web-search":
+      type = "search";
       break;
-    case 'url':
-      type = 'url';
+    case "url":
+      type = "url";
       break;
     default:
-      type = 'text';
+      type = "text";
   }
 
   if (secureTextEntry) {
-    type = 'password';
+    type = "password";
   }
 
   const dimensions = React.useRef({ height: null, width: null });
@@ -187,9 +187,9 @@ const TextInput: React.AbstractComponent<
             nativeEvent: {
               contentSize: {
                 height: dimensions.current.height,
-                width: dimensions.current.width
-              }
-            }
+                width: dimensions.current.width,
+              },
+            },
           });
         }
       }
@@ -205,7 +205,7 @@ const TextInput: React.AbstractComponent<
       if (hostNode != null) {
         hostNode.clear = function () {
           if (hostNode != null) {
-            hostNode.value = '';
+            hostNode.value = "";
           }
         };
         hostNode.isFocused = function () {
@@ -250,7 +250,7 @@ const TextInput: React.AbstractComponent<
     if (hostNode != null) {
       TextInputState._currentlyFocusedNode = hostNode;
       if (clearTextOnFocus) {
-        hostNode.value = '';
+        hostNode.value = "";
       }
       if (selectTextOnFocus) {
         // Safari requires selection to occur in a setTimeout
@@ -283,7 +283,7 @@ const TextInput: React.AbstractComponent<
     }
 
     if (
-      e.key === 'Enter' &&
+      e.key === "Enter" &&
       !e.shiftKey &&
       // Do not call submit if composition is occuring.
       !isComposing &&
@@ -308,7 +308,7 @@ const TextInput: React.AbstractComponent<
         const { selectionStart, selectionEnd } = node;
         e.nativeEvent.selection = {
           start: selectionStart,
-          end: selectionEnd
+          end: selectionEnd,
         };
         e.nativeEvent.text = e.target.value;
         onSelectionChange(e);
@@ -326,7 +326,7 @@ const TextInput: React.AbstractComponent<
     }
   }, [hostRef, selection]);
 
-  const component = multiline ? 'textarea' : 'input';
+  const component = multiline ? "textarea" : "input";
 
   useElementLayout(hostRef, onLayout);
   useResponderEvents(hostRef, {
@@ -345,16 +345,16 @@ const TextInput: React.AbstractComponent<
     onSelectionChangeShouldSetResponder,
     onSelectionChangeShouldSetResponderCapture,
     onStartShouldSetResponder,
-    onStartShouldSetResponderCapture
+    onStartShouldSetResponderCapture,
   });
   const { direction: contextDirection } = useLocaleContext();
 
   const supportedProps = pickProps(props);
   supportedProps.autoCapitalize = autoCapitalize;
-  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';
-  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';
-  // 'auto' by default allows browsers to infer writing direction
-  supportedProps.dir = dir !== undefined ? dir : 'auto';
+  supportedProps.autoComplete = autoComplete || autoCompleteType || "on";
+  supportedProps.autoCorrect = autoCorrect ? "on" : "off";
+  // 'ltr' by default allows browsers to infer writing direction
+  supportedProps.dir = dir !== undefined ? dir : "ltr";
   supportedProps.enterKeyHint = returnKeyType;
   supportedProps.inputMode = inputMode;
   supportedProps.onBlur = handleBlur;
@@ -366,10 +366,10 @@ const TextInput: React.AbstractComponent<
   supportedProps.rows = multiline ? numberOfLines : undefined;
   supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;
   supportedProps.style = [
-    { '--placeholderTextColor': placeholderTextColor },
+    { "--placeholderTextColor": placeholderTextColor },
     styles.textinput$raw,
     styles.placeholder,
-    props.style
+    props.style,
   ];
   supportedProps.type = multiline ? undefined : type;
 
@@ -390,32 +390,32 @@ const TextInput: React.AbstractComponent<
   const writingDirection = componentDirection || contextDirection;
 
   const element = createElement(component, supportedProps, {
-    writingDirection
+    writingDirection,
   });
 
   return element;
 });
 
-TextInput.displayName = 'TextInput';
+TextInput.displayName = "TextInput";
 // $FlowFixMe
 TextInput.State = TextInputState;
 
 const styles = StyleSheet.create({
   textinput$raw: {
-    MozAppearance: 'textfield',
-    WebkitAppearance: 'none',
-    backgroundColor: 'transparent',
-    border: '0 solid black',
+    MozAppearance: "textfield",
+    WebkitAppearance: "none",
+    backgroundColor: "transparent",
+    border: "0 solid black",
     borderRadius: 0,
-    boxSizing: 'border-box',
-    font: '14px System',
+    boxSizing: "border-box",
+    font: "14px System",
     margin: 0,
     padding: 0,
-    resize: 'none'
+    resize: "none",
   },
   placeholder: {
-    placeholderTextColor: 'var(--placeholderTextColor)'
-  }
+    placeholderTextColor: "var(--placeholderTextColor)",
+  },
 });
 
 export default TextInput;
