/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { ElementType } from 'react'
import { View } from 'react-native'
import styled from 'styled-components/native'

import { AccessibilityRole } from 'libs/accessibilityRole/accessibilityRole'
import { InputError } from 'ui/components/inputs/InputError'
import { ViewGap } from 'ui/components/ViewGap/ViewGap'
import { Checkbox } from 'ui/designSystem/Checkbox/Checkbox'
import { CheckboxVariant } from 'ui/designSystem/Checkbox/types'
import {
  CheckboxGroupDisplay,
  CheckboxGroupOption,
  CheckboxGroupProps,
} from 'ui/designSystem/CheckboxGroup/types'
import { Typo } from 'ui/theme'

export const CheckboxGroup = ({
  label,
  labelTag = 'span',
  description,
  error,
  options,
  value,
  onChange,
  display = 'vertical',
  variant = 'default',
  disabled = false,
  customRequiredText,
}: CheckboxGroupProps) => {
  let LabelTag: ElementType
  switch (labelTag) {
    case 'h1':
      LabelTag = Typo.Title1
      break
    case 'h2':
      LabelTag = Typo.Title2
      break
    case 'h3':
      LabelTag = Typo.Title3
      break
    default:
      LabelTag = Typo.BodyAccent
      break
  }

  const selectedValues = value ?? []
  const handleChange = (option: CheckboxGroupOption, newValue: boolean) => {
    if (disabled) return
    let newValues: string[]
    if (newValue) newValues = [...selectedValues, option.value]
    else newValues = selectedValues.filter((value) => value !== option.value)
    onChange?.(newValues)
  }

  const requiredCount = options.filter((option) => option.required).length
  const showRequiredText = requiredCount > 0
  const requiredLabel =
    customRequiredText ?? `${requiredCount === 1 ? 'obligatoire' : 'obligatoires'}`

  return (
    <View accessibilityRole={AccessibilityRole.GROUP}>
      <Header gap={2} hasError={!!error}>
        <LabelTag>{label}</LabelTag>
        {description ? <Description>{description}</Description> : null}
        {error ? <InputError errorMessage={error} visible /> : null}
      </Header>

      <CheckboxContainer variant={variant} display={display}>
        {options.map((option) => {
          const isChecked = selectedValues.includes(option.value)

          const commonProps = {
            label: option.label,
            isChecked,
            onPress: (newValue: boolean) => handleChange(option, newValue),
            hasError: !!error,
            disabled,
            indeterminate: option.indeterminate,
            required: option.required,
            accessibilityLabel: `${label} - ${option.label}`,
          }

          const computedCheckboxSizing = (() => {
            if (option.sizing) return option.sizing
            if (display === 'horizontal') return 'hug'
            return 'fill'
          })()

          if (variant === 'detailed') {
            if (option.collapsed) {
              return (
                <Checkbox
                  key={option.value}
                  variant="detailed"
                  sizing="fill"
                  collapsed={option.collapsed}
                  description={option.description}
                  asset={option.asset}
                  {...commonProps}
                />
              )
            }
            return (
              <Checkbox
                key={option.value}
                variant="detailed"
                sizing={computedCheckboxSizing}
                description={option.description}
                asset={option.asset}
                {...commonProps}
              />
            )
          }
          return (
            <Checkbox
              key={option.value}
              variant="default"
              sizing={computedCheckboxSizing}
              {...commonProps}
            />
          )
        })}
      </CheckboxContainer>

      {showRequiredText ? (
        <CaptionNeutralInfoContainer>
          <CaptionNeutralInfo>*{requiredLabel}</CaptionNeutralInfo>
        </CaptionNeutralInfoContainer>
      ) : null}
    </View>
  )
}

type HasErrorProps = { hasError: boolean }
const Header = styled(ViewGap)<HasErrorProps>(({ theme, hasError }) => ({
  marginBottom: hasError ? theme.designSystem.size.spacing.s : theme.designSystem.size.spacing.l,
}))

const Description = styled(Typo.Body)(({ theme }) => ({
  color: theme.designSystem.color.text.subtle,
}))

type VariantProps = { variant: CheckboxVariant }
type DisplayProps = { display: CheckboxGroupDisplay }
const CheckboxContainer = styled.View<VariantProps & DisplayProps>(
  ({ theme, variant, display }) => {
    const isVerticalDisplay = display === 'vertical'
    const isHorizontalDisplay = display === 'horizontal'
    const isDefaultVariant = variant === 'default'
    return {
      flexWrap: isHorizontalDisplay ? 'wrap' : 'nowrap',
      flexDirection: isVerticalDisplay ? 'column' : 'row',
      gap:
        isDefaultVariant || isHorizontalDisplay
          ? theme.designSystem.size.spacing.l
          : theme.designSystem.size.spacing.s,
    }
  }
)
const CaptionNeutralInfoContainer = styled.View(({ theme }) => ({
  marginTop: theme.designSystem.size.spacing.l,
}))

const CaptionNeutralInfo = styled(Typo.BodyAccentXs)(({ theme }) => ({
  color: theme.designSystem.color.text.subtle,
}))
