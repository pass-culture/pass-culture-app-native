/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { useCallback } from 'react'
import styled from 'styled-components/native'

import { useHandleFocus } from 'libs/hooks/useHandleFocus'
import { useHandleHover } from 'libs/hooks/useHandleHover'
import { accessibleRadioProps } from 'shared/accessibilityProps/accessibleRadioProps'
import { getBorderHoverStyle, getRadioColors } from 'ui/designSystem/RadioButton/helpers'
import {
  ContentContainer,
  RadioButtonDefaultContainer,
  RadioCircle,
  RightBox,
} from 'ui/designSystem/RadioButton/RadioButtonDefault'
import { RadioDescriptionText } from 'ui/designSystem/RadioButton/styles/RadioButtonLabel.styles'
import { DetailedRadioProps, RadioStateObject } from 'ui/designSystem/RadioButton/types'
import { SelectableAsset } from 'ui/designSystem/SelectableAsset'

export const RadioButtonDetailed = ({
  label,
  disabled,
  error,
  value,
  collapsed,
  description,
  asset,
  sizing,
  setValue,
}: DetailedRadioProps) => {
  const selected = value === label
  const focusProps = useHandleFocus()
  const hoverProps = useHandleHover()
  const onToggle = useCallback(() => {
    setValue(selected ? '' : label)
  }, [selected, label, setValue])
  const radioState = {
    selected: error ? false : selected,
    error: error ?? false,
    disabled: disabled ?? false,
  }

  return (
    <RadioButtonContainer
      radioState={radioState}
      variant="detailed"
      sizing={sizing}
      collapsed={collapsed}
      onPress={onToggle}
      {...accessibleRadioProps({ checked: selected, label })}
      {...focusProps}
      {...hoverProps}>
      <ContentContainer>
        <RadioCircle radioState={radioState} variant="detailed" hoverProps={hoverProps} />
        <RightBox radioState={radioState} label={label} hoverProps={hoverProps}>
          {description ? (
            <RadioDescriptionText radioState={radioState} {...hoverProps}>
              {description}
            </RadioDescriptionText>
          ) : null}
        </RightBox>
        {asset ? (
          <BottomBox>
            <SelectableAsset {...asset} disable={disabled} />
          </BottomBox>
        ) : null}
      </ContentContainer>
      {collapsed && selected ? <CollapsedContainer>{collapsed}</CollapsedContainer> : null}
    </RadioButtonContainer>
  )
}

const BottomBox = styled.View({ justifyContent: 'center' })

const CollapsedContainer = styled.View(({ theme }) => ({
  marginTop: theme.designSystem.size.spacing.l,
}))

type ContainerProps = {
  radioState: RadioStateObject
  variant: 'default' | 'detailed'
  collapsed?: React.ReactNode
}

const RadioButtonContainer = styled(RadioButtonDefaultContainer)<ContainerProps>(({
  theme,
  radioState,
  variant,
  collapsed,
  isHover,
}) => {
  const { backgroundColor } = getRadioColors(radioState, theme, {
    componentPart: 'container',
    variant,
    collapsed: !!collapsed,
  })
  return {
    backgroundColor,
    borderWidth: 1,
    borderRadius: theme.designSystem.size.borderRadius.m,
    padding: theme.designSystem.size.spacing.l,
    ...getBorderHoverStyle({ radioState, theme, isHover }),
  }
})
