/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React from 'react'
import { Platform } from 'react-native'
import styled from 'styled-components/native'

import { useHandleFocus } from 'libs/hooks/useHandleFocus'
import { useHandleHover } from 'libs/hooks/useHandleHover'
import { accessibleRadioProps } from 'shared/accessibilityProps/accessibleRadioProps'
import { TouchableOpacity } from 'ui/components/TouchableOpacity'
import { getBorderHoverStyle, getRadioColors } from 'ui/designSystem/RadioButton/helpers'
import {
  RadioDescriptionText,
  RadioLabelText,
  RadioLabelTextSelected,
} from 'ui/designSystem/RadioButton/styles/RadioButtonLabel.styles'
import {
  RadioInnerDot,
  RadioOuterCircle,
} from 'ui/designSystem/RadioButton/styles/RadioCircle.styles'
import { SelectableAsset } from 'ui/designSystem/SelectableAsset'
import { SelectableAssetProps, SelectableSizing } from 'ui/designSystem/types'
import { customFocusOutline } from 'ui/theme/customFocusOutline/customFocusOutline'

type RadioButtonDefaultProps = {
  label: string
  disabled: boolean
  error: boolean
  value: string | null
  collapsed: React.ReactNode | null
  description: string | null
  asset: SelectableAssetProps | null
  setValue(value: string): void
  sizing: SelectableSizing
}

export type RadioStateObject = {
  isSelected: boolean
  error: boolean
  disabled: boolean
}

export const RadioButtonDetailed = ({
  label,
  disabled,
  error,
  value,
  collapsed,
  description,
  asset,
  sizing,
}: RadioButtonDefaultProps) => {
  const isSelected = value === label
  const Label = isSelected ? RadioLabelTextSelected : RadioLabelText
  const focusProps = useHandleFocus()
  const hoverProps = useHandleHover()
  const radioState = {
    isSelected,
    error,
    disabled,
  }

  return (
    <RadioButtonContainer
      radioState={radioState}
      variant="detailed"
      sizing={sizing}
      collapsed={collapsed}
      {...accessibleRadioProps({ checked: isSelected, label })}
      {...focusProps}
      {...hoverProps}>
      <ContentContainer>
        <RadioOuterCircle radioState={radioState} variant="detailed" {...hoverProps}>
          {isSelected ? (
            <RadioInnerDot radioState={radioState} variant="detailed" {...hoverProps} />
          ) : null}
        </RadioOuterCircle>
        <RightBox>
          <Label radioState={radioState} {...hoverProps}>
            {label}
          </Label>
          {description ? (
            <RadioDescriptionText radioState={radioState} {...hoverProps}>
              {description}
            </RadioDescriptionText>
          ) : null}
        </RightBox>
        {asset ? (
          <BottomBox>
            <SelectableAsset {...asset} disable={disabled} />
          </BottomBox>
        ) : null}
      </ContentContainer>
      {collapsed && isSelected ? <CollapsedContainer>{collapsed}</CollapsedContainer> : null}
    </RadioButtonContainer>
  )
}

const ContentContainer = styled.View(({ theme }) => ({
  alignItems: 'center',
  flexDirection: 'row',
  columnGap: theme.designSystem.size.spacing.m,
}))

const RightBox = styled.View({ flex: 1 })

const BottomBox = styled.View({ justifyContent: 'center' })

const CollapsedContainer = styled.View(({ theme }) => ({
  marginTop: theme.designSystem.size.spacing.l,
}))

type ContainerProps = {
  radioState: RadioStateObject
  variant: 'default' | 'detailed'
  collapsed?: React.ReactNode
  sizing?: SelectableSizing
  isHover?: boolean
  isFocus?: boolean
}

const isWeb = Platform.OS === 'web'

export const RadioButtonContainer = styled(TouchableOpacity)<ContainerProps>(({
  theme,
  radioState,
  variant,
  sizing,
  isFocus,
  isHover,
  collapsed,
}) => {
  const { borderColor, backgroundColor } = getRadioColors(radioState, theme, {
    componentPart: 'container',
    variant,
    collapsed: !!collapsed,
  })
  return {
    cursor: radioState.disabled ? 'default' : 'pointer',
    width: sizing === 'fill' ? '100%' : undefined,
    alignSelf: sizing === 'hug' && isWeb ? 'flex-start' : undefined,
    backgroundColor,
    borderWidth: 1,
    borderColor,
    borderRadius: theme.designSystem.size.borderRadius.m,
    padding: theme.designSystem.size.spacing.l,
    ...customFocusOutline({ isFocus }),
    ...getBorderHoverStyle({ radioState, theme, isHover }),
  }
})
