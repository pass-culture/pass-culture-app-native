/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import userEvent from '@testing-library/user-event'
import React from 'react'

import { act, render, screen } from 'tests/utils/web'

import { RadioButton } from './RadioButton'

const onSelectMock = jest.fn()
const labelText = 'I agree to disagree'
const propsBase = {
  label: labelText,
  onSelect: onSelectMock,
  isSelected: false,
}

describe('<RadioButton />', () => {
  it('should render an accessible RadioButton', () => {
    render(<RadioButton {...propsBase} />)

    expect(screen.getByRole('radio')).toBeInTheDocument()
  })

  it('is linked to his label', () => {
    render(<RadioButton {...propsBase} />)

    expect(screen.getByLabelText(labelText)).toEqual(screen.getByRole('radio'))
  })

  it('can be checked with RadioButton', async () => {
    render(<RadioButton {...propsBase} />)

    await act(async () => {
      await userEvent.click(screen.getByLabelText(labelText))
    })

    expect(onSelectMock).toHaveBeenCalledWith(true)
  })

  it('can be checked with label', async () => {
    render(<RadioButton {...propsBase} />)

    await act(async () => {
      await userEvent.click(screen.getByText(labelText))
    })

    expect(onSelectMock).toHaveBeenCalledWith(true)
  })

  describe('toggle his state', () => {
    it('select radioButton when radioButton is unselected', async () => {
      render(<RadioButton {...propsBase} isSelected={false} />)

      await act(async () => {
        await userEvent.click(screen.getByRole('radio'))
      })

      expect(onSelectMock).toHaveBeenCalledWith(true)
    })

    it('unselect radioButton when radioButton is selected', async () => {
      render(<RadioButton {...propsBase} isSelected />)

      await act(async () => {
        await userEvent.click(screen.getByRole('radio'))
      })

      expect(onSelectMock).toHaveBeenCalledWith(false)
    })
  })

  describe('when pressing space', () => {
    it("doesn't change the checked state when doesn't having the focus", async () => {
      render(<RadioButton {...propsBase} />)

      await userEvent.keyboard('[Space]')

      expect(onSelectMock).not.toHaveBeenCalled()
    })

    describe('when it has focus', () => {
      it('check the box when is unchecked', async () => {
        render(<RadioButton {...propsBase} isSelected={false} />)

        await act(async () => {
          await userEvent.tab()
        })

        await act(async () => {
          await userEvent.keyboard('[Space]')
        })

        expect(onSelectMock).toHaveBeenCalledWith(true)
      })

      it('uncheck the box and is checked', async () => {
        render(<RadioButton {...propsBase} isSelected />)

        await act(async () => {
          await userEvent.tab()
        })

        await act(async () => {
          await userEvent.keyboard('[Space]')
        })

        expect(onSelectMock).toHaveBeenCalledWith(false)
      })
    })
  })

  describe('have aria-checked attribute', () => {
    it('checked when RadioButton is checked', async () => {
      render(<RadioButton {...propsBase} isSelected />)

      expect(screen.getByRole('radio').getAttribute('aria-checked')).toBe('true')
    })

    it('not checked when RadioButton is unchecked', async () => {
      render(<RadioButton {...propsBase} isSelected={false} />)

      expect(screen.getByRole('radio').getAttribute('aria-checked')).toBe('false')
    })
  })
})
