/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { FunctionComponent, useCallback } from 'react'
import { Platform } from 'react-native'
import styled from 'styled-components/native'

import { useHandleFocus } from 'libs/hooks/useHandleFocus'
import { useHandleHover } from 'libs/hooks/useHandleHover'
import { accessibleRadioProps } from 'shared/accessibilityProps/accessibleRadioProps'
import { TouchableOpacity } from 'ui/components/TouchableOpacity'
import {
  getRadioState,
  getRadioColors,
  getRadioDisplay,
  getBorderHoverStyle,
} from 'ui/designSystem/RadioButton/helpers'
import {
  RadioLabelText,
  RadioLabelTextSelected,
  RadioDescriptionText,
} from 'ui/designSystem/RadioButton/styles/RadioButtonLabel.styles'
import {
  RadioOuterCircle,
  RadioInnerDot,
} from 'ui/designSystem/RadioButton/styles/RadioCircle.styles'
import type { RadioButtonProps, RadioState } from 'ui/designSystem/RadioButton/types'
import { SelectableAsset } from 'ui/designSystem/SelectableAsset'
import { SelectableSizing } from 'ui/designSystem/types'
import { useSpaceBarAction } from 'ui/hooks/useSpaceBarAction'
import { customFocusOutline } from 'ui/theme/customFocusOutline/customFocusOutline.web'

const isWeb = Platform.OS === 'web'

export const RadioButton: FunctionComponent<RadioButtonProps> = ({
  label,
  isSelected,
  onSelect,
  disabled,
  hasError,
  variant = 'default',
  sizing,
  collapsed,
  description,
  asset,
}) => {
  const effectiveSizing = getRadioDisplay({ variant, collapsed, sizing })

  const focusProps = useHandleFocus()
  const hoverProps = useHandleHover()
  const onToggle = useCallback(() => onSelect(!isSelected), [isSelected, onSelect])
  useSpaceBarAction(focusProps.isFocus ? onToggle : undefined)

  const radioState = getRadioState(isSelected, hasError, disabled)
  const Label = isSelected ? RadioLabelTextSelected : RadioLabelText
  const shouldDisplayCollapsed = variant === 'detailed' && collapsed && isSelected

  return (
    <RadioButtonContainer
      {...accessibleRadioProps({ checked: isSelected, label })}
      radioState={radioState}
      variant={variant}
      sizing={effectiveSizing}
      collapsed={collapsed}
      onPress={onToggle}
      {...focusProps}
      {...hoverProps}>
      <ContentContainer>
        <RadioOuterCircle radioState={radioState} variant={variant} {...hoverProps}>
          {isSelected ? (
            <RadioInnerDot radioState={radioState} variant={variant} {...hoverProps} />
          ) : null}
        </RadioOuterCircle>

        <RightBox>
          <Label radioState={radioState} {...hoverProps}>
            {label}
          </Label>
          {description ? (
            <RadioDescriptionText radioState={radioState} {...hoverProps}>
              {description}
            </RadioDescriptionText>
          ) : null}
        </RightBox>

        {asset ? (
          <BottomBox>
            <SelectableAsset {...asset} disable={disabled} />
          </BottomBox>
        ) : null}
      </ContentContainer>

      {shouldDisplayCollapsed ? <CollapsedContainer>{collapsed}</CollapsedContainer> : null}
    </RadioButtonContainer>
  )
}

type ContainerProps = {
  radioState: RadioState
  variant: 'default' | 'detailed'
  collapsed?: React.ReactNode
  sizing?: SelectableSizing
  isHover?: boolean
  isFocus?: boolean
}

const RadioButtonContainer = styled(TouchableOpacity)<ContainerProps>(({
  theme,
  radioState,
  variant,
  sizing,
  isFocus,
  isHover,
  collapsed,
}) => {
  const { borderColor, backgroundColor } = getRadioColors(radioState, theme, {
    componentPart: 'container',
    variant,
    collapsed: !!collapsed,
  })

  return {
    cursor: radioState === 'disabled' || radioState === 'disabledSelected' ? 'default' : 'pointer',
    width: sizing === 'fill' ? '100%' : undefined,
    alignSelf: sizing === 'hug' && isWeb ? 'flex-start' : undefined,
    ...(variant === 'detailed' && {
      backgroundColor,
      borderWidth: 1,
      borderColor,
      borderRadius: theme.designSystem.size.borderRadius.m,
      padding: theme.designSystem.size.spacing.l,
    }),
    ...customFocusOutline({ isFocus }),
    ...getBorderHoverStyle({ radioState, theme, isHover }),
  }
})

const ContentContainer = styled.View(({ theme }) => ({
  alignItems: 'center',
  flexDirection: 'row',
  columnGap: theme.designSystem.size.spacing.m,
}))

const RightBox = styled.View({ flex: 1 })

const BottomBox = styled.View({ justifyContent: 'center' })

const CollapsedContainer = styled.View(({ theme }) => ({
  marginTop: theme.designSystem.size.spacing.l,
}))
