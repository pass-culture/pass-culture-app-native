/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import { DefaultTheme } from 'styled-components'

import { theme } from 'theme'
import {
  getLabelColor,
  getRadioColors,
  GetRadioColorsOptions,
} from 'ui/designSystem/RadioButton/helpers/colors'

const mockedState = {
  selected: false,
  error: false,
  disabled: false,
}
const mockTheme: DefaultTheme = {
  ...theme,
  showTabBar: true,
  designSystem: {
    ...theme.designSystem,
  },
}

const mockRadioColorOptions: GetRadioColorsOptions = {
  componentPart: 'container',
  variant: 'default',
  collapsed: false,
}

describe('getRadioColors', () => {
  describe('component container', () => {
    describe('no options', () => {
      it('should return border and background colors when default', () => {
        const colors = getRadioColors(mockedState, mockTheme)

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.default,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.brandPrimarySelected,
        })
      })

      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected and disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
            disabled: true,
          },
          mockTheme
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })

      it('should return border and background colors when error', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            error: true,
          },
          mockTheme
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.error,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })
    })

    describe('variant detailed', () => {
      it('should return border and background colors when default', () => {
        const colors = getRadioColors(mockedState, mockTheme, {
          ...mockRadioColorOptions,
          variant: 'detailed',
        })

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.default,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.brandPrimarySelected,
        })
      })

      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })

      it('should return border and background colors when selected and disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })

      it('should return border and background colors when error', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            error: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.error,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })
    })

    describe('collapsed', () => {
      it('should return border and background colors when selected and default', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
            collapsed: true,
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected and detailed', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            variant: 'detailed',
            collapsed: true,
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })
    })
  })

  describe('component part circle', () => {
    it('should return border and background colors when default', () => {
      const colors = getRadioColors(mockedState, mockTheme, {
        ...mockRadioColorOptions,
        componentPart: 'circle',
      })

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.default,
        backgroundColor: theme.designSystem.color.background.default,
      })
    })

    it('should return border and background colors when selected', () => {
      const colors = getRadioColors(
        {
          ...mockedState,
          selected: true,
        },
        mockTheme,
        {
          ...mockRadioColorOptions,
          componentPart: 'circle',
        }
      )

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.brandPrimary,
        backgroundColor: theme.designSystem.color.background.default,
      })
    })

    it('should return border and background colors when error', () => {
      const colors = getRadioColors(
        {
          ...mockedState,
          error: true,
        },
        mockTheme,
        {
          ...mockRadioColorOptions,
          componentPart: 'circle',
        }
      )

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.error,
        backgroundColor: theme.designSystem.color.background.default,
      })
    })

    describe('variant default', () => {
      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'circle',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected and disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'circle',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })
    })

    describe('variant detailed', () => {
      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'circle',
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })

      it('should return border and background colors when selected', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'circle',
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.brandPrimarySelected,
        })
      })

      describe('collapsed', () => {
        it('should return border and background colors when selected', () => {
          const colors = getRadioColors(
            {
              ...mockedState,
              selected: true,
            },
            mockTheme,
            {
              componentPart: 'circle',
              variant: 'detailed',
              collapsed: true,
            }
          )

          expect(colors).toEqual({
            borderColor: theme.designSystem.color.border.brandPrimary,
            backgroundColor: theme.designSystem.color.background.brandPrimarySelected,
          })
        })
      })
    })
  })

  describe('component part round', () => {
    it('should return border and background colors when default', () => {
      const colors = getRadioColors(mockedState, mockTheme, {
        ...mockRadioColorOptions,
        componentPart: 'round',
      })

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.default,
        backgroundColor: theme.designSystem.color.background.default,
      })
    })

    it('should return border and background colors when selected', () => {
      const colors = getRadioColors(
        {
          ...mockedState,
          selected: true,
        },
        mockTheme,
        {
          ...mockRadioColorOptions,
          componentPart: 'round',
        }
      )

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.brandPrimary,
        backgroundColor: theme.designSystem.color.background.brandPrimary,
      })
    })

    it('should return border and background colors when error', () => {
      const colors = getRadioColors(
        {
          ...mockedState,
          error: true,
        },
        mockTheme,
        {
          ...mockRadioColorOptions,
          componentPart: 'round',
        }
      )

      expect(colors).toEqual({
        borderColor: theme.designSystem.color.border.error,
        backgroundColor: theme.designSystem.color.background.default,
      })
    })

    describe('variant default', () => {
      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'round',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.default,
        })
      })

      it('should return border and background colors when selected and disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'round',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.icon.disabled,
        })
      })
    })

    describe('variant detailed', () => {
      it('should return border and background colors when disabled', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            disabled: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'round',
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.disabled,
          backgroundColor: theme.designSystem.color.background.disabled,
        })
      })

      it('should return border and background colors when selected', () => {
        const colors = getRadioColors(
          {
            ...mockedState,
            selected: true,
          },
          mockTheme,
          {
            ...mockRadioColorOptions,
            componentPart: 'round',
            variant: 'detailed',
          }
        )

        expect(colors).toEqual({
          borderColor: theme.designSystem.color.border.brandPrimary,
          backgroundColor: theme.designSystem.color.background.brandPrimary,
        })
      })

      describe('collapsed', () => {
        it('should return border and background colors when selected', () => {
          const colors = getRadioColors(
            {
              ...mockedState,
              selected: true,
            },
            mockTheme,
            {
              componentPart: 'round',
              variant: 'detailed',
              collapsed: true,
            }
          )

          expect(colors).toEqual({
            borderColor: theme.designSystem.color.border.brandPrimary,
            backgroundColor: theme.designSystem.color.background.brandPrimary,
          })
        })
      })
    })
  })
})

describe('getLabelColor', () => {
  it('should return expected label color when disabled', () => {
    const color = getLabelColor({
      disabled: true,
      theme: mockTheme,
    })

    expect(color).toEqual(theme.designSystem.color.text.disabled)
  })

  it('should return expected label color when enabled', () => {
    const color = getLabelColor({
      disabled: false,
      theme: mockTheme,
    })

    expect(color).toEqual(theme.designSystem.color.text.default)
  })
})
