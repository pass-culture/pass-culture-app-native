/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import { DefaultTheme } from 'styled-components'

import { BackgroundColorKey } from 'theme/types'
import { isDisabledState } from 'ui/designSystem/RadioButton/helpers'

import { RadioPart, RadioState, RadioVariant } from '../types'

type RadioBackgroundParams = {
  componentPart: RadioPart
  variant: RadioVariant
  collapsed: boolean
}

type CollapsedKey = 'open' | 'collapsed'

const getCollapsedKey = (part: RadioPart, collapsed: boolean): CollapsedKey =>
  part === 'container' && collapsed ? 'collapsed' : 'open'

const selectedBackgroundTokenByPart: Record<
  RadioPart,
  Record<RadioVariant, Record<CollapsedKey, BackgroundColorKey>>
> = {
  round: {
    default: { open: 'brandPrimary', collapsed: 'brandPrimary' },
    detailed: { open: 'brandPrimary', collapsed: 'brandPrimary' },
  },
  container: {
    default: { open: 'brandPrimarySelected', collapsed: 'default' },
    detailed: { open: 'brandPrimarySelected', collapsed: 'default' },
  },
  circle: {
    default: { open: 'default', collapsed: 'default' },
    detailed: { open: 'brandPrimarySelected', collapsed: 'brandPrimarySelected' },
  },
} as const

function backgroundColorForSelected(theme: DefaultTheme, params: RadioBackgroundParams): string {
  const { color } = theme.designSystem
  const collapsedKey = getCollapsedKey(params.componentPart, params.collapsed)
  const token = selectedBackgroundTokenByPart[params.componentPart][params.variant][collapsedKey]
  return color.background[token]
}

function backgroundColorForDisabledSelected(
  theme: DefaultTheme,
  params: RadioBackgroundParams
): string {
  if (params.componentPart === 'round') return theme.designSystem.color.icon.disabled
  return theme.designSystem.color.background.disabled
}

function backgroundColorForDisabled(theme: DefaultTheme, params: RadioBackgroundParams): string {
  return params.variant === 'detailed'
    ? theme.designSystem.color.background.disabled
    : theme.designSystem.color.background.default
}

function backgroundColorDefault(theme: DefaultTheme): string {
  return theme.designSystem.color.background.default
}

const backgroundColorByState: Record<
  RadioState,
  (theme: DefaultTheme, params: RadioBackgroundParams) => string
> = {
  selected: backgroundColorForSelected,
  disabledSelected: backgroundColorForDisabledSelected,
  disabled: backgroundColorForDisabled,
  error: backgroundColorDefault,
  default: backgroundColorDefault,
}

function getRadioBorderColor(state: RadioState, theme: DefaultTheme) {
  const { color } = theme.designSystem
  const tokenByState = {
    selected: 'brandPrimary',
    disabledSelected: 'disabled',
    disabled: 'disabled',
    error: 'error',
    default: 'default',
  } as const

  return color.border[tokenByState[state]]
}

type GetRadioColorsOptions = {
  componentPart?: RadioPart
  variant?: RadioVariant
  collapsed?: boolean
}

export function getRadioColors(
  state: RadioState,
  theme: DefaultTheme,
  options?: GetRadioColorsOptions
) {
  const params: RadioBackgroundParams = {
    componentPart: options?.componentPart ?? 'container',
    variant: options?.variant ?? 'default',
    collapsed: options?.collapsed ?? false,
  }

  const borderColor = getRadioBorderColor(state, theme)
  const backgroundColor = backgroundColorByState[state](theme, params)

  return { borderColor, backgroundColor }
}

export function getLabelColor({
  radioState,
  theme,
}: {
  radioState: RadioState
  theme: DefaultTheme
}) {
  return isDisabledState(radioState)
    ? theme.designSystem.color.text.disabled
    : theme.designSystem.color.text.default
}
