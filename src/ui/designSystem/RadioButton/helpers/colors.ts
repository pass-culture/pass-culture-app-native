/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import { DefaultTheme } from 'styled-components'

import { BackgroundColorKey } from 'theme/types'
import { SelectableVariant } from 'ui/designSystem/types'

import { RadioPart, RadioStateObject } from '../types'

type RadioBackgroundParams = {
  componentPart: RadioPart
  variant: SelectableVariant
  collapsed: boolean
}

type CollapsedKey = 'open' | 'collapsed'

export const getCollapsedKey = (part: RadioPart, collapsed: boolean): CollapsedKey =>
  part === 'container' && collapsed ? 'collapsed' : 'open'

const selectedBackgroundTokenByPart: Record<
  RadioPart,
  Record<SelectableVariant, Record<CollapsedKey, BackgroundColorKey>>
> = {
  round: {
    default: { open: 'brandPrimary', collapsed: 'brandPrimary' },
    detailed: { open: 'brandPrimary', collapsed: 'brandPrimary' },
  },
  container: {
    default: { open: 'brandPrimarySelected', collapsed: 'default' },
    detailed: { open: 'brandPrimarySelected', collapsed: 'default' },
  },
  circle: {
    default: { open: 'default', collapsed: 'default' },
    detailed: { open: 'brandPrimarySelected', collapsed: 'brandPrimarySelected' },
  },
}

export const backgroundColorForSelected = (
  theme: DefaultTheme,
  params: RadioBackgroundParams
): string => {
  const collapsedKey = getCollapsedKey(params.componentPart, params.collapsed)
  const token = selectedBackgroundTokenByPart[params.componentPart][params.variant][collapsedKey]
  return theme.designSystem.color.background[token]
}

export const backgroundColorForDisabledSelected = (
  theme: DefaultTheme,
  params: RadioBackgroundParams
): string =>
  params.componentPart === 'round'
    ? theme.designSystem.color.icon.disabled
    : theme.designSystem.color.background.disabled

export const backgroundColorForDisabled = (
  theme: DefaultTheme,
  params: RadioBackgroundParams
): string => {
  return params.variant === 'detailed'
    ? theme.designSystem.color.background.disabled
    : theme.designSystem.color.background.default
}

export const getRadioBorderColor = (state: RadioStateObject, theme: DefaultTheme) => {
  if (state.disabled) return theme.designSystem.color.border.disabled
  if (state.error) return theme.designSystem.color.border.error
  return state.selected
    ? theme.designSystem.color.border.brandPrimary
    : theme.designSystem.color.border.default
}

export const getBackgroundColor = (state: RadioStateObject) => {
  if (state.disabled) {
    return state.selected ? backgroundColorForDisabledSelected : backgroundColorForDisabled
  }
  if (state.selected) return backgroundColorForSelected
  if (state.error)
    return (theme: DefaultTheme): string => theme.designSystem.color.background.default
  return (theme: DefaultTheme): string => theme.designSystem.color.background.default
}

export type GetRadioColorsOptions = {
  componentPart?: RadioPart
  variant?: SelectableVariant
  collapsed?: boolean
}

export const getRadioColors = (
  state: RadioStateObject,
  theme: DefaultTheme,
  options?: GetRadioColorsOptions
) => {
  const params: RadioBackgroundParams = {
    componentPart: options?.componentPart ?? 'container',
    variant: options?.variant ?? 'default',
    collapsed: options?.collapsed ?? false,
  }

  return {
    borderColor: getRadioBorderColor(state, theme),
    backgroundColor: getBackgroundColor(state)(theme, params),
  }
}
export const getLabelColor = ({ disabled, theme }: { disabled: boolean; theme: DefaultTheme }) =>
  disabled ? theme.designSystem.color.text.disabled : theme.designSystem.color.text.default
