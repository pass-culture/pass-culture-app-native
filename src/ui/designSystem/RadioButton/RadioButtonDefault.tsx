/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { useCallback } from 'react'
import { Platform } from 'react-native'
import styled from 'styled-components/native'

import { useHandleHover } from 'libs/hooks/useHandleHover'
import { accessibleRadioProps } from 'shared/accessibilityProps/accessibleRadioProps'
import { TouchableOpacity } from 'ui/components/TouchableOpacity'
import { getBorderHoverStyle } from 'ui/designSystem/RadioButton/helpers'
import {
  RadioLabelText,
  RadioLabelTextSelected,
} from 'ui/designSystem/RadioButton/styles/RadioButtonLabel.styles'
import {
  RadioInnerDot,
  RadioOuterCircle,
} from 'ui/designSystem/RadioButton/styles/RadioCircle.styles'
import { DefaultRadioProps, RadioStateObject, Variant } from 'ui/designSystem/RadioButton/types'
import { SelectableSizing } from 'ui/designSystem/types'
import { customFocusOutline } from 'ui/theme/customFocusOutline/customFocusOutline'

export const RadioButtonDefault = ({
  label,
  disabled,
  error,
  value,
  sizing,
  setValue,
}: DefaultRadioProps) => {
  const selected = value === label
  const hoverProps = useHandleHover()
  const onToggle = useCallback(() => {
    setValue(selected ? '' : label)
  }, [selected, label, setValue])
  const radioState = {
    selected: error ? false : selected,
    error: error ?? false,
    disabled: disabled ?? false,
  }

  return (
    <RadioButtonDefaultContainer
      radioState={radioState}
      sizing={sizing}
      onPress={onToggle}
      {...hoverProps}
      {...accessibleRadioProps({ checked: selected, label })}>
      <ContentContainer>
        <RadioCircle radioState={radioState} variant="default" hoverProps={hoverProps} />
        <RightBox radioState={radioState} label={label} hoverProps={hoverProps} />
      </ContentContainer>
    </RadioButtonDefaultContainer>
  )
}

type HoverProps = {
  onMouseEnter: () => void
  onMouseLeave: () => void
  isHover: boolean
}

type RadioCircleProps = {
  hoverProps: HoverProps
  radioState: RadioStateObject
  variant: Variant
}

export const RadioCircle = ({ radioState, hoverProps, variant }: RadioCircleProps) => (
  <RadioOuterCircle radioState={radioState} variant={variant} {...hoverProps}>
    {radioState.selected ? (
      <RadioInnerDot radioState={radioState} variant={variant} {...hoverProps} />
    ) : null}
  </RadioOuterCircle>
)

type RightBoxProps = {
  hoverProps: HoverProps
  radioState: RadioStateObject
  label: string
  children?: React.JSX.Element | null
}

export const RightBox = ({ radioState, label, hoverProps, children }: RightBoxProps) => {
  const Label = radioState.selected ? RadioLabelTextSelected : RadioLabelText
  return (
    <RightBoxContainer>
      <Label radioState={radioState} {...hoverProps}>
        {label}
      </Label>
      {children}
    </RightBoxContainer>
  )
}

export const ContentContainer = styled.View(({ theme }) => ({
  alignItems: 'center',
  flexDirection: 'row',
  columnGap: theme.designSystem.size.spacing.m,
}))

const RightBoxContainer = styled.View({ flex: 1 })

type ContainerProps = {
  radioState: RadioStateObject
  sizing?: SelectableSizing
  isHover?: boolean
  isFocus?: boolean
}

const isWeb = Platform.OS === 'web'

export const RadioButtonDefaultContainer = styled(TouchableOpacity)<ContainerProps>(
  ({ theme, radioState, sizing, isFocus, isHover }) => ({
    cursor: radioState.disabled ? 'default' : 'pointer',
    width: sizing === 'fill' ? '100%' : undefined,
    alignSelf: sizing === 'hug' && isWeb ? 'flex-start' : undefined,
    ...customFocusOutline({ isFocus }),
    ...getBorderHoverStyle({ radioState, theme, isHover }),
  })
)
