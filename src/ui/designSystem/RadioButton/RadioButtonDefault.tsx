/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React from 'react'
import { Platform } from 'react-native'
import styled from 'styled-components/native'

import { useHandleHover } from 'libs/hooks/useHandleHover'
import { accessibleRadioProps } from 'shared/accessibilityProps/accessibleRadioProps'
import { TouchableOpacity } from 'ui/components/TouchableOpacity'
import { getBorderHoverStyle } from 'ui/designSystem/RadioButton/helpers'
import {
  RadioLabelText,
  RadioLabelTextSelected,
} from 'ui/designSystem/RadioButton/styles/RadioButtonLabel.styles'
import {
  RadioInnerDot,
  RadioOuterCircle,
} from 'ui/designSystem/RadioButton/styles/RadioCircle.styles'
import { SelectableSizing } from 'ui/designSystem/types'
import { customFocusOutline } from 'ui/theme/customFocusOutline/customFocusOutline'

type RadioButtonDefaultProps = {
  label: string
  disabled: boolean
  error: boolean
  value: string | null
  setValue(value: string): void
  sizing: SelectableSizing
}

export type RadioStateObject = {
  isSelected: boolean
  error: boolean
  disabled: boolean
}

export const RadioButtonDefault = ({
  label,
  disabled,
  error,
  value,
  sizing,
}: RadioButtonDefaultProps) => {
  const isSelected = value === label
  const Label = isSelected ? RadioLabelTextSelected : RadioLabelText
  const hoverProps = useHandleHover()
  const radioState = {
    isSelected,
    error,
    disabled,
  }

  return (
    <RadioButtonContainer
      radioState={radioState}
      sizing={sizing}
      {...hoverProps}
      {...accessibleRadioProps({ checked: isSelected, label })}>
      <ContentContainer>
        <RadioOuterCircle radioState={radioState} variant="default" {...hoverProps}>
          {isSelected ? (
            <RadioInnerDot radioState={radioState} variant="default" {...hoverProps} />
          ) : null}
        </RadioOuterCircle>
        <RightBox>
          <Label radioState={radioState} {...hoverProps}>
            {label}
          </Label>
        </RightBox>
      </ContentContainer>
    </RadioButtonContainer>
  )
}

const ContentContainer = styled.View(({ theme }) => ({
  alignItems: 'center',
  flexDirection: 'row',
  columnGap: theme.designSystem.size.spacing.m,
}))

const RightBox = styled.View({ flex: 1 })

type ContainerProps = {
  radioState: RadioStateObject
  sizing?: SelectableSizing
  isHover?: boolean
  isFocus?: boolean
}

const isWeb = Platform.OS === 'web'

const RadioButtonContainer = styled(TouchableOpacity)<ContainerProps>(({
  theme,
  radioState,
  sizing,
  isFocus,
  isHover,
}) => {
  return {
    cursor: radioState.disabled ? 'default' : 'pointer',
    width: sizing === 'fill' ? '100%' : undefined,
    alignSelf: sizing === 'hug' && isWeb ? 'flex-start' : undefined,
    ...customFocusOutline({ isFocus }),
    ...getBorderHoverStyle({ radioState, theme, isHover }),
  }
})
