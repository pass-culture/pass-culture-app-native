/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import { computedTheme } from 'tests/computedTheme'
import { theme } from 'theme'

import { getRadioButtonColors } from './getRadioButtonColors'

describe('getRadioButtonColors', () => {
  it('should return correct colors for container when selected state', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: false, error: false, default: false },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result).toEqual({
      borderColor: theme.designSystem.color.border.brandPrimary,
      backgroundColor: theme.designSystem.color.background.brandPrimarySelected,
    })
  })

  it('should return correct colors for the round of selection when selected state', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: false, error: false, default: false },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
      componentType: 'round',
    })

    expect(result).toEqual({
      borderColor: theme.designSystem.color.border.brandPrimary,
      backgroundColor: theme.designSystem.color.background.brandPrimary,
    })
  })

  it('should return default background when collapsed', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: false, error: false, default: false },
      variant: 'default',
      collapsed: true,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.default)
  })

  it('should return disabled background when disabled and variant is detailed', () => {
    const result = getRadioButtonColors({
      state: { selected: false, disabled: true, error: false, default: false },
      variant: 'detailed',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.disabled)
  })

  it('should return disabled icon for the round of selection when selected and disabled', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: true, error: false, default: false },
      variant: 'detailed',
      collapsed: false,
      theme: computedTheme,
      componentType: 'round',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.icon.disabled)
  })

  it('should return default background when disabled and variant is not detailed)', () => {
    const result = getRadioButtonColors({
      state: { selected: false, disabled: true, error: false, default: false },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.default)
  })

  it('should return error border color when error state', () => {
    const result = getRadioButtonColors({
      state: { selected: false, disabled: false, error: true, default: false },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result.borderColor).toBe(theme.designSystem.color.border.error)
  })

  it('should return default border and background when default state', () => {
    const result = getRadioButtonColors({
      state: { selected: false, disabled: false, error: false, default: true },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result).toEqual({
      borderColor: theme.designSystem.color.border.default,
      backgroundColor: theme.designSystem.color.background.default,
    })
  })

  it('should return default background when componentType is undefined', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: false, error: false, default: false },
      variant: 'default',
      collapsed: false,
      theme: computedTheme,
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.default)
  })

  it('should return disabled background when selected and disabled with detailed variant', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: true, error: false, default: false },
      variant: 'detailed',
      collapsed: false,
      theme: computedTheme,
      componentType: 'container',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.disabled)
  })

  it('should return brandPrimarySelected background when componentType is circle and variant is detailed', () => {
    const result = getRadioButtonColors({
      state: { selected: true, disabled: false, error: false, default: false },
      variant: 'detailed',
      collapsed: false,
      theme: computedTheme,
      componentType: 'circle',
    })

    expect(result.backgroundColor).toBe(theme.designSystem.color.background.brandPrimarySelected)
  })
})
