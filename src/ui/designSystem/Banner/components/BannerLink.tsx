/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { FunctionComponent } from 'react'
import styled, { useTheme } from 'styled-components/native'

import { AccessibilityRole } from 'libs/accessibilityRole/accessibilityRole'
import { getComputedAccessibilityLabel } from 'shared/accessibility/getComputedAccessibilityLabel'
import { AppButtonEventNative } from 'ui/components/buttons/AppButton/types'
import { AccessibleIcon } from 'ui/svg/icons/types'
import { Typo } from 'ui/theme'

type ButtonTextWithIconProps = {
  wording: string
  icon: FunctionComponent<AccessibleIcon>
  onPress?: AppButtonEventNative
  onLongPress?: AppButtonEventNative
  accessibilityLabel?: string
  accessibilityRole?: AccessibilityRole
}

export function BannerLink({
  wording,
  icon: Icon,
  onPress,
  onLongPress,
  accessibilityLabel,
  accessibilityRole = AccessibilityRole.BUTTON,
}: ButtonTextWithIconProps) {
  const { icons } = useTheme()

  const accessibilityLabelLink = accessibilityRole === AccessibilityRole.LINK ? 'Lien externe' : ''
  const accessibilityWording = accessibilityLabel ?? wording
  const computedAccessibilityLabel = getComputedAccessibilityLabel(
    accessibilityLabelLink,
    accessibilityWording
  )

  return (
    <InlineTouchable
      accessibilityRole={accessibilityRole}
      accessibilityLabel={computedAccessibilityLabel}
      onPress={onPress}
      onLongPress={onLongPress}>
      <IconWrapper>
        <Icon size={icons.sizes.extraSmall} />
      </IconWrapper>
      <Typo.BodyAccentXs>{wording}</Typo.BodyAccentXs>
    </InlineTouchable>
  )
}

const InlineTouchable = styled.TouchableOpacity({
  flexDirection: 'row',
  alignItems: 'flex-start',
  cursor: 'pointer',
})

const IconWrapper = styled.View(({ theme }) => ({
  marginRight: theme.designSystem.size.spacing.s,
  marginTop: theme.designSystem.size.spacing.xxs,
}))
