/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { FunctionComponent } from 'react'
import styled, { useTheme } from 'styled-components/native'

import { AccessibilityRole } from 'libs/accessibilityRole/accessibilityRole'
import { getComputedAccessibilityLabel } from 'shared/accessibility/getComputedAccessibilityLabel'
import { ColorsType } from 'theme/types'
import { styledButton } from 'ui/components/buttons/styledButton'
import { ImageTile } from 'ui/components/ImageTile'
import { Touchable } from 'ui/components/touchable/Touchable'
import { ExternalTouchableLink } from 'ui/components/touchableLink/ExternalTouchableLink'
import { InternalTouchableLink } from 'ui/components/touchableLink/InternalTouchableLink'
import {
  ExternalNavigationProps,
  ExternalTouchableLinkProps,
  InternalNavigationProps,
  InternalTouchableLinkProps,
} from 'ui/components/touchableLink/types'
import { ViewGap } from 'ui/components/ViewGap/ViewGap'
import { BannerLink } from 'ui/designSystem/Banner/components/BannerLink'
import { BannerType } from 'ui/designSystem/Banner/enums'
import { getBannerColors } from 'ui/designSystem/Banner/helpers/getBannerColors'
import { CloseFilled } from 'ui/svg/icons/CloseFilled'
import { ExternalSiteFilled } from 'ui/svg/icons/ExternalSiteFilled'
import { InfoPlain } from 'ui/svg/icons/InfoPlain'
import { PlainArrowNext } from 'ui/svg/icons/PlainArrowNext'
import { AccessibleIcon } from 'ui/svg/icons/types'
import { LENGTH_XXS, LENGTH_XS, LENGTH_S, LENGTH_M, LENGTH_L, Typo } from 'ui/theme'
import { customFocusOutline } from 'ui/theme/customFocusOutline/customFocusOutline'
import { getHoverStyle } from 'ui/theme/getHoverStyle/getHoverStyle'

type BannerLink = InternalTouchableLinkProps | ExternalTouchableLinkProps

type BannerImageSize =
  | typeof LENGTH_XXS
  | typeof LENGTH_XS
  | typeof LENGTH_S
  | typeof LENGTH_M
  | typeof LENGTH_L

type BannerImage = {
  uri: string
  size?: BannerImageSize
}

type TouchableProps =
  | {
      onPress: () => void
      onBeforeNavigate?: never
      navigateTo?: never
      externalNav?: never
    }
  | {
      navigateTo: InternalNavigationProps['navigateTo']
      onBeforeNavigate?: () => void
      onPress?: never
      externalNav?: never
    }
  | {
      externalNav: ExternalNavigationProps['externalNav']
      onBeforeNavigate?: () => void
      onPress?: never
      navigateTo?: never
    }
  | {
      externalNav?: never
      onBeforeNavigate?: never
      onPress?: never
      navigateTo?: never
    }

type Props = {
  label: string
  Icon?: FunctionComponent<AccessibleIcon>
  type?: BannerType
  description?: string
  image?: BannerImage
  onClose?: () => void
  links?: BannerLink[]
} & TouchableProps

const DEFAULT_ITEM_HEIGHT = LENGTH_XXS
const IMAGE_RATIO = 3 / 2

export const Banner: FunctionComponent<Props> = ({
  label,
  Icon,
  type = BannerType.DEFAULT,
  description,
  image,
  onClose,
  links = [],
  ...touchableProps
}) => {
  const theme = useTheme()
  const { background, iconColor } = getBannerColors(theme, type)

  const hasLinks = links.length > 0

  const isNavigateTo = 'navigateTo' in touchableProps
  const isExternalNav = 'externalNav' in touchableProps
  const isOnPress = 'onPress' in touchableProps
  const isTouchable = isNavigateTo || isExternalNav || isOnPress

  let TextContainerButton: React.ComponentType<
    | React.ComponentProps<typeof StyledInternalTouchableLink>
    | React.ComponentProps<typeof StyledExternalTouchableLink>
    | React.ComponentProps<typeof StyledTouchableOpacity>
  >

  if (isNavigateTo) TextContainerButton = StyledInternalTouchableLink
  else if (isExternalNav) TextContainerButton = StyledExternalTouchableLink
  else if (isOnPress) TextContainerButton = StyledTouchableOpacity
  else TextContainerButton = TextContainerView

  // If has links we disable banner navigateTo / externalNav / onPress
  const TextContainer: React.ElementType = hasLinks ? TextContainerView : TextContainerButton

  const isNonInteractive = hasLinks || !isTouchable
  const defaultAccessibilityRole = isExternalNav ? AccessibilityRole.LINK : AccessibilityRole.BUTTON
  const accessibilityRole = isNonInteractive ? AccessibilityRole.NONE : defaultAccessibilityRole

  const accessibilityPrefix = isExternalNav ? 'Lien externe' : ''
  const accessibilityLabel = getComputedAccessibilityLabel(accessibilityPrefix, label, description)

  return (
    <Container background={background}>
      {Icon ? (
        <Icon color={iconColor} size={theme.icons.sizes.small} />
      ) : (
        <InfoPlain color={iconColor} size={theme.icons.sizes.small} />
      )}
      <TextContainer
        {...touchableProps}
        accessibilityRole={accessibilityRole}
        accessibilityLabel={accessibilityLabel}>
        <Typo.BodyAccentS>{label}</Typo.BodyAccentS>
        {description ? <Typo.BodyS>{description}</Typo.BodyS> : null}
        {hasLinks ? (
          <LinksContainer gap={3}>
            {links.map((link) => {
              if (link.wording) {
                if (link.navigateTo) {
                  return (
                    <InternalTouchableLink
                      key={link.wording.toString()}
                      as={BannerLink}
                      wording={link.wording}
                      icon={link.icon ?? PlainArrowNext}
                      navigateTo={link.navigateTo}
                      accessibilityRole={AccessibilityRole.BUTTON}
                    />
                  )
                }
                if (link.externalNav) {
                  return (
                    <ExternalTouchableLink
                      key={link.wording.toString()}
                      as={BannerLink}
                      wording={link.wording}
                      icon={link.icon ?? ExternalSiteFilled}
                      externalNav={link.externalNav}
                      accessibilityRole={AccessibilityRole.LINK}
                    />
                  )
                }
              }
              return null
            })}
          </LinksContainer>
        ) : null}
      </TextContainer>
      {image ? (
        <ImageTile
          uri={image.uri}
          height={image.size ?? DEFAULT_ITEM_HEIGHT}
          width={(image.size ?? DEFAULT_ITEM_HEIGHT) / IMAGE_RATIO}
        />
      ) : null}
      {onClose ? (
        <Touchable accessibilityLabel="Fermer la bannière" onPress={onClose}>
          <CloseFilled size={theme.icons.sizes.small} />
        </Touchable>
      ) : null}
    </Container>
  )
}

const Container = styled.View<{ background: string }>(({ theme, background }) => ({
  backgroundColor: background,
  flexDirection: 'row',
  alignItems: 'flex-start',
  padding: theme.designSystem.size.spacing.l,
  borderRadius: theme.designSystem.size.borderRadius.m,
  gap: theme.designSystem.size.spacing.m,
}))

const TextContainerView = styled.View(({ theme }) => ({
  flex: 1,
  gap: theme.designSystem.size.spacing.m,
}))

const StyledInternalTouchableLink = styled(InternalTouchableLink).attrs<{
  color: ColorsType
}>(({ color }) => ({
  hoverUnderlineColor: color,
}))<{ isFocus: boolean; color: ColorsType }>(({ theme, isFocus, color }) => ({
  flex: 1,
  gap: theme.designSystem.size.spacing.m,
  borderRadius: theme.designSystem.size.borderRadius.m,
  ...customFocusOutline({ isFocus, color }),
}))

const StyledExternalTouchableLink = styled(ExternalTouchableLink).attrs<{
  color: ColorsType
}>(({ color }) => ({
  hoverUnderlineColor: color,
}))<{ isFocus: boolean; color: ColorsType }>(({ theme, isFocus, color }) => ({
  flex: 1,
  gap: theme.designSystem.size.spacing.m,
  borderRadius: theme.designSystem.size.borderRadius.m,
  ...customFocusOutline({ isFocus, color }),
}))

const StyledTouchableOpacity = styledButton(Touchable)<{
  color: ColorsType
}>(({ theme, color }) => ({
  flex: 1,
  gap: theme.designSystem.size.spacing.m,
  borderRadius: theme.designSystem.size.borderRadius.m,
  ...customFocusOutline({ color }),
  ...getHoverStyle({ underlineColor: color }),
}))

const LinksContainer = styled(ViewGap)({
  alignItems: 'flex-start',
})
