/**
 ⚠️ Design System — Protected file
 Do not edit this file without prior approval from the Design System team.
 */

import React, { FunctionComponent } from 'react'
import styled, { useTheme } from 'styled-components/native'

import { AccessibilityRole } from 'libs/accessibilityRole/accessibilityRole'
import { ImageTile } from 'ui/components/ImageTile'
import { Touchable } from 'ui/components/touchable/Touchable'
import { ExternalTouchableLink } from 'ui/components/touchableLink/ExternalTouchableLink'
import { InternalTouchableLink } from 'ui/components/touchableLink/InternalTouchableLink'
import {
  ExternalTouchableLinkProps,
  InternalTouchableLinkProps,
} from 'ui/components/touchableLink/types'
import { ViewGap } from 'ui/components/ViewGap/ViewGap'
import { BannerLink } from 'ui/designSystem/Banner/components/BannerLink'
import { BannerType } from 'ui/designSystem/Banner/enums'
import { getBannerColors } from 'ui/designSystem/Banner/helpers/getBannerColors'
import { CloseFilled } from 'ui/svg/icons/CloseFilled'
import { ExternalSiteFilled } from 'ui/svg/icons/ExternalSiteFilled'
import { InfoPlain } from 'ui/svg/icons/InfoPlain'
import { PlainArrowNext } from 'ui/svg/icons/PlainArrowNext'
import { LENGTH_XXS, LENGTH_XS, LENGTH_S, LENGTH_M, LENGTH_L, Typo } from 'ui/theme'

type BannerLink = InternalTouchableLinkProps | ExternalTouchableLinkProps

type BannerImageSize =
  | typeof LENGTH_XXS
  | typeof LENGTH_XS
  | typeof LENGTH_S
  | typeof LENGTH_M
  | typeof LENGTH_L

type BannerImage = {
  uri: string
  size?: BannerImageSize
}

type Props = {
  label: string
  type?: BannerType
  description?: string
  image?: BannerImage
  onClose?: () => void
  links?: BannerLink[]
}

const DEFAULT_ITEM_HEIGHT = LENGTH_XXS
const IMAGE_RATIO = 3 / 2

export const Banner: FunctionComponent<Props> = ({
  label,
  type = BannerType.DEFAULT,
  description,
  image,
  onClose,
  links = [],
}) => {
  const theme = useTheme()
  const { background, iconColor } = getBannerColors(theme, type)

  return (
    <Container gap={4} background={background}>
      <InfoPlain color={iconColor} />
      <TextContainer>
        <Typo.BodyAccentS>{label}</Typo.BodyAccentS>
        {description ? <Typo.BodyS>{description}</Typo.BodyS> : null}
        {links.length > 0 ? (
          <LinksContainer gap={3}>
            {links.map((link, index) => {
              if (link.navigateTo) {
                return (
                  <InternalTouchableLink
                    key={index}
                    as={BannerLink}
                    wording={link.wording}
                    icon={link.icon ?? PlainArrowNext}
                    navigateTo={link.navigateTo}
                    accessibilityRole={AccessibilityRole.BUTTON}
                  />
                )
              }
              if (link.externalNav) {
                return (
                  <ExternalTouchableLink
                    key={index}
                    as={BannerLink}
                    wording={link.wording}
                    icon={link.icon ?? ExternalSiteFilled}
                    externalNav={link.externalNav}
                    accessibilityRole={AccessibilityRole.LINK}
                  />
                )
              }
              return null
            })}
          </LinksContainer>
        ) : null}
      </TextContainer>
      {image ? (
        <ImageTile
          uri={image.uri}
          height={image.size ?? DEFAULT_ITEM_HEIGHT}
          width={(image.size ?? DEFAULT_ITEM_HEIGHT) / IMAGE_RATIO}
        />
      ) : null}
      {onClose ? (
        <Touchable accessibilityLabel="Fermer la bannière" onPress={onClose}>
          <CloseFilled size={theme.icons.sizes.small} />
        </Touchable>
      ) : null}
    </Container>
  )
}

const Container = styled(ViewGap)<{ background: string }>(({ theme, background }) => ({
  backgroundColor: background,
  flexDirection: 'row',
  alignItems: 'flex-start',
  padding: theme.designSystem.size.spacing.l,
  borderRadius: theme.designSystem.size.borderRadius.m,
}))

const TextContainer = styled.View({
  flex: 1,
})

const LinksContainer = styled(ViewGap)(({ theme }) => ({
  alignItems: 'flex-start',
  marginTop: theme.designSystem.size.spacing.l,
}))
