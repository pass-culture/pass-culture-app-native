/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Service API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import url from "url";

import { getAuthenticationHeaders, handleGeneratedApiResponse, safeFetch } from "api/helpers";
import { EmptyResponse } from 'libs/fetch'

import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;
    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountRequest
 */
export interface AccountRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountRequest
     */
    birthdate: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRequest
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountRequest
     */
    marketingEmailSubscription?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof AccountRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRequest
     */
    token: string;
}/**
 * 
 * @export
 * @interface BookOfferRequest
 */
export interface BookOfferRequest {
    /**
     * 
     * @type {number}
     * @memberof BookOfferRequest
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof BookOfferRequest
     */
    stockId: string;
}/**
 * 
 * @export
 * @interface BookOfferResponse
 */
export interface BookOfferResponse {
    /**
     * 
     * @type {number}
     * @memberof BookOfferResponse
     */
    bookingId: number;
}/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum BookingCancellationReasons {
    OFFERER = 'OFFERER',
    BENEFICIARY = 'BENEFICIARY',
    EXPIRED = 'EXPIRED'
}/**
 * 
 * @export
 * @interface BookingOfferExtraData
 */
export interface BookingOfferExtraData {
    /**
     * 
     * @type {string}
     * @memberof BookingOfferExtraData
     */
    isbn?: string | null;
}/**
 * 
 * @export
 * @interface BookingOfferResponse
 */
export interface BookingOfferResponse {
    /**
     * 
     * @type {OfferCategoryResponse}
     * @memberof BookingOfferResponse
     */
    category: OfferCategoryResponse;
    /**
     * 
     * @type {BookingOfferExtraData}
     * @memberof BookingOfferResponse
     */
    extraData?: BookingOfferExtraData | null;
    /**
     * 
     * @type {number}
     * @memberof BookingOfferResponse
     */
    id: number;
    /**
     * 
     * @type {OfferImageResponse}
     * @memberof BookingOfferResponse
     */
    image?: OfferImageResponse | null;
    /**
     * 
     * @type {boolean}
     * @memberof BookingOfferResponse
     */
    isPermanent: boolean;
    /**
     * 
     * @type {string}
     * @memberof BookingOfferResponse
     */
    name: string;
    /**
     * 
     * @type {BookingVenueResponse}
     * @memberof BookingOfferResponse
     */
    venue: BookingVenueResponse;
    /**
     * 
     * @type {string}
     * @memberof BookingOfferResponse
     */
    withdrawalDetails?: string | null;
}/**
 * 
 * @export
 * @interface BookingReponse
 */
export interface BookingReponse {
    /**
     * 
     * @type {Date}
     * @memberof BookingReponse
     */
    cancellationDate?: Date | null;
    /**
     * 
     * @type {BookingCancellationReasons}
     * @memberof BookingReponse
     */
    cancellationReason?: BookingCancellationReasons | null;
    /**
     * 
     * @type {Date}
     * @memberof BookingReponse
     */
    confirmationDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof BookingReponse
     */
    dateUsed?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof BookingReponse
     */
    expirationDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof BookingReponse
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof BookingReponse
     */
    quantity: number;
    /**
     * 
     * @type {BookingStockResponse}
     * @memberof BookingReponse
     */
    stock: BookingStockResponse;
    /**
     * 
     * @type {string}
     * @memberof BookingReponse
     */
    token: string;
    /**
     * 
     * @type {number}
     * @memberof BookingReponse
     */
    totalAmount: number;
}/**
 * 
 * @export
 * @interface BookingStockResponse
 */
export interface BookingStockResponse {
    /**
     * 
     * @type {Date}
     * @memberof BookingStockResponse
     */
    beginningDatetime?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof BookingStockResponse
     */
    id: number;
    /**
     * 
     * @type {BookingOfferResponse}
     * @memberof BookingStockResponse
     */
    offer: BookingOfferResponse;
}/**
 * 
 * @export
 * @interface BookingVenueResponse
 */
export interface BookingVenueResponse {
    /**
     * 
     * @type {string}
     * @memberof BookingVenueResponse
     */
    city?: string | null;
    /**
     * 
     * @type {Coordinates}
     * @memberof BookingVenueResponse
     */
    coordinates: Coordinates;
    /**
     * 
     * @type {number}
     * @memberof BookingVenueResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BookingVenueResponse
     */
    name: string;
}/**
 * 
 * @export
 * @interface BookingsResponse
 */
export interface BookingsResponse {
    /**
     * 
     * @type {Array<BookingReponse>}
     * @memberof BookingsResponse
     */
    ended_bookings: Array<BookingReponse>;
    /**
     * 
     * @type {Array<BookingReponse>}
     * @memberof BookingsResponse
     */
    ongoing_bookings: Array<BookingReponse>;
}/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CategoryNameEnum {
    CINEMA = 'CINEMA',
    CONFERENCE = 'CONFERENCE',
    INSTRUMENT = 'INSTRUMENT',
    JEUXVIDEO = 'JEUX_VIDEO',
    FILM = 'FILM',
    LECON = 'LECON',
    LIVRE = 'LIVRE',
    MUSIQUE = 'MUSIQUE',
    PRESSE = 'PRESSE',
    SPECTACLE = 'SPECTACLE',
    VISITE = 'VISITE'
}/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum CategoryType {
    Event = 'Event',
    Thing = 'Thing'
}/**
 * 
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    currentPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordRequest
     */
    newPassword: string;
}/**
 * 
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    latitude?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    longitude?: number | null;
}/**
 * 
 * @export
 * @interface Credit
 */
export interface Credit {
    /**
     * 
     * @type {number}
     * @memberof Credit
     */
    initial: number;
    /**
     * 
     * @type {number}
     * @memberof Credit
     */
    remaining: number;
}/**
 * 
 * @export
 * @interface CulturalSurveyRequest
 */
export interface CulturalSurveyRequest {
    /**
     * 
     * @type {string}
     * @memberof CulturalSurveyRequest
     */
    culturalSurveyId?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CulturalSurveyRequest
     */
    needsToFillCulturalSurvey: boolean;
}/**
 * 
 * @export
 * @interface DomainsCredit
 */
export interface DomainsCredit {
    /**
     * 
     * @type {Credit}
     * @memberof DomainsCredit
     */
    all: Credit;
    /**
     * 
     * @type {Credit}
     * @memberof DomainsCredit
     */
    digital?: Credit | null;
    /**
     * 
     * @type {Credit}
     * @memberof DomainsCredit
     */
    physical?: Credit | null;
}/**
 * 
 * @export
 * @interface Expense
 */
export interface Expense {
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    current: number;
    /**
     * 
     * @type {ExpenseDomain}
     * @memberof Expense
     */
    domain: ExpenseDomain;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    limit: number;
}/**
 * An enumeration.
 * @export
 * @enum {string}
 */
export enum ExpenseDomain {
    All = 'all',
    Digital = 'digital',
    Physical = 'physical'
}/**
 * 
 * @export
 * @interface FavoriteCategoryResponse
 */
export interface FavoriteCategoryResponse {
    /**
     * 
     * @type {CategoryType}
     * @memberof FavoriteCategoryResponse
     */
    categoryType: CategoryType;
    /**
     * 
     * @type {string}
     * @memberof FavoriteCategoryResponse
     */
    label: string;
    /**
     * 
     * @type {CategoryNameEnum}
     * @memberof FavoriteCategoryResponse
     */
    name?: CategoryNameEnum | null;
}/**
 * 
 * @export
 * @interface FavoriteMediationResponse
 */
export interface FavoriteMediationResponse {
    /**
     * 
     * @type {string}
     * @memberof FavoriteMediationResponse
     */
    credit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FavoriteMediationResponse
     */
    url: string;
}/**
 * 
 * @export
 * @interface FavoriteOfferResponse
 */
export interface FavoriteOfferResponse {
    /**
     * 
     * @type {FavoriteCategoryResponse}
     * @memberof FavoriteOfferResponse
     */
    category: FavoriteCategoryResponse;
    /**
     * 
     * @type {Coordinates}
     * @memberof FavoriteOfferResponse
     */
    coordinates: Coordinates;
    /**
     * 
     * @type {Date}
     * @memberof FavoriteOfferResponse
     */
    date?: Date | null;
    /**
     * 
     * @type {Array<ExpenseDomain>}
     * @memberof FavoriteOfferResponse
     */
    expenseDomains: Array<ExpenseDomain>;
    /**
     * 
     * @type {string}
     * @memberof FavoriteOfferResponse
     */
    externalTicketOfficeUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FavoriteOfferResponse
     */
    id: number;
    /**
     * 
     * @type {FavoriteMediationResponse}
     * @memberof FavoriteOfferResponse
     */
    image?: FavoriteMediationResponse | null;
    /**
     * 
     * @type {boolean}
     * @memberof FavoriteOfferResponse
     */
    isExpired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FavoriteOfferResponse
     */
    isSoldOut?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FavoriteOfferResponse
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof FavoriteOfferResponse
     */
    price?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof FavoriteOfferResponse
     */
    startDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof FavoriteOfferResponse
     */
    startPrice?: number | null;
}/**
 * 
 * @export
 * @interface FavoriteRequest
 */
export interface FavoriteRequest {
    /**
     * 
     * @type {number}
     * @memberof FavoriteRequest
     */
    offerId: number;
}/**
 * 
 * @export
 * @interface FavoriteResponse
 */
export interface FavoriteResponse {
    /**
     * 
     * @type {number}
     * @memberof FavoriteResponse
     */
    id: number;
    /**
     * 
     * @type {FavoriteOfferResponse}
     * @memberof FavoriteResponse
     */
    offer: FavoriteOfferResponse;
}/**
 * 
 * @export
 * @interface GetIdCheckTokenResponse
 */
export interface GetIdCheckTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof GetIdCheckTokenResponse
     */
    token?: string | null;
}/**
 * 
 * @export
 * @interface NotificationSubscriptions
 */
export interface NotificationSubscriptions {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSubscriptions
     */
    marketingEmail: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationSubscriptions
     */
    marketingPush: boolean;
}/**
 * 
 * @export
 * @interface OfferAccessibilityResponse
 */
export interface OfferAccessibilityResponse {
    /**
     * 
     * @type {boolean}
     * @memberof OfferAccessibilityResponse
     */
    audioDisability?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OfferAccessibilityResponse
     */
    mentalDisability?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OfferAccessibilityResponse
     */
    motorDisability?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof OfferAccessibilityResponse
     */
    visualDisability?: boolean | null;
}/**
 * 
 * @export
 * @interface OfferCategoryResponse
 */
export interface OfferCategoryResponse {
    /**
     * 
     * @type {CategoryType}
     * @memberof OfferCategoryResponse
     */
    categoryType: CategoryType;
    /**
     * 
     * @type {string}
     * @memberof OfferCategoryResponse
     */
    label: string;
    /**
     * 
     * @type {CategoryNameEnum}
     * @memberof OfferCategoryResponse
     */
    name?: CategoryNameEnum | null;
}/**
 * 
 * @export
 * @interface OfferExtraData
 */
export interface OfferExtraData {
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    author?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OfferExtraData
     */
    durationMinutes?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    isbn?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    musicSubType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    musicType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    performer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    showSubType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    showType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    speaker?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    stageDirector?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferExtraData
     */
    visa?: string | null;
}/**
 * 
 * @export
 * @interface OfferImageResponse
 */
export interface OfferImageResponse {
    /**
     * 
     * @type {string}
     * @memberof OfferImageResponse
     */
    credit?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferImageResponse
     */
    url: string;
}/**
 * 
 * @export
 * @interface OfferOffererResponse
 */
export interface OfferOffererResponse {
    /**
     * 
     * @type {string}
     * @memberof OfferOffererResponse
     */
    name: string;
}/**
 * 
 * @export
 * @interface OfferResponse
 */
export interface OfferResponse {
    /**
     * 
     * @type {OfferAccessibilityResponse}
     * @memberof OfferResponse
     */
    accessibility: OfferAccessibilityResponse;
    /**
     * 
     * @type {OfferCategoryResponse}
     * @memberof OfferResponse
     */
    category: OfferCategoryResponse;
    /**
     * 
     * @type {string}
     * @memberof OfferResponse
     */
    description?: string | null;
    /**
     * 
     * @type {Array<ExpenseDomain>}
     * @memberof OfferResponse
     */
    expenseDomains: Array<ExpenseDomain>;
    /**
     * 
     * @type {string}
     * @memberof OfferResponse
     */
    externalTicketOfficeUrl?: string | null;
    /**
     * 
     * @type {OfferExtraData}
     * @memberof OfferResponse
     */
    extraData?: OfferExtraData | null;
    /**
     * 
     * @type {number}
     * @memberof OfferResponse
     */
    id: number;
    /**
     * 
     * @type {OfferImageResponse}
     * @memberof OfferResponse
     */
    image?: OfferImageResponse | null;
    /**
     * 
     * @type {boolean}
     * @memberof OfferResponse
     */
    isActive: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferResponse
     */
    isDigital: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferResponse
     */
    isDuo: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferResponse
     */
    isReleased: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferResponse
     */
    isSoldOut: boolean;
    /**
     * 
     * @type {string}
     * @memberof OfferResponse
     */
    name: string;
    /**
     * 
     * @type {Array<OfferStockResponse>}
     * @memberof OfferResponse
     */
    stocks: Array<OfferStockResponse>;
    /**
     * 
     * @type {OfferVenueResponse}
     * @memberof OfferResponse
     */
    venue: OfferVenueResponse;
    /**
     * 
     * @type {string}
     * @memberof OfferResponse
     */
    withdrawalDetails?: string | null;
}/**
 * 
 * @export
 * @interface OfferStockResponse
 */
export interface OfferStockResponse {
    /**
     * 
     * @type {Date}
     * @memberof OfferStockResponse
     */
    beginningDatetime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof OfferStockResponse
     */
    bookingLimitDatetime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof OfferStockResponse
     */
    cancellationLimitDatetime?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof OfferStockResponse
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof OfferStockResponse
     */
    isBookable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferStockResponse
     */
    isExpired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OfferStockResponse
     */
    isSoldOut: boolean;
    /**
     * 
     * @type {number}
     * @memberof OfferStockResponse
     */
    price: number;
}/**
 * 
 * @export
 * @interface OfferVenueResponse
 */
export interface OfferVenueResponse {
    /**
     * 
     * @type {string}
     * @memberof OfferVenueResponse
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferVenueResponse
     */
    city?: string | null;
    /**
     * 
     * @type {Coordinates}
     * @memberof OfferVenueResponse
     */
    coordinates: Coordinates;
    /**
     * 
     * @type {number}
     * @memberof OfferVenueResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OfferVenueResponse
     */
    name: string;
    /**
     * 
     * @type {OfferOffererResponse}
     * @memberof OfferVenueResponse
     */
    offerer: OfferOffererResponse;
    /**
     * 
     * @type {string}
     * @memberof OfferVenueResponse
     */
    postalCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OfferVenueResponse
     */
    publicName?: string | null;
}/**
 * 
 * @export
 * @interface PaginatedFavoritesResponse
 */
export interface PaginatedFavoritesResponse {
    /**
     * 
     * @type {Array<FavoriteResponse>}
     * @memberof PaginatedFavoritesResponse
     */
    favorites: Array<FavoriteResponse>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedFavoritesResponse
     */
    nbFavorites: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedFavoritesResponse
     */
    page: number;
}/**
 * 
 * @export
 * @interface RefreshResponse
 */
export interface RefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof RefreshResponse
     */
    accessToken: string;
}/**
 * 
 * @export
 * @interface RequestPasswordResetRequest
 */
export interface RequestPasswordResetRequest {
    /**
     * 
     * @type {string}
     * @memberof RequestPasswordResetRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RequestPasswordResetRequest
     */
    token?: string | null;
}/**
 * 
 * @export
 * @interface ResendEmailValidationRequest
 */
export interface ResendEmailValidationRequest {
    /**
     * 
     * @type {string}
     * @memberof ResendEmailValidationRequest
     */
    email: string;
}/**
 * 
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    newPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordRequest
     */
    resetPasswordToken: string;
}/**
 * 
 * @export
 * @interface SigninRequest
 */
export interface SigninRequest {
    /**
     * 
     * @type {string}
     * @memberof SigninRequest
     */
    identifier: string;
    /**
     * 
     * @type {string}
     * @memberof SigninRequest
     */
    password: string;
}/**
 * 
 * @export
 * @interface SigninResponse
 */
export interface SigninResponse {
    /**
     * 
     * @type {string}
     * @memberof SigninResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof SigninResponse
     */
    refreshToken: string;
}/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof UserProfileResponse
     */
    bookedOffers: { [key: string]: number; };
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    dateOfBirth?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof UserProfileResponse
     */
    depositExpirationDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof UserProfileResponse
     */
    depositVersion?: number | null;
    /**
     * 
     * @type {DomainsCredit}
     * @memberof UserProfileResponse
     */
    domainsCredit?: DomainsCredit | null;
    /**
     * 
     * @type {Date}
     * @memberof UserProfileResponse
     */
    eligibilityEndDatetime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof UserProfileResponse
     */
    eligibilityStartDatetime?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    email: string;
    /**
     * 
     * @type {Array<Expense>}
     * @memberof UserProfileResponse
     */
    expenses: Array<Expense>;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    firstName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserProfileResponse
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileResponse
     */
    isBeneficiary: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    lastName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileResponse
     */
    needsToFillCulturalSurvey: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    pseudo?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfileResponse
     */
    showEligibleCard: boolean;
    /**
     * 
     * @type {NotificationSubscriptions}
     * @memberof UserProfileResponse
     */
    subscriptions: NotificationSubscriptions;
}/**
 * 
 * @export
 * @interface UserProfileUpdateRequest
 */
export interface UserProfileUpdateRequest {
    /**
     * 
     * @type {NotificationSubscriptions}
     * @memberof UserProfileUpdateRequest
     */
    subscriptions?: NotificationSubscriptions | null;
}/**
 * 
 * @export
 * @interface ValidateEmailRequest
 */
export interface ValidateEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof ValidateEmailRequest
     */
    emailValidationToken: string;
}/**
 * 
 * @export
 * @interface ValidateEmailResponse
 */
export interface ValidateEmailResponse {
    /**
     * 
     * @type {string}
     * @memberof ValidateEmailResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof ValidateEmailResponse
     */
    idCheckToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ValidateEmailResponse
     */
    refreshToken: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete_favorite <DELETE>
         * @param {number} favorite_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletenativev1mefavoritesfavoriteId(favorite_id: number, options: any = {}): Promise<FetchArgs> {
            // verify required parameter 'favorite_id' is not null or undefined
            if (favorite_id === null || favorite_id === undefined) {
                throw new RequiredError('favorite_id','Required parameter favorite_id was null or undefined when calling deletenativev1mefavoritesfavoriteId.');
            }
            const localVarPath = `/native/v1/me/favorites/{favorite_id}`
                .replace(`{${"favorite_id"}}`, encodeURIComponent(String(favorite_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_bookings <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1bookings(options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/bookings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_id_check_token <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1idCheckToken(options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/id_check_token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_user_profile <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1me(options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_favorites <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1mefavorites(options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/me/favorites`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get_offer <GET>
         * @param {number} offer_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1offerofferId(offer_id: number, options: any = {}): Promise<FetchArgs> {
            // verify required parameter 'offer_id' is not null or undefined
            if (offer_id === null || offer_id === undefined) {
                throw new RequiredError('offer_id','Required parameter offer_id was null or undefined when calling getnativev1offerofferId.');
            }
            const localVarPath = `/native/v1/offer/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offer_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create_account <POST>
         * @param {AccountRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1account(body?: AccountRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary book_offer <POST>
         * @param {BookOfferRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookOffer(body?: BookOfferRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/book_offer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BookOfferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary book_offer <POST>
         * @param {BookOfferRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookings(body?: BookOfferRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/bookings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BookOfferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary cancel_booking <POST>
         * @param {number} booking_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookingsbookingIdcancel(booking_id: number, options: any = {}): Promise<FetchArgs> {
            // verify required parameter 'booking_id' is not null or undefined
            if (booking_id === null || booking_id === undefined) {
                throw new RequiredError('booking_id','Required parameter booking_id was null or undefined when calling postnativev1bookingsbookingIdcancel.');
            }
            const localVarPath = `/native/v1/bookings/{booking_id}/cancel`
                .replace(`{${"booking_id"}}`, encodeURIComponent(String(booking_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary change_password <POST>
         * @param {ChangePasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1changePassword(body?: ChangePasswordRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/change_password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChangePasswordRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_cultural_survey <POST>
         * @param {CulturalSurveyRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1meculturalSurvey(body?: CulturalSurveyRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/me/cultural_survey`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CulturalSurveyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create_favorite <POST>
         * @param {FavoriteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1mefavorites(body?: FavoriteRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/me/favorites`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FavoriteRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update_user_profile <POST>
         * @param {UserProfileUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1profile(body?: UserProfileUpdateRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            // authentication JWTAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserProfileUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary refresh <POST>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1refreshAccessToken(options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/refresh_access_token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary request_password_reset <POST>
         * @param {RequestPasswordResetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1requestPasswordReset(body?: RequestPasswordResetRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/request_password_reset`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestPasswordResetRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resend_email_validation <POST>
         * @param {ResendEmailValidationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1resendEmailValidation(body?: ResendEmailValidationRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/resend_email_validation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResendEmailValidationRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset_password <POST>
         * @param {ResetPasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1resetPassword(body?: ResetPasswordRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/reset_password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResetPasswordRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signin <POST>
         * @param {SigninRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1signin(body?: SigninRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/signin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SigninRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validate_email <POST>
         * @param {ValidateEmailRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1validateEmail(body?: ValidateEmailRequest, options: any = {}): Promise<FetchArgs> {
            const localVarPath = `/native/v1/validate_email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = await getAuthenticationHeaders();
            const localVarQueryParameter = {} as any;
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ValidateEmailRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(api: DefaultApi, configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete_favorite <DELETE>
         * @param {number} favorite_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletenativev1mefavoritesfavoriteId(basePath: string, favorite_id: number, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).deletenativev1mefavoritesfavoriteId(favorite_id, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary get_bookings <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1bookings(basePath: string, options?: any): Promise<BookingsResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getnativev1bookings(options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary get_id_check_token <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1idCheckToken(basePath: string, options?: any): Promise<GetIdCheckTokenResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getnativev1idCheckToken(options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary get_user_profile <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1me(basePath: string, options?: any): Promise<UserProfileResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getnativev1me(options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary get_favorites <GET>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1mefavorites(basePath: string, options?: any): Promise<PaginatedFavoritesResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getnativev1mefavorites(options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary get_offer <GET>
         * @param {number} offer_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getnativev1offerofferId(basePath: string, offer_id: number, options?: any): Promise<OfferResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).getnativev1offerofferId(offer_id, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary create_account <POST>
         * @param {AccountRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1account(basePath: string, body?: AccountRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1account(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary book_offer <POST>
         * @param {BookOfferRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookOffer(basePath: string, body?: BookOfferRequest, options?: any): Promise<BookOfferResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1bookOffer(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary book_offer <POST>
         * @param {BookOfferRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookings(basePath: string, body?: BookOfferRequest, options?: any): Promise<BookOfferResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1bookings(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary cancel_booking <POST>
         * @param {number} booking_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1bookingsbookingIdcancel(basePath: string, booking_id: number, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1bookingsbookingIdcancel(booking_id, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary change_password <POST>
         * @param {ChangePasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1changePassword(basePath: string, body?: ChangePasswordRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1changePassword(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary update_cultural_survey <POST>
         * @param {CulturalSurveyRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1meculturalSurvey(basePath: string, body?: CulturalSurveyRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1meculturalSurvey(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary create_favorite <POST>
         * @param {FavoriteRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1mefavorites(basePath: string, body?: FavoriteRequest, options?: any): Promise<FavoriteResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1mefavorites(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary update_user_profile <POST>
         * @param {UserProfileUpdateRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1profile(basePath: string, body?: UserProfileUpdateRequest, options?: any): Promise<UserProfileResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1profile(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary refresh <POST>
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1refreshAccessToken(basePath: string, options?: any): Promise<RefreshResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1refreshAccessToken(options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary request_password_reset <POST>
         * @param {RequestPasswordResetRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1requestPasswordReset(basePath: string, body?: RequestPasswordResetRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1requestPasswordReset(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary resend_email_validation <POST>
         * @param {ResendEmailValidationRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1resendEmailValidation(basePath: string, body?: ResendEmailValidationRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1resendEmailValidation(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary reset_password <POST>
         * @param {ResetPasswordRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1resetPassword(basePath: string, body?: ResetPasswordRequest, options?: any): Promise<EmptyResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1resetPassword(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary signin <POST>
         * @param {SigninRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1signin(basePath: string, body?: SigninRequest, options?: any): Promise<SigninResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1signin(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
        /**
         * 
         * @summary validate_email <POST>
         * @param {ValidateEmailRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postnativev1validateEmail(basePath: string, body?: ValidateEmailRequest, options?: any): Promise<ValidateEmailResponse> {
            const localVarFetchArgs = await DefaultApiFetchParamCreator(configuration).postnativev1validateEmail(body, options);
            const response = await safeFetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
            return handleGeneratedApiResponse(response)
        },
    }
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary delete_favorite <DELETE>
     * @param {number} favorite_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async deletenativev1mefavoritesfavoriteId(favorite_id: number, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.deletenativev1mefavoritesfavoriteId(this.basePath, favorite_id, options)
    }
    /**
     * 
     * @summary get_bookings <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getnativev1bookings(options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.getnativev1bookings(this.basePath, options)
    }
    /**
     * 
     * @summary get_id_check_token <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getnativev1idCheckToken(options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.getnativev1idCheckToken(this.basePath, options)
    }
    /**
     * 
     * @summary get_user_profile <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getnativev1me(options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.getnativev1me(this.basePath, options)
    }
    /**
     * 
     * @summary get_favorites <GET>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getnativev1mefavorites(options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.getnativev1mefavorites(this.basePath, options)
    }
    /**
     * 
     * @summary get_offer <GET>
     * @param {number} offer_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async getnativev1offerofferId(offer_id: number, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.getnativev1offerofferId(this.basePath, offer_id, options)
    }
    /**
     * 
     * @summary create_account <POST>
     * @param {AccountRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1account(body?: AccountRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1account(this.basePath, body, options)
    }
    /**
     * 
     * @summary book_offer <POST>
     * @param {BookOfferRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1bookOffer(body?: BookOfferRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1bookOffer(this.basePath, body, options)
    }
    /**
     * 
     * @summary book_offer <POST>
     * @param {BookOfferRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1bookings(body?: BookOfferRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1bookings(this.basePath, body, options)
    }
    /**
     * 
     * @summary cancel_booking <POST>
     * @param {number} booking_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1bookingsbookingIdcancel(booking_id: number, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1bookingsbookingIdcancel(this.basePath, booking_id, options)
    }
    /**
     * 
     * @summary change_password <POST>
     * @param {ChangePasswordRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1changePassword(body?: ChangePasswordRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1changePassword(this.basePath, body, options)
    }
    /**
     * 
     * @summary update_cultural_survey <POST>
     * @param {CulturalSurveyRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1meculturalSurvey(body?: CulturalSurveyRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1meculturalSurvey(this.basePath, body, options)
    }
    /**
     * 
     * @summary create_favorite <POST>
     * @param {FavoriteRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1mefavorites(body?: FavoriteRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1mefavorites(this.basePath, body, options)
    }
    /**
     * 
     * @summary update_user_profile <POST>
     * @param {UserProfileUpdateRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1profile(body?: UserProfileUpdateRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1profile(this.basePath, body, options)
    }
    /**
     * 
     * @summary refresh <POST>
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1refreshAccessToken(options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1refreshAccessToken(this.basePath, options)
    }
    /**
     * 
     * @summary request_password_reset <POST>
     * @param {RequestPasswordResetRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1requestPasswordReset(body?: RequestPasswordResetRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1requestPasswordReset(this.basePath, body, options)
    }
    /**
     * 
     * @summary resend_email_validation <POST>
     * @param {ResendEmailValidationRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1resendEmailValidation(body?: ResendEmailValidationRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1resendEmailValidation(this.basePath, body, options)
    }
    /**
     * 
     * @summary reset_password <POST>
     * @param {ResetPasswordRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1resetPassword(body?: ResetPasswordRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1resetPassword(this.basePath, body, options)
    }
    /**
     * 
     * @summary signin <POST>
     * @param {SigninRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1signin(body?: SigninRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1signin(this.basePath, body, options)
    }
    /**
     * 
     * @summary validate_email <POST>
     * @param {ValidateEmailRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async postnativev1validateEmail(body?: ValidateEmailRequest, options?: any) {
        const functionalApi = DefaultApiFp(this, this.configuration)
        return functionalApi.postnativev1validateEmail(this.basePath, body, options)
    }
}
