import { t } from '@lingui/macro'
import { configureRefreshFetch } from 'refresh-fetch'

import { api } from 'api/api'
import { Headers, NotAuthenticatedError } from 'libs/fetch'
import { _ } from 'libs/i18n'
import { getRefreshToken } from 'libs/keychain'
import { clearAccessToken, getAccessToken, saveAccessToken } from 'libs/storage'

export async function getAuthenticationHeaders(options?: RequestInit): Promise<Headers> {
  const accessToken = await getAccessToken()
  const shouldAuthenticate = accessToken && (!options || options.credentials !== 'omit')
  if (shouldAuthenticate) {
    return { Authorization: `Bearer ${accessToken}` }
  }
  return {}
}

// In this case, the following `any` is not that much of a problem in the context of usage
// with the autogenerated files of swagger-codegen.
// !!! Not encouraging to use `any` anywhere else !!!
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export async function handleGeneratedApiResponse(response: Response): Promise<any | void> {
  if (response.status === 204) {
    return {}
  }

  const json = await response.json()
  return json
}

const shouldRefreshToken = (response: Response) => {
  console.warn('SHOULD REFRESH TOKEN')
  return response.status === 401
}

export const refreshToken = async () => {
  console.warn('REFRESH TOKEN')
  const refreshToken = await getRefreshToken()
  try {
    const response = await api.nativeV1RefreshAccessTokenPost({
      headers: {
        Authorization: `Bearer ${refreshToken}`,
      },
    })
    await clearAccessToken()
    await saveAccessToken(response.accessToken)
  } catch (err) {
    throw new NotAuthenticatedError()
  }
}

export const refreshFetch = configureRefreshFetch({
  fetch: (url: string, options = {}) => {
    return fetch(url, options).then((response) =>
      response.ok ? response : Promise.reject(response)
    )
  },
  shouldRefreshToken,
  refreshToken,
})
