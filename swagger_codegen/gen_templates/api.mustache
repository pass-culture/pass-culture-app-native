/// <reference path="./custom.d.ts" />
// tslint:disable
{{>licenseInfo}}

import { getAuthenticationHeaders, handleGeneratedApiResponse, safeFetch } from 'api/apiHelpers'
import { EmptyResponse } from 'libs/fetch'

import { Configuration } from './configuration'

const BASE_PATH = '{{{basePath}}}'.replace(/\/+$/, '')

/**
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>
}

/**
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string
  options: any
}

/**
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration?: Configuration
  constructor(configuration?: Configuration, protected basePath: string = BASE_PATH) {
    if (configuration) {
      this.configuration = configuration
      this.basePath = configuration.basePath || this.basePath
    }
  }

  public getConfiguration = () => {
    return this.configuration
  }
}

/**
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name = 'RequiredError'
  constructor(public field: string, msg?: string) {
    super(msg)
  }
}

{{#models}}
{{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{^isEnum}}{{>modelGeneric}}{{/isEnum}}{{/model}}
{{/models}}
{{#apiInfo}}{{#apis}}{{#operations}}

/**
 * {{classname}} - fetch parameter creator{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}FetchParamCreator = function (configuration?: Configuration) {
  return {
  {{#operation}}
    /**
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: any = {}): Promise<FetchArgs> {
  {{#allParams}}
  {{#required}}
      // verify required parameter '{{paramName}}' is not null or undefined
      if ({{paramName}} === null || {{paramName}} === undefined) {
        throw new RequiredError(
          '{{paramName}}',
          'Required parameter {{paramName}} was null or undefined when calling {{nickname}}.'
        )
      }
  {{/required}}
  {{/allParams}}
      let pathname = `{{{path}}}`{{#pathParams}}.replace(
        `{${'{{baseName}}'}}`,
        encodeURIComponent(String({{paramName}}))
      ){{/pathParams}}
  {{#hasQueryParams}}
      {{! Imported from https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/typescript-fetch/apis.mustache }}
      const queryParameters: any = {};

      {{#queryParams}}
        {{#isArray}}
        // IS ARRAY
        if ({{paramName}} != null) {
            {{#isCollectionFormatMulti}}
            queryParameters['{{baseName}}'] = {{paramName}};
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
            queryParameters['{{baseName}}'] = {{#uniqueItems}}Array.from({{/uniqueItems}}{{paramName}}{{#uniqueItems}}){{/uniqueItems}}!.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
            {{/isCollectionFormatMulti}}
        }

        {{/isArray}}
        {{^isArray}}
        if ({{paramName}} != null) {
            {{#isDateTimeType}}
            queryParameters['{{baseName}}'] = ({{paramName}} as any).toISOString();
            {{/isDateTimeType}}
            {{^isDateTimeType}}
            {{#isDateType}}
            queryParameters['{{baseName}}'] = ({{paramName}} as any).toISOString().substring(0,10);
            {{/isDateType}}
            {{^isDateType}}
            queryParameters['{{baseName}}'] = {{paramName}};
            {{/isDateType}}
            {{/isDateTimeType}}
        }

        {{/isArray}}
      {{/queryParams}}
      const encodedQueryParams = '?' + Object.keys(queryParameters).map((key) => {
        return `${encodeURIComponent(key)}=${encodeURIComponent(queryParameters[key])}`
      }).join('&')
      pathname += encodedQueryParams
  {{/hasQueryParams}}
      let secureOptions = Object.assign(options, { credentials: 'omit' })
  {{#authMethods}}
      // authentication {{name}} required
      secureOptions = Object.assign(secureOptions, { credentials: 'include' })
  {{/authMethods}}
      const localVarRequestOptions = Object.assign({ method: '{{httpMethod}}' }, secureOptions)
      const localVarHeaderParameter = await getAuthenticationHeaders(secureOptions)
  {{#headerParams}}
      {{#isListContainer}}
      if ({{paramName}}) {
        localVarHeaderParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]))
      }
      {{/isListContainer}}
      {{^isListContainer}}
      if ({{paramName}} !== undefined && {{paramName}} !== null) {
        localVarHeaderParameter['{{baseName}}'] = String({{paramName}})
      }
      {{/isListContainer}}
  {{/headerParams}}
  {{#formParams}}
      {{#isListContainer}}
      if ({{paramName}}) {
      {{#isCollectionFormatMulti}}
        {{paramName}}.forEach((element) => {
          localVarFormParams.append('{{baseName}}', element as any)
        })
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
          localVarFormParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]))
      {{/isCollectionFormatMulti}}
      }
      {{/isListContainer}}
      {{^isListContainer}}
      if ({{paramName}} !== undefined) {
        localVarFormParams.set('{{baseName}}', {{paramName}} as any)
      }
      {{/isListContainer}}
  {{/formParams}}
  {{#bodyParam}}
      {{^consumes}}
      localVarHeaderParameter['Content-Type'] = 'application/json'
      {{/consumes}}
      {{#consumes.0}}
      localVarHeaderParameter['Content-Type'] = '{{{mediaType}}}'
      {{/consumes.0}}
  {{/bodyParam}}
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
  {{#bodyParam}}
      const needsSerialization = (<any>"{{dataType}}" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.body =  needsSerialization ? JSON.stringify({{paramName}} || {}) : ({{paramName}} || "")
  {{/bodyParam}}
      return {
        url: pathname,
        options: localVarRequestOptions,
      }
    },
  {{/operation}}
  }
}

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{{description}}}{{/description}}
 */
export const {{classname}}Fp = function(api: {{classname}}, configuration?: Configuration) {
  return {
  {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}EmptyResponse{{/returnType}}> {
      const localVarFetchArgs = await {{classname}}FetchParamCreator(configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options)
      const response = await safeFetch(configuration?.basePath + localVarFetchArgs.url, localVarFetchArgs.options, api)
      return handleGeneratedApiResponse(response)
    },
  {{/operation}}
  }
}

{{#withInterfaces}}
/**
 * {{classname}} - interface{{#description}}
 * {{&description}}{{/description}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}}Interface {
{{#operation}}
  /**
   {{#summary}}
   * @summary {{&summary}}
   {{/summary}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#allParams}}
   * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
   {{/allParams}}
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof {{classname}}Interface
   */
  {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>

{{/operation}}
}

{{/withInterfaces}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{/withInterfaces}}
  {{#operation}}
  /**
    * {{&notes}}
    {{#summary}}
    * @summary {{&summary}}
    {{/summary}}
    {{#isDeprecated}}
    * @deprecated
    {{/isDeprecated}}
    {{#allParams}}
    * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
    {{/allParams}}
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof {{classname}}
    */
  public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any) {
    const configuration = this.getConfiguration()
    return {{classname}}Fp(this, configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options)
  }
  {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}
