fastlane_require 'dotenv'
fastlane_require 'spaceship'
release_notes_command = "git log HEAD --pretty=format:\"%s\" -1"

import("FastfileConfig")
import("FastfileCheck")
import("FastfileEnvironment")
import("FastfileIOSSigning")

# iOS

platform :ios do
  before_all do
    setup_circle_ci
  end

  lane :build do |options|
    gym(
      scheme: ENV['IOS_SCHEME'],
      output_directory: "#{ENV['IOS_IPA_DIRECTORY']}",
      output_name: "#{ENV['IOS_IPA_NAME']}",
      silent: true,
      export_method: ENV['EXPORT_METHOD'],
      workspace: "#{ENV['IOS_PROJECT_PATH']}/PassCulture.xcworkspace")
  end
  release_notes = %x[#{release_notes_command}]
  escaped_release_notes = release_notes.gsub("\"", "\\\"")

  lane :build_e2e do |options|
    gym(
      scheme: ENV['IOS_SCHEME'],
      output_directory: ENV['IOS_IPA_DIRECTORY'],
      output_name: ENV['IOS_APP_NAME'],
      silent: true,
      workspace: "#{ENV['IOS_PROJECT_PATH']}/PassCulture.xcworkspace",
      configuration: ENV['BUILD_CONFIGURATION'],
      sdk: "iphonesimulator",
      destination: "generic/platform=iOS Simulator",
      derived_data_path: ENV['IOS_DERIVED_DATA_PATH'],
      skip_package_ipa: true
    )
  end
  
  lane :deploy_appDistribution do |options|
    firebase_app_distribution(
        app: ENV['FIREBASE_PUBLIC_IOS_APP_ID'],
        release_notes: escaped_release_notes,
        ipa_path: "#{ENV['IOS_IPA_DIRECTORY']}/#{ENV['IOS_IPA_NAME']}",
        service_credentials_file: options[:firebase_token],
        groups: "devs, pms, designers, qa"
    )
  end

  lane :deploy do |options|
    if options[:ota] then # @hot-updater
      version = `jq -r .version ../package.json`
      release_notes = %x[#{release_notes_command}]
      escaped_release_notes = release_notes.gsub("\"", "\\\"")
      sh "cd .. && \
      yarn hotupdater:deploy:ios:#{ENV['ENV']} \
          -m \"#{escaped_release_notes}\" \
          -t #{version} "
      
    else
      match(
        shallow_clone: true,
        clone_branch_directly: true,
        readonly: true
      )
      build
      if ENV['DEPLOYMENT_PLATFORM'] === 'appDistribution'
        deploy_appDistribution(firebase_token: options[:firebase_token])
      else
        # after upgrading fastlane to version 2.212.2, an error occured "Could not determine the package’s bundle ID. The package is missing an Info.plist
        # or the CFBundlePackageType is not ‘APPL’ or ‘FMWK’. Unable to validate your application.".
        # This parameters fixes it (see https://github.com/fastlane/fastlane/issues/20741)
        ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'false'
        pilot(
          username: ENV['APPLE_ACCOUNT_USERNAME'],
          distribute_external: false,
          skip_waiting_for_build_processing: true,
          apple_id: ENV['APPLE_APP_ID']
        )
      end
    end
  end

end

# Android

platform :android do

  lane :build do |options|
    sh "cd ../#{ENV['ANDROID_PROJECT_DIR']} && ./gradlew #{ENV['ANDROID_GRADLE_TASK']}"
  end

  private_lane :deploy_playStore do |options|
    UI.important("env: #{options[:env]}")
    supply(
      package_name: ENV['ANDROID_APP_ID'],
      aab: "android/app/build/outputs/bundle/productionRelease/app-production-release.aab",
      skip_upload_metadata: true,
      skip_upload_apk: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end
  
  lane :deploy_appDistribution do |options|
    firebase_app_distribution(
        app: ENV['FIREBASE_PUBLIC_ANDROID_APP_ID'],
        android_artifact_type: 'APK' ,
        android_artifact_path: ENV["ANDROID_FILE_PATH"],
        service_credentials_file: options[:firebase_token],
        groups: "devs, pms, designers, qa"
    )
  end

  lane :deploy do |options|
    if options[:ota] then # @hot-updater
      version = `jq -r .version ../package.json`
      release_notes = %x[#{release_notes_command}]
      escaped_release_notes = release_notes.gsub("\"", "\\\"")
      sh "cd .. && \
      yarn hotupdater:deploy:android:#{ENV['ENV']} \
          -m \"#{escaped_release_notes}\" \
          -t #{version} "
      
    else
      build
      if ENV['DEPLOYMENT_PLATFORM'] === 'appDistribution' then
        deploy_appDistribution(firebase_token: options[:firebase_token])
      elsif ENV['DEPLOYMENT_PLATFORM'] === 'store' then
        deploy_playStore
      end
    end
  end

end
